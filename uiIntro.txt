UI组件及主题颜色说明文档（有新的可以在下面添加）

1.通过类引用
控件：
小按钮：.btnSmall
中按钮：.btnMid
灰色按钮：.xeBtnDefault
不可点击按钮：.btnForbid
蓝色按钮：.btnBlue
红色按钮：.btnRed
输入框默认：.inputDefault
深色幕布：.darkScreen
页面头部标题栏: .pageTopTitle
单选按钮：  <input class="with-gap" id="aaa" name="group2" type="radio" checked/>
			<label for="aaa">
			***
			</label>
局部加载：  @include('component.loadingPartial')  --> 父容器position=absolute||relative,默认为隐藏


颜色：
红色：.xeRed
蓝色：.xeBlue
黑色：.xeBlack
绿色：.xeGreen
橙黄色：.xeYellow


顶部提示 公共方法：
	baseUtils.show.defaultTip(content, callback, time, color);

	//对defaultTip方法的抽象
    baseUtils.show.blueTip(content, callback, time);
    baseUtils.show.redTip(content, callback, time);

    //参数说明
    	content(string): 提示的文本内容
    	callback(function): 提示框消失后的回调函数
    	time(number/ms): 提示框显示的时间，默认2000ms

    	color(string): 目前只支持两种颜色: 'red', 'blue'


弹窗插件：
	依赖：（依赖jQuery）
	css:
	    <link type="text/css" rel="stylesheet" href="../css/external/jquery-alert.css?{{env('timestamp')}}"/>
	js:
	    <script type="text/javascript" src="../js/external/jquery-alert.js?{{env('timestamp')}}"></script>

	调用方式：
	$.alert(txt, type, option);
	参数：
	txt(string): 弹框文本内容，可以使用html字符串
	type(string):弹框类型
		info
		success
		error
		custom
	option(object):{
		title(string): 弹框标题,
		icon(string)：弹框小图标 'blue'/'red'/'green',
		btn(number): 按钮组-1:只显示取消按钮; 2:只显示确认按钮; 3:同时显示取消和确认按钮
		oktext(string):确认按钮的文本
		canceltext(string):取消按钮的文本
		onOk(function): 点击确认的回调,
		onCancel(function): 点击取消回调,
		onClose(function): 弹窗关闭的回调,
		link(string):接在文本内容后的超链接，
		href(string):超链接路径

	}


Gulp引入（安装nodejs）：

    npm淘宝镜像 npm -> cnpm
        npm install -g cnpm --registry=https://registry.npm.taobao.org

	1. 全局安装gulp环境：命令行执行  npm install -g gulp
	2. gulp依赖安装： 到项目目录下，命令行执行  npm install
	3. 源文件与压缩文件的对应：
		resources/assets/js/*.js(源文件) => public/js/
		resources/assets/sass/*.scss(源文件) => public/css/
		resources/assets/css/*.css(源文件) => public/css/
	4. 调试
		在chorme中开启Enable JavaScript source maps选项，通过map映射文件用来调试压缩后的文件
	5. 操作说明（命令行下运行）：
		运行gulp：
			gulp，开启默认压缩任务；
			gulp --watch  开启压缩，并且监听文件，当css、js文件保存后自动进行压缩；
			gulp --onlyWatch  只监听文件，自动压缩修改的文件，不会对所有源文件压缩混淆

			gulp --production  上线之前执行该命令，去除压缩文件对应的map映射。
			gulp --renewVersion  修改env下的时间戳

			gulp --production --renewVersion  所有css、js全部重新生成没有映射的文件
			gulp --production --noDel --onlyWatch 用于线上环境代码修改，只对修改的文件进行压缩混淆，不会清除原来没有操作的文件