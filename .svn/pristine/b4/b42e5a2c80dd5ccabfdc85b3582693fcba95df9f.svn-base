<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Tools\AppUtils;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Input;
use App\Http\Controllers\Tools\Utils;
use League\Flysystem\Exception;

class ProductController extends Controller
{
    private $request;
    private $app_id;
    public function __construct(Request $request)
    {
        $this->request = $request;
        $this->app_id = AppUtils::getAppID();
    }

    //内容创建页面
    public function getCreateContent()
    {
        return view('admin.createContent');
    }

    //创建产品包页面
    public function createPackage()
    {
        //专栏购买有效时间'0' => '无期限',
        $period_time = array(
            '7' => '12个月',
            '6' => '6个月',
            '5' => '3个月',
            '4' => '1个月',
            '3' => '15天',
            '2' => '7天',
            '1' => '3天',
        );

        //应用权限
        $appModuleInfo = AppUtils::getModuleInfo($this->app_id);

        // 分类数据
        if (!empty($appModuleInfo) && $appModuleInfo[0]->resource_category == 1  ){
            // 分类数据信息
            $category_info = DB::connection('mysql')->table('t_category')
                ->where('app_id', '=', AppUtils::getAppID())
                ->where('id', '!=', '0')
                ->orderby('weight', 'desc')
                ->Lists('category_name', 'id');
        }

        return View("admin.createPackage",compact('period_time', 'appModuleInfo','category_info'));
    }

    //编辑产品专栏页面
    public function editPackage()
    {
        $pack_id = Input::get('id', '');
        $package = \DB::table('t_pay_products')
            ->where('id', '=', $pack_id)
            ->where('app_id', '=', AppUtils::getAppID())
            ->first();
//        dump($package);
//        exit;
        //专栏购买有效时间'0' => '无期限',
        $period_time = array(
            '7' => '12个月',
            '6' => '6个月',
            '5' => '3个月',
            '4' => '1个月',
            '3' => '15天',
            '2' => '7天',
            '1' => '3天'
        );
        $period_longer = array(
            '366' => '7',//'12个月',
            '182' => '6',//'6个月',
            '91' => '5',//'3个月',
            '30' => '4',//'1个月',
            '15' => '3',//'15天',
            '7' => '2',//'7天',
            '3' => '1'//'3天',
        );
        //已存储有效时长
        if($package->period){
            $period_long = intval($package->period/24/3600);
            if(array_key_exists($period_long,$period_longer)){
                $period_long = $period_longer[$period_long];
            }else{
                $period_long = '';
            }
        }else{
            $period_long = '';
        }


        //应用权限
        $appModuleInfo = AppUtils::getModuleInfo($this->app_id);

        // 分类数据
        if (!empty($appModuleInfo) && $appModuleInfo[0]->resource_category == 1  ){
            // 分类数据信息
            $category_info = DB::connection('mysql')->table('t_category')
                ->where('app_id', '=', $this->app_id)
                ->where('id', '!=', '0')
                ->orderby('weight', 'desc')
                ->Lists('category_name', 'id');
            // 所属分类信息
            $package_category = DB::connection('mysql')->table('t_category_resource')
                ->select('category_id')
                ->where('app_id', '=', $this->app_id)
                ->where('category_id','!=','0')
                ->where('resource_id','=' ,$pack_id)
                ->where('state','=',1)
                ->pluck('category_id');
        }
        return view('admin.editPackage', compact('package','period_time','period_long','category_info','package_category'));
    }

    //拉取产品包列表
    public function getPackageList()
    {
        $app_id = AppUtils::getAppID();
        //初始化排序权重值
        $total = \DB::select("select count(1) as count from t_pay_products where app_id = '$app_id'")[0];
        $weight = \DB::select("select count(1) as count from t_pay_products where app_id = '$app_id' and order_weight = 0 ")[0];
        //print_r($total);print_r($weight);
        if($total && $weight){
            if($weight->count == 1){//给最新部署的专栏初始化排序值，默认为最靠前
                \DB::update("update t_pay_products set order_weight = $total->count where order_weight = 0 and app_id = '$app_id'");
            }
            if($weight->count == $total->count ){
                $package_list = \DB::table('t_pay_products')->where('app_id', '=', AppUtils::getAppID())
                    ->orderby('created_at', 'desc')->get();
                $weight = $total->count;
                foreach ($package_list as $key => $value){
                    \DB::update("update t_pay_products set order_weight = $weight where id = '$value->id' and app_id = '$app_id'");
                    $weight -=1;
                }
            }
            else if($weight->count < $total->count && $weight->count >1)
            {
                $package_list = \DB::table('t_pay_products')->where('app_id', '=', AppUtils::getAppID())->where('order_weight', '=', 0)
                    ->orderby('created_at', 'desc')->get();
                $weight = $total->count;
                foreach ($package_list as $key => $value){
                    \DB::update("update t_pay_products set order_weight = $weight where id = '$value->id' and app_id = '$app_id'");
                    $weight -=1;
                }
            }

        }
        //on
        $package_on_url_list = [];
        $package_list_on = \DB::table('t_pay_products')->where('app_id', '=', $app_id)
            ->where('state', '=', '0')->orderby('order_weight', 'desc')->orderby('created_at', 'desc')->get();
        //更新专栏期数
        foreach($package_list_on as $key=>$item){
            $resource_count = \DB::select(" select sum(count) as count from (
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_alive where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and state=0
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_audio where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and audio_state=0
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_video where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and video_state=0
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_image_text where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and display_state=0
  ) t1
 )t2
 ")[0];
            \DB::table('t_pay_products')->where('app_id','=',$app_id)->where('id','=',$item->id)->update(['resource_count' => $resource_count->count]);

            //专栏链接
            $package_url = $this->getPackageUrl($item->id);
            $package_on_url_list[$key] = $package_url;
        }
        //off
        $package_off_url_list = [];
        $package_list_off = \DB::table('t_pay_products')->where('app_id', '=', $app_id)
            ->where('state', '=', '1')->orderby('order_weight', 'desc')->orderby('created_at', 'desc')->get();
        //更新专栏期数
        foreach($package_list_off as $key=>$item){
            $resource_count = \DB::select(" select sum(count) as count from (
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_alive where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and state=1
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_audio where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and audio_state=1
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_video where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and video_state=1
  ) t1
 UNION ALL 
select case when count is not null then count else 0 end as count from (
 select count(*) as count from t_image_text where app_id='$app_id' and payment_type in(2,3) and product_id='$item->id' and display_state=1
  ) t1
 )t2
 ")[0];
            \DB::table('t_pay_products')->where('app_id','=',$app_id)->where('id','=',$item->id)->update(['resource_count' => $resource_count->count]);

            //专栏链接
            $package_url = $this->getPackageUrl($item->id);
            $package_off_url_list[$key] = $package_url;
        }
        return view('admin.packageList', compact('package_list_on', 'package_list_off','package_on_url_list','package_off_url_list'));
    }


    //上传资源
    public function uploadResource()
    {
        $resource_type = Input::get('resource_type', 'package');

        $params = Input::get('params', '');
        $category_type = Input::get('category_type','');

        if(array_key_exists('payment_type',$params) && array_key_exists('price',$params) && $params['payment_type'] == 2 && $params['price'] == 0){
            return response()->json(['code' => -521, 'msg' => '上传失败，单价需大于0元!']);
        }

        //若客户使用的是"个人运营模式"即use_collection=1,则限制其piece_price不能超过200元
        $model_result=\DB::connection("mysql_config")->table("t_app_conf")
            ->where("app_id","=",AppUtils::getAppIdByOpenId(AppUtils::getOpenId()))
            ->where("wx_app_type","=",1)->first();

        if ($model_result->use_collection == 1) {
            if(array_key_exists('price',$params) && $params['price'] >100000){
                //TODO:返回操作失败,个人运营模式下 定价不能超过1000元
                return response()->json(['code' => -521, 'msg' => '上传失败，单价不能超过1000元!']);
            }
        }

        //分离descrb
        $params['descrb'] = $this->sliceUE($params['descrb']);
        if($params['descrb']==false){
            //编辑器内容有问题 给前端返回提示信息并取消上传
            return response()->json(['code' => -2, 'msg' => '上传失败，复制的内容有问题，请尝试分开复制，或记录复制内容并联系技术小哥']);
        }
        //插入当前时间
        $app_id = AppUtils::getAppID();
        $current_time = Utils::getTime();
        $params['created_at'] = $current_time;
        $params['updated_at'] = $current_time;

        //如果创建的是专栏
        if ($resource_type == 'package') {
            $table_name = 't_pay_products';
            $id = Utils::getUniId('p_');
            //新建专栏默认是未上架状态 默认为0则是上架状态
            $params['state'] = 1;
            $addpackage = 0; //资源包新增参数
            //专栏购买有效时间'0' => '0',//无期限
            $period_time = array(
                '7' => '366', //'12个月',
                '6' => '182',//'6个月',
                '5' => '91',//'3个月',
                '4' => '30',//'1个月',
                '3' => '15',//'15天',
                '2' => '7',//'7天',
                '1' => '3',//'3天',
            );
            //处理有效时间
            if(array_key_exists('period',$params)){
                if(array_key_exists($params['period'],$period_time)){
                    $params['period'] = $period_time[$params['period']]*24*3600;
                }else{
                    $params['period']=null;
                }
            }
        }

        $params['id'] = $id;
        $params['app_id'] = $app_id;


        $resource_id = $id;
        $insert = \DB::table($table_name)->insertGetId($params);

        if ($resource_id) { //图片压缩
            if(array_key_exists('img_url', $params)) $this->imageDeal($params['img_url'], $table_name, $id);//,160,120,60);
            //if( $resource_type == 'audio' && array_key_exists('sign_url', $params)) $this->imageDealo($params['sign_url'], $table_name, $id, 1334,750,60,'sign_url_compressed');
        }

        /*******************************首页分类数据****************************************/
        $result_insert = true;

        $category_info = DB::connection('mysql')->table('t_category')
            ->where('app_id','=',$app_id)
            ->where('id','!=','0')
            ->pluck('id');

        // 直接存入四條分類記錄
        foreach ($category_info as $value){
                $insert = DB::connection('mysql')->table('t_category_resource')->insert(
                    ['app_id'=>$app_id,'category_id'=>$value,'resource_id'=>$resource_id,'resource_type'=>0,'state'=>0,'created_at'=>date('Y-m-d H:i:s',time())]);
            }

        // 同时插入一条首页分类数据  默认显示
        $insert = DB::connection('mysql')->table('t_category_resource')->insert(
            ['app_id'=>$app_id,'category_id'=>'0','resource_id'=>$resource_id,'resource_type'=>0,'state'=>1,'created_at'=>date('Y-m-d H:i:s',time())]
        );


        // 如果有分类信息 添加
//        dd($category_type);
        if (!empty($category_type)){
            // 再更新所有分类为现在的状态
            DB::connection('mysql')->table('t_category_resource')
                ->where('app_id','=',$app_id)
                ->where('resource_id','=',$resource_id)
                ->where('resource_type','=',0)
                ->whereIn('category_id',$category_type)
                ->update(['state'=>1]);
        }

        if ($result_insert) {
            return response()->json(['code' => 0, 'msg' => '新增成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '新增失败']);
        }
    }

    //保存资源编辑
    public function saveResourceEdit()
    {
        $resource_type = Input::get('resource_type', 'package');
        $resource_id = Input::get('id', '');

        $params = Input::get('params', '');
        $category_type = Input::get('category_type','');

        if(array_key_exists('payment_type',$params) && array_key_exists('price',$params) && $params['payment_type'] == 2 && $params['price'] == 0){
            return response()->json(['code' => -521, 'msg' => '上传失败，单价需大于0元!']);
        }

        if(array_key_exists('price',$params)){
            //若客户使用的是"个人运营模式"即use_collection=1,则限制其piece_price不能超过200元
            $model_result=\DB::connection("mysql_config")->table("t_app_conf")
                ->where("app_id","=",AppUtils::getAppIdByOpenId(AppUtils::getOpenId()))
                ->where("wx_app_type","=",1)->first();

            if ($model_result->use_collection == 1) {
                if($params['price'] >100000){
                    //TODO:返回操作失败,个人运营模式下 定价不能超过1000元
                    return response()->json(['code' => -521, 'msg' => '上传失败，单价不能超过1000元!']);
                }
            }
        }


        //分离descrb
        if (array_key_exists('descrb', $params))
        {
            $params['descrb'] = $this->sliceUE($params['descrb']);
            if($params['descrb']==false){
                //编辑器内容有问题 给前端返回提示信息并取消上传
                return response()->json(['code' => -2, 'msg' => '上传失败，复制的内容有问题，请尝试分开复制，或记录复制内容并联系技术小哥']);
            }
        }
        //插入当前时间
        $app_id = AppUtils::getAppID();
        $current_time = Utils::getTime();
        $params['updated_at'] = $current_time;

        //如果创建的是专栏
        if ($resource_type == 'package')
        {
            $table_name = 't_pay_products';
            //专栏购买有效时间'0' => '0' //无期限
            $period_time = array(
                '7' => '366',//'12个月',
                '6' => '182',//'6个月',
                '5' => '91',//'3个月',
                '4' => '30',//'1个月',
                '3' => '15',//'15天',
                '2' => '7',//'7天',
                '1' => '3',//'3天',
            );
            //处理有效时间
            if(array_key_exists('period',$params)){
                if(array_key_exists($params['period'], $period_time)){
                    $params['period'] = $period_time[$params['period']]*24*3600;
                }else{
                    $params['period']=null;
                }
            }
        }


        $result = \DB::table($table_name)
            ->where('id', '=', $resource_id)
            ->where('app_id', '=', $app_id)
            ->update($params);
//        dump($result);

        //如果产品包名编辑,修改资源表中对应的产品包名
        try {
            $product_name = $params['name'];
        } catch (\Exception $e) {
            $product_name = "";
        }

        //图片压缩
        if ($result ) {
            if(array_key_exists('img_url', $params)) $this->imageDeal($params['img_url'], $table_name, $resource_id);//,160,120,60);
            //if(array_key_exists('sign_url', $params)) $this->imageDealo($params['sign_url'], $table_name, $resource_id, 1334,750,60,'sign_url_compressed');
        }

        if ($resource_type == 'package' && !empty($product_name)) {
            $audio_update_result = \DB::update("UPDATE t_audio SET product_name='$product_name' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $video_update_result = \DB::update("UPDATE t_video SET product_name='$product_name' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $image_text_update_result = \DB::update("UPDATE t_image_text SET product_name='$product_name' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $alive_update_result = \DB::update("UPDATE t_alive SET product_name='$product_name' WHERE product_id='$resource_id' and app_id = '$app_id'");
        }

        //修改了package包的状态,要修改对应的资源表对应的包的状态
        if ($resource_type == 'package' && array_key_exists('state', $params)) {
            $state = $params['state'];
            $audio_update_state = \DB::update("UPDATE t_audio SET product_state='$state' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $video_update_state = \DB::update("UPDATE t_video SET product_state='$state' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $image_text_update_state = \DB::update("UPDATE t_image_text SET product_state='$state' WHERE product_id='$resource_id' and app_id = '$app_id'");
            $alive_update_state = \DB::update("UPDATE t_alive SET product_state='$state' WHERE product_id='$resource_id' and app_id = '$app_id'");

//            /*******************更新状态的同时 更新分类资源首页现实问题******************/
//            if ($state == 1){
//                $category_old = DB::connection('mysql')->select(" select * from t_category_resource where resource_id = '$resource_id' and app_id = '$app_id' and category_id= '0' and resource_type = 0 ");
//                if ($category_old){
//                    $update_category_state = DB::connection('mysql')->update(" update t_category_resource set state = 0  resource_id = '$resource_id' and app_id = '$app_id' and category_id= '0' and resource_type = 0");
//                } else {
//                    DB::connection('mysql')->table('t_category_resource')->insert(['app_id'=>$app_id,'category_id'=>'0','resource_id'=>$resource_id,'resource_type'=>0,'state'=> 0,'created_at'=>date('Y-m-d H:i:s',time())]);
//                }
//            } elseif ($state == 0){
//                $category_old = DB::connection('mysql')->select(" select * from t_category_resource where resource_id = '$resource_id' and app_id = '$app_id' and category_id= '0' and resource_type = 0 ");
//                if ($category_old){
//                    $update_category_state = DB::connection('mysql')->update(" update t_category_resource set state = 1  resource_id = '$resource_id' and app_id = '$app_id' and category_id= '0' and resource_type = 0");
//                } else {
//                    DB::connection('mysql')->table('t_category_resource')->insert(['app_id'=>$app_id,'category_id'=>'0','resource_id'=>$resource_id,'resource_type'=>0,'state'=>1,'created_at'=>date('Y-m-d H:i:s',time())]);
//                }
//            }
        }

        //修改了package包的价格,要修改对应的资源表对应的包的状态
        if ($resource_type == 'package' && array_key_exists('price', $params)) {
            $price = $params['price'];
            $audio_update_price = \DB::update("UPDATE t_audio SET piece_price='$price' WHERE product_id='$resource_id' and payment_type = 3 and app_id = '$app_id'");
            $video_update_price = \DB::update("UPDATE t_video SET piece_price='$price' WHERE product_id='$resource_id' and payment_type = 3 and app_id = '$app_id'");
            $image_text_update_price = \DB::update("UPDATE t_image_text SET piece_price='$price' WHERE product_id='$resource_id' AND payment_type = 3 and app_id = '$app_id'");
            $alive_update_price = \DB::update("UPDATE t_alive SET piece_price='$price' WHERE product_id='$resource_id' and payment_type = 3 and app_id = '$app_id'");
        }

        /************首页分类数据***************************************************************/
        // $resource_id  $app_id
        // 获得分类资源关系表中 该资源包数据

        if (!array_key_exists('state', $params)){
            $category_info = DB::connection('mysql')->table('t_category')
                ->where('app_id','=',$app_id)
                ->where('id','!=','0')
                ->pluck('id');
            // 获得分类关系表中所有的该资源的分类数据
            $relation = DB::connection('mysql')->table('t_category_resource')
                ->select('category_id')
                ->where('app_id','=',$app_id)
                ->where('resource_id','=',$resource_id)
                ->where('resource_type','=',0)
                ->whereIn('category_id',$category_info)
                ->get();
//            dd($relation);
            // 如果不存在该资源的分类数据，则全部插入，默认不显示
            if ( count($relation) == 0 ) {
                foreach ($category_info as $value){
                    $insert = DB::connection('mysql')->table('t_category_resource')->insert(
                        ['app_id'=>$app_id,'category_id'=>$value,'resource_id'=>$resource_id,'resource_type'=>0,'state'=>0,'created_at'=>date('Y-m-d H:i:s',time())]
                    );
                }
            }


                    // 首先 重置所有分类（四个）的状态为0
                $now = Utils::getTime();
                $result_app_categorys =  DB::connection('mysql')->table('t_category_resource')
                    ->where('app_id','=',$this->app_id)
                    ->where('resource_id','=',$resource_id)
                    ->whereIn('category_id',$category_info)
                    ->where('resource_type','=',0)
                    ->update(['state'=>0,'updated_at'=>$now]);
                
                if($result_app_categorys){
                }else{
                }
            if (!empty($category_type)) {

                // 更新所有提交的分类数据
                $result_app_category_avalite =  DB::connection('mysql')->table('t_category_resource')
                    ->where('app_id','=',$this->app_id)
                    ->where('resource_id','=',$resource_id)
                    ->whereIn('category_id',$category_type)
                    ->where('resource_type','=',0)
                    ->update(['state'=>1]);

                if($result_app_category_avalite){
                }else{
                }
            }
        }

        // 如果没有首页分类的数据 也插入一条
        $home_page_category = DB::connection('mysql')->table('t_category_resource')
            ->where('app_id','=',$this->app_id)
            ->where('resource_id','=',$resource_id)
            ->where('category_id','=','0')
            ->where('resource_type','=',0)
            ->first();
        if (empty($home_page_category)) {
            // 同时插入一条首页分类数据  默认显示
            $insert = DB::connection('mysql')->table('t_category_resource')->insert(
                ['app_id'=>$this->app_id,'category_id'=>'0','resource_id'=>$resource_id,'resource_type'=>0,'state'=>1,'created_at'=>Utils::getTime()]
            );
        }


        if ($result >= 0 || $result) {
            return response()->json(['code' => 0, 'msg' => '修改成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '修改失败']);
        }
    }

    // 保存分类信息
    public function savePackageCategory(){

    }

    //保存专栏完结状态值
    public function savePackageFinishedState()
    {
        $resource_id = Input::get('id');
        $params = Input::get('params', '');

        $app_id = AppUtils::getAppID();
        //插入当前时间
        $params['updated_at'] = Utils::getTime();
        $result = \DB::table('t_pay_products')
            ->where('id', '=', $resource_id)
            ->where('app_id', '=', $app_id)
            ->update($params);

        if($result >=0 || $result){
            return response()->json(['code' => 0, 'msg' => '修改成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '修改失败']);
        }
    }
    //更新专栏排序权重
    public function savePackageWeight()
    {
        $resource_id = Input::get('id');
        $weightOrder = Input::get('order_weight');
        $app_id = AppUtils::getAppID();

        $resourceInfo = \DB::table('t_pay_products')->where('id', '=', $resource_id)->where('app_id', '=', $app_id)->first();
        //插入当前时间
        $data['updated_at'] = Utils::getTime();
        if($weightOrder == 0){  //加权往前
            $resourcePre = \DB::table('t_pay_products')->where('app_id', '=', $app_id)->where('state', '=', 0)->where('order_weight', '>', $resourceInfo->order_weight)
                ->orderBy('order_weight', 'asc')->first();
            if($resourcePre){
                $data['order_weight'] = $resourceInfo->order_weight;
                $resulto = \DB::table('t_pay_products')->where('id', '=', $resourcePre->id)->where('app_id', '=', $app_id)->update($data);
                if($resulto >=0 || $resulto){
                    $result = \DB::table('t_pay_products')->where('id', '=', $resource_id)->where('app_id', '=', $app_id)
                        ->update(['order_weight' => $resourcePre->order_weight, 'updated_at' => Utils::getTime()]);
                }else{
                    $result = -1;
                }
            }else{
                $result = 0;
            }
        }else{  //减权退后
            //权重为 1 则不做变动
            $resourceNext = \DB::table('t_pay_products')->where('app_id', '=', $app_id)->where('state', '=', 0)->where('order_weight', '<', $resourceInfo->order_weight)
                ->orderBy('order_weight', 'desc')->first();
            if($resourceNext){
                $data['order_weight'] = $resourceInfo->order_weight;
                $resulto = \DB::table('t_pay_products')->where('id', '=', $resourceNext->id)->where('app_id', '=', $app_id)->update($data);
                if($resulto >=0 || $resulto) {
                    $result = \DB::table('t_pay_products')->where('id', '=', $resource_id)->where('app_id', '=', $app_id)
                        ->update(['order_weight' => $resourceNext->order_weight, 'updated_at' => Utils::getTime()]);
                }else{
                    $result =-1;
                }
            }else{
                $result = 0;
            }
        }

        if($result >=0 || $result){
            return response()->json(['code' => 0, 'msg' => '修改成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '修改失败']);
        }
    }

    //设置专栏内容是否再最新列显示
    public function h5newestHide()
    {
        $resource_id = Input::get('id');
        $hide_state = Input::get('hide_state');

        $data['h5_newest_hide'] = $hide_state;
        $app_id = AppUtils::getAppID();
        //插入当前时间
        $data['updated_at'] = Utils::getTime();
        $result = \DB::table('t_pay_products')
            ->where('id', '=', $resource_id)
            ->where('app_id', '=', $app_id)
            ->update($data);

        if($result >=0 || $result){
            return response()->json(['code' => 0, 'msg' => '修改成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '修改失败']);
        }
    }

    //查询所有的专栏
    public function getAllPackages()
    {
        //查询所有的包
        $package_list = \DB::table('t_pay_products')
            ->where('app_id', '=', AppUtils::getAppID())
            ->orderby('created_at', 'desc')
            ->get();
        return $package_list;
    }

    /**
     *图片处理
     * @param $image_url
     * @param $table_name
     * @param $image_id
     */
    public function imageDeal($image_url, $table_name, $image_id)
    {
        $host_url = env('HOST_URL');
        $app_id = AppUtils::getAppID();

        Utils::asyncThread($host_url . '/downloadImage?image_id=' . $image_id . '&app_id='
            . $app_id . '&table_name=' . $table_name . '&file_url=' . $image_url);

    }
    /**
     *图片处理
     * @param $image_url
     * @param $table_name
     * @param $image_id
     * @param $image_width 压缩尺寸 宽度
     * @param $image_height 压缩尺寸 高度
     * @param $image_quality 压缩参数 质量值
     * @param $compressed 缩略图存储字段
     */
    public function imageDealo($image_url, $table_name, $image_id, $image_width, $image_height, $image_quality, $compressed)
    {
        $host_url = env('HOST_URL');
        $app_id = AppUtils::getAppID();

        Utils::asyncThread($host_url . '/downloadImaged?image_id=' . $image_id . '&app_id='
            . $app_id . '&table_name=' . $table_name . '&file_url=' . $image_url
            . '&image_width=' . $image_width . '&image_height=' . $image_height . '&image_quality=' . $image_quality
            . '&compressed=' . $compressed);

    }

    //分隔文本编辑器的内容
    public function sliceUE($html)
    {
        $content = [];
        $out = explode('<', $html);
        for ($i = 0; $i < count($out); $i++) {
            $in = explode('>', $out[$i]);
            for ($j = 0; $j < count($in); $j++) {
                $length = count($content);
                if (strstr($in[$j], 'img')) {
                    $content[$length]["type"] = 1;
                    try{
                        if(!isset(explode('src="', $in[$j])[1])){
                            throw new Exception("复制的内容有问题，请尝试分开复制，或记录复制内容并联系技术小哥");
                        }else{
                            $content[$length]["value"] = explode('"', explode('src="', $in[$j])[1])[0];
                        }
                    }catch (Exception $e){
                        //var_dump($e->getMessage());
                        return false;
                    }

                } else {
//                    $text=str_replace(array("\r", "\n", "\r\n"),'',$in[$j]);
//                    $text = $in[$j];
//                    if(!empty($text))
//                    {
//                        $content[$length]["type"]=0;
//                        $content[$length]["value"]=$text;
//                    }
                    $content[$length]["type"] = 0;
                    $content[$length]["value"] = $in[$j];
                }
            }
        }
        return json_encode($content, JSON_UNESCAPED_UNICODE);
    }

    public function CreateRequest($HttpUrl, $HttpMethod, $COMMON_PARAMS, $secretKey, $PRIVATE_PARAMS, $isHttps)
    {
        $FullHttpUrl = $HttpUrl . "/v2/index.php";

        /***************对请求参数 按参数名 做字典序升序排列，注意此排序区分大小写*************/
        $ReqParaArray = array_merge($COMMON_PARAMS, $PRIVATE_PARAMS);
        ksort($ReqParaArray);

        /**********************************生成签名原文**********************************
         * 将 请求方法, URI地址,及排序好的请求参数  按照下面格式  拼接在一起, 生成签名原文，此请求中的原文为
         * GETcvm.api.qcloud.com/v2/index.php?Action=DescribeInstances&Nonce=345122&Region=gz
         * &SecretId=AKIDz8krbsJ5yKBZQ    ·1pn74WFkmLPx3gnPhESA&Timestamp=1408704141
         * &instanceIds.0=qcvm12345&instanceIds.1=qcvm56789
         * ****************************************************************************/
        $SigTxt = $HttpMethod . $FullHttpUrl . "?";

        $isFirst = true;
        foreach ($ReqParaArray as $key => $value) {
            if (!$isFirst) {
                $SigTxt = $SigTxt . "&";
            }
            $isFirst = false;

            /*拼接签名原文时，如果参数名称中携带_，需要替换成.*/
            if (strpos($key, '_')) {
                $key = str_replace('_', '.', $key);
            }

            $SigTxt = $SigTxt . $key . "=" . $value;
        }

        /*********************根据签名原文字符串 $SigTxt，生成签名 Signature******************/
        $Signature = base64_encode(hash_hmac('sha1', $SigTxt, $secretKey, true));


        /***************拼接请求串,对于请求参数及签名，需要进行urlencode编码********************/
        $Req = "Signature=" . urlencode($Signature);
        foreach ($ReqParaArray as $key => $value) {
            $Req = $Req . "&" . $key . "=" . urlencode($value);
        }

        /*********************************发送请求********************************/
        if ($HttpMethod === 'GET') {
            if ($isHttps === true) {
                $Req = "https://" . $FullHttpUrl . "?" . $Req;
            } else {
                $Req = "http://" . $FullHttpUrl . "?" . $Req;
            }

            $Rsp = file_get_contents($Req);

        }
//        var_export(json_decode($Rsp,true)) ;
        return json_decode($Rsp, true);
    }

    //拼接专栏连接
    private function getPackageUrl($package_id){
        $app_id = AppUtils::getAppID();
        $appInfo = AppUtils::getAppConfInfo($app_id);
        if($appInfo){
            $skip_target = '';
            if($appInfo->use_collection == 0 && !empty($appInfo->wx_app_id))
            {
                $skip_target = AppUtils::getUrlHeader($app_id).$appInfo->wx_app_id.'.'.env('DOMAIN_NAME');
            }elseif($appInfo->use_collection == 1){
                $skip_target = AppUtils::getUrlHeader($app_id).env('DOMAIN_DUAN_NAME');
            }

            $package_url = $skip_target.Utils::contentUrl('',3 , '' , '' , $package_id,$app_id);
            return $package_url;
        }else{
            return '';
        }
    }

}








