var cos=new InitCosCloud;var params={};var file=null,imgUrl=null;$(document).ready(function(){picHandle();$("#save").click(function(){params["wx_share_title"]=$.trim($("#wx_share_title").val());if(params["wx_share_title"].length==0){baseUtils.show.redTip("亲,请输入分享标题哦");return false}params["wx_share_content"]=$.trim($("#wx_share_content").val());if(params["wx_share_content"].length==0){baseUtils.show.redTip("亲,请输入分享描述哦");return false}if($("#reBackImg").attr("src")==undefined){baseUtils.show.redTip("亲,请设置分享配图哦");return false}showLoading();uploadShareImage()})});function picHandle(){$("#uploadImage").change(function(){var e=this.files[0];if(e){file=e;imgUrl=getObjectURL(e);$("#reBackImg").prop("src",imgUrl)}})}function getObjectURL(e){var i=null;if(window.createObjectURL!=undefined){i=window.createObjectURL(e)}else if(window.URL!=undefined){i=window.URL.createObjectURL(e)}else if(window.webkitURL!=undefined){i=window.webkitURL.createObjectURL(e)}return i}function removeObjectURL(e){if(window.revokeObjectURL!=undefined){window.revokeObjectURL(e)}else if(window.URL!=undefined){window.URL.revokeObjectURL(e)}else if(window.webkitURL!=undefined){window.webkitURL.revokeObjectURL(e)}}function getSuffix(e){var i=e.split(".");return i[i.length-1]}function uploadShareImage(){if(imgUrl){removeObjectURL(imgUrl);imgUrl=null;browserMD5File(file,function(e,i){var n=get_cos_image_path()+i+"."+getSuffix(file["name"]);cos.uploadFileWithoutPro(function(e){params["wx_share_image"]=e.data.access_url;updateShareInfo()},function(e){baseUtils.show.redTip("上传失败!")},n,file,0)})}else{updateShareInfo()}}function updateShareInfo(){$.post("/updateshareinfo",{params:params},function(e){hideLoading();if(e.code==0){baseUtils.show.blueTip(e.msg,function(){window.location.reload()})}else{baseUtils.show.redTip(e.msg)}})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
