<?php

namespace App\Http\Middleware;

use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\GlobalString;
use App\Http\Controllers\Tools\Utils;
use Closure;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

/**
 * 音频压缩中间件
 * Class ImageDealMiddleware
 * @package App\Http\Middleware
 */
class AudioDealMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        return $next($request);
    }

    /**
     * request->audio_list 音频列表
     * @param $request
     * @param $response
     */
    public function terminate($request, $response){
        $audio_list = $request->audio_list;
        if (!empty($audio_list) && is_array($audio_list) && count($audio_list) > 0) {
            foreach ($audio_list as $item) {
                $audioObj = $item;

                if (!empty($audioObj) && is_object($audioObj)) {
                    $table_name = $audioObj->table_name;
                    $app_id = $audioObj->app_id;
                    $id = $audioObj->id;
                    $audio_url = $audioObj->audio_url;
                    $audio_length = $audioObj->audio_length;
                    Utils::logFrom($table_name." ".$app_id." ".$id, "AudioDealMiddleware.log");

                    //下载源音频
                    $src_audio = Utils::downloadFileFromNet($audio_url);

                    //压缩MP3
                    $mp3_audio = Utils::audioCompressing($src_audio);
                    $audio_compress_size = filesize($mp3_audio) / 1024 / 1024;
                    //上传Mp3
                    $audio_compress_url = Utils::uploadMp3Audio($mp3_audio, $app_id);
                    if (!empty($audio_compress_url)) {
                        //更新数据库
                        $updateResult1 = DB::table($table_name)
                            ->where('app_id', '=', $app_id)
                            ->where('id', '=', $id)
                            ->update([
                                'audio_compress_url' => $audio_compress_url,
                                'audio_compress_size' => $audio_compress_size
                            ]);

                        Utils::logFrom("mp3 ".$table_name." ".$app_id." ".$id." ".$updateResult1, "AudioDealMiddleware.log");
                    }

                    $prefix = explode('.',basename($src_audio))[0]; //文件前缀  md5

                    //压缩上传m3u8文件
                    $m3u8_url = $this->uploadM3u8Audio($src_audio, $app_id, $prefix, $audio_length);
                    if (!empty($m3u8_url)) {
                        //更新数据库
                        $updateResult2 = DB::table($table_name)
                            ->where('app_id', '=', $app_id)
                            ->where('id', '=', $id)
                            ->update(['m3u8_url' => $m3u8_url]);

                        Utils::logFrom("m3u8 ".$table_name." ".$app_id." ".$id." ".$updateResult2, "AudioDealMiddleware.log");
                    }

                    //删除本地文件
                    @unlink($src_audio);
                    @unlink($audio_compress_url);

                    Utils::logFrom($table_name." ".$app_id." ".$id." END", "AudioDealMiddleware.log");
                }
            }
        }
    }

    /**
     * 上传M3u8文件
     * 1.压缩M3u8生成 ts文件列表 和 M3u8文件清单
     * 2.上传ts文件列表
     * 3.替换M3u8清单文件中ts
     * 4.上传M3u8清单文件
     * @param $src_audio
     * @param $app_id
     * @param $prefix
     * @param $audio_length
     * @return string
     */
    function uploadM3u8Audio($src_audio, $app_id, $prefix, $audio_length)
    {
        //压缩M3u8生成 ts文件列表 和 M3u8文件清单
        $m3u8_path = Utils::audioM3u8Compressing($src_audio, $prefix);
        //根据M3u8文件获取ts所属目录
        $ts_path = substr($m3u8_path, 0, strpos($m3u8_path, '/' . basename($m3u8_path)));
        //遍历上传ts文件
        $ts_list = glob($ts_path . '/*.ts');
        foreach ($ts_list as $item) {
            Utils::uploadMp3Audio($item, $app_id, $prefix);
        }
        //替换m3u8文件中ts链接
        $dst_path = '/' . $app_id . env('AUDIO_COMPRESS_PATH') . "" . $prefix;
        $fileRoot = 'http://' . GlobalString::V4_COS_BUCKET_NAME . '-' . GlobalString::V4_COS_APP_ID . '.file.myqcloud.com';
        $urlHeader = $fileRoot . $dst_path;
        $listOld = file_get_contents($m3u8_path);
        $listNew = "";
        $arrs = explode("\n", $listOld);        //转为数组批量替换,最后一个为空不要
        for ($i = 0; $i < count($arrs) - 1; $i++) {
            if (!strstr($arrs[$i], "#")) {
                $arrs[$i] = $urlHeader . "/" . $arrs[$i];
            }
            $listNew = $listNew . $arrs[$i] . "\n";
        }
        $fp = fopen($m3u8_path, "w");
        fwrite($fp, $listNew);
        fclose($fp);

        //验证M3u8长度是否正确
        $audioLength = 0;
        foreach ($arrs as $arr) {
            if (strstr($arr, "#EXTINF:")) {
                $temp = str_replace(',', '', str_replace('#EXTINF:', '', $arr));
                $audioLength += (float)$temp;
            }
        }
        if (empty($audio_length) || empty($audioLength)
            || $audioLength - $audio_length > 10 || $audioLength - $audio_length < -10) {
            return '';
        }

        //上传M3u8清单文件
        $result = Utils::uploadMp3Audio($m3u8_path, $app_id, $prefix);

        //删除m3u8文件夹
        Utils::delDirAndFile($ts_path, true);

        return $result;
    }
}
