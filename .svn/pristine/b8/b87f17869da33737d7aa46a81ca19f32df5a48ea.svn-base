<?php
/**
 * Created by PhpStorm.
 * User: Neo
 * Date: 2017/6/15
 * Time: 下午3:37
 */

namespace App\Http\Controllers;

use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\StringConstants;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Input;
use App\Http\Controllers\Tools\Utils;

class ShopDiyControlle extends Controller{


    public function shopIndexDiy(){
        return View('admin.shopDiy.diyIndex');
    }

    //获取首页自定义配置
    public function loadDiySetting(){
        $appId = AppUtils::getAppID();

        $diyStatus = false;

        //配置表开关
        $has_shop_diy = false;
        $resource_category = false;
        $has_que = false;

        $index_sort = [];
        $index_data = [];

        $diy_index_sort = [];
        $diyData = [];

        //读取配置
        $config = DB::select("select * from db_ex_config.t_app_module where app_id = ?",[$appId]);
        if($config && $config!=null && count($config)>0){
            if($config[0]->has_shop_diy == 1){
                $has_shop_diy = true;
            }
            if($config[0]->resource_category == 1){
                $resource_category = true;
            }
            if($config[0]->has_que == 1){
                $has_que = true;
            }
        }


        if($has_shop_diy){
            $type = 1;
            $diyInfo = DB::select("select * from t_shop_index_diy where app_id = ? and type = ? limit 1",[$appId,$type]);
            if($diyInfo && $diyInfo!= null && count($diyInfo)>0){
                $diyInfo = $diyInfo[0];
                //解析自定义配置
                $diy_index_sort = json_decode($diyInfo->index_sort,true);
                $diy_index_data = json_decode($diyInfo->index_data,true);
                if(is_array($diy_index_sort) && is_array($diy_index_data) && count($diy_index_sort) === count($diy_index_data)){
                    $diyStatus = true;
                    $diyData = $diy_index_data;
                }
            }
        }



        if($diyStatus){
            //使用自定义配置
            $index_sort = $diy_index_sort;
        }
        else{
            //使用默认配置
            $index_sort[] = StringConstants::IndexBannerPart;
            if ($resource_category) {
                $index_sort[] = StringConstants::IndexCategoryPart;
            }
            $index_sort[] = StringConstants::IndexCommunityPart;
            $index_sort[] = StringConstants::IndexMemberPart;
            if ($has_que) {
                $index_sort[] = StringConstants::IndexQuestionPart;
            }
            $index_sort[] = StringConstants::IndexAlivePart;
            $index_sort[] = StringConstants::IndexRecommendPart;
        }

        if(count($diyData) != count($index_sort)){
            $diyData = [];
            foreach ($index_sort as $item){
                $diyData[] = false;
            }
        }

        foreach ($index_sort as $sortKey => $sortVal) {

            if($sortVal == StringConstants::IndexBannerPart){
                /**
                 * banner图模块
                 */
                $index_data[] = $this->getIndexBannerPart($diyStatus,$diyData[$sortKey]);
            }
            elseif ($sortVal == StringConstants::IndexCategoryPart){
                /**
                 * 分类导航模块
                 */
                $index_data[] = $this->getIndexCategoryPart($diyStatus,$diyData[$sortKey],$resource_category);
            }
            elseif ($sortVal == StringConstants::IndexCommunityPart){
                /**
                 * 社群模块
                 */
                $index_data[] = $this->getIndexCommunityPart($diyStatus,$diyData[$sortKey]);
            }
            elseif ($sortVal == StringConstants::IndexMemberPart){
                /**
                 * 会员及专栏模块
                 */
                $index_data[] = $this->getIndexProductPart($diyStatus,$diyData[$sortKey]);
            }
            elseif ($sortVal == StringConstants::IndexQuestionPart){
                /**
                 * 问答模块
                 */
                $index_data[] = $this->getIndexQuestionPart($diyStatus,$diyData[$sortKey],$has_que);
            }
            elseif ($sortVal == StringConstants::IndexAlivePart){
                /**
                 * 直播模块
                 */
                $index_data[] = $this->getIndexAlivePart($diyStatus,$diyData[$sortKey]);
            }
            elseif ($sortVal == StringConstants::IndexRecommendPart){
                /**
                 * 最新模块
                 */
                $index_data[] = $this->getIndexRecommendPart($diyStatus,$diyData[$sortKey]);
            }
        }


        //返回false则把该模块剔除掉，不返回给前端
        foreach ($index_data as $data_key => $data_val){
            if(!$data_val){
                array_splice($index_sort,$data_key,1);
                array_splice($index_data,$data_key,1);
            }
        }


        $moduleConfig = [
            'resource_category'=>$resource_category,
            'has_que'=>$has_que,
        ];
        $add_module_part = $this->addModulePart($index_sort,$moduleConfig);



        $result = [
            'add_module_part'=>$add_module_part,
            'index_sort'=>$index_sort,
            'index_data'=>$index_data
        ];


        return Utils::jsonResponse($result);
    }

    //保存配置中产生的新内容
    public function saveNewPart(Request $request){

        $appId = AppUtils::getAppID();

        $banner_part_input = $request->input('banner_part');

        $banner_part = [];

        if($banner_part_input && count($banner_part_input)>0){
            DB::beginTransaction();

            $banner_id_arr = [];

            foreach ($banner_part_input as $banner_val){

                $banner_id = Utils::getUniId("b_");
                $current_time = Utils::getTime();

                $banner_parm = [
                    'app_id'=>$appId,
                    'id'=>$banner_id,
                    'title'=>$banner_val['title'],
                    'image_url'=>$banner_val['image_url'],
                    'img_url_compressed'=>$banner_val['img_url_compressed'],
                    'skip_type'=>$banner_val['skip_type'],
                    'skip_target'=>$banner_val['skip_target'],
                    'skip_title'=>$banner_val['skip_title'],
                    'created_at'=>$current_time
                ];

                DB::table('t_banner')->insert($banner_parm);

                $banner_id_arr[] = $banner_id;
            }
            DB::commit();

            foreach ($banner_id_arr as $item){
                $banner_part[] = [
                    'id'=>$item
                ];
            }
        }

        $result = [
            'banner_part'=>$banner_part
        ];

        return Utils::jsonResponse($result);
    }

    //保存首页自定义配置
    public function saveDiySetting(Request $request){

        $index_sort = $request->input('index_sort');
        $index_data = $request->input('index_data');
        $appId = AppUtils::getAppID();
        $errorCode = 0;

//        try{
            $index_sort = json_decode($index_sort,true);
            $index_data = json_decode($index_data,true);

            if($index_sort && $index_data && count($index_sort) == count($index_data)){

                //检查参数是否符合规则
                $checkParm = $this->checkSaveParm($index_sort,$index_data);
                if($checkParm){

                    $insertSort = $index_sort;
                    $insertData = [];
                    //验证通过，拼接成所需格式存入
                    foreach ($index_sort as $index_sort_key => $index_sort_val){
                        if($index_sort_val == StringConstants::IndexBannerPart){
                            $list = [];
                            foreach ($index_data[$index_sort_key]['list'] as $index_data_item){
                                $list[]['id'] = $index_data_item['id'];
                            }
                            $insertData[] = [
                                'list'=>$list
                            ];
                        }
                        elseif (
                            ($index_sort_val == StringConstants::IndexCommunityPart) ||
                            ($index_sort_val == StringConstants::IndexMemberPart) ||
                            ($index_sort_val == StringConstants::IndexAlivePart)
                        ){

                            $part_title = $index_data[$index_sort_key]['part_title'];
                            $status = $index_data[$index_sort_key]['status'];
                            $list = [];

                            if($status == 1){
                                foreach ($index_data[$index_sort_key]['list'] as $index_data_item){
                                    $list[]['id'] = $index_data_item['id'];
                                }
                            }
                            $insertData[] = [
                                'part_title'=>$part_title,
                                'status'=>$status,
                                'list'=>$list
                            ];
                        }
                        elseif (
                            ($index_sort_val == StringConstants::IndexCategoryPart) ||
                            ($index_sort_val == StringConstants::IndexQuestionPart) ||
                            ($index_sort_val == StringConstants::IndexRecommendPart)
                        ){
                            $insertData[] = new \stdClass();
                        }
                    }


                    $insertSort = json_encode($insertSort);
                    $insertData = json_encode($insertData);
                    $nowTime = Utils::getTime();

                    DB::statement("INSERT INTO t_shop_index_diy 
                    (app_id, index_sort, index_data, created_at,updated_at) 
                    VALUES (?, ?, ?, ?, ?)
                    ON DUPLICATE KEY UPDATE index_sort = ?,index_data = ?,updated_at = ?",
                    [$appId, $insertSort, $insertData, $nowTime, $nowTime, $insertSort, $insertData, $nowTime]);



                    return Utils::jsonResponse(null);
                }
            }
            else{
                $errorCode = 1;
            }
//        }
//        catch(\Exception $e){
//            $errorCode = 2;
//        }

        Utils::logFrom("首页自定义saveDiySetting报错", "homeDiyError.log");
        Utils::logFrom("errorCode:".$errorCode, "homeDiyError.log");
        Utils::logFrom($appId, "homeDiyError.log");
        Utils::logFrom(print_r($index_sort,1), "homeDiyError.log");
        Utils::logFrom(print_r($index_data,1), "homeDiyError.log");


        return Utils::jsonResponse(null, StringConstants::Code_Failed,"保存失败");

    }

    //检查保存配置的格式
    public function checkSaveParm($index_sort,$index_data){

        if(count($index_sort) == count($index_data)){
            foreach ($index_sort as $item){
                //banner图要都有id
                if($item == StringConstants::IndexBannerPart){
                    if(array_key_exists("list",$index_data[$item]) &&
                        $index_data[$item]['list'] && count($index_data[$item]['list'])>0
                    ){
                        foreach ($index_data[$item]['list'] as $listItem){
                            if(array_key_exists("id",$listItem) && $listItem['id']){

                            }
                            else{
                                Utils::log("checkSaveParm1");
                                return false;
                            }
                        }
                    }
                    else{
                        Utils::log("checkSaveParm2");
                        return false;
                    }
                }
                elseif (
                    ($item == StringConstants::IndexCommunityPart) ||
                    ($item == StringConstants::IndexMemberPart) ||
                    ($item == StringConstants::IndexAlivePart)
                ){
                    if(array_key_exists("part_title",$index_data[$item]) &&
                       array_key_exists("status",$index_data[$item]) &&
                       array_key_exists("list",$index_data[$item]) &&
                        $index_data[$item]['list']
                    ){
                        if($index_data[$item]['status'] == 1){
                            foreach ($index_data[$item]['list'] as $listItem){
                                if(array_key_exists("id",$listItem) && $listItem['id']){}
                                else{
                                    Utils::log("checkSaveParm3");
                                    return false;
                                }
                            }
                        }
                    }
                }
                //分类导航，问答，最新暂不能编辑，不进行验证
                elseif (
                    ($item == StringConstants::IndexCategoryPart) ||
                    ($item == StringConstants::IndexQuestionPart) ||
                    ($item == StringConstants::IndexRecommendPart)
                ){}
                else{
                    Utils::log("checkSaveParm4");
                    return false;
                }
            }
        }

        return true;
    }


    //banner模块
    public function getIndexBannerPart($diyStatus,$diyData){
        $appId = AppUtils::getAppID();
        $nowTime = Utils::getTime();

        $list = [];
        $bannerInfo = [];

        if($diyStatus){
            $diyIdArr = [];
            foreach ($diyData["list"] as $item){
                if(array_key_exists("id",$item) && $item['id']){
                    $diyIdArr[] =  $item['id'];
                }
            }
            $diyIdCondition = implode("','", $diyIdArr);
            $diyIdCondition = " and id in ('$diyIdCondition') ";

            $bannerInfo = DB::select("select
            id,title,image_url,img_url_compressed,skip_target,skip_type from t_banner 
              where state_offline=0 and app_id=? $diyIdCondition order by weight desc,created_at desc"
                , [$appId]);
        }
        else{
            $bannerInfo = DB::select("select 
              id,title,image_url,img_url_compressed,skip_target,skip_type from t_banner 
              where state_offline=0 and app_id=? and ?>=start_at 
              and ((stop_at is not null and ?<=stop_at) or (stop_at is null)) order by weight desc,created_at desc"
                , [$appId, $nowTime, $nowTime]);
        }


        if(count($bannerInfo)>0){
            $list = $bannerInfo;
        }

        if(count($list)== 0){
            return false;
        }

        $result = [
            'list'=>$list
        ];

        return $result;
    }

    //分类导航模块
    public function getIndexCategoryPart($diyStatus,$diyData,$switch){



        if($switch){
            //暂不能配置，返回空对象
            $result =  new \stdClass();
        }
        else{
            $result = false;
        }
//        Utils::log(12321321);
//        Utils::log($result);
//        Utils::log($switch);

        return $result;
    }

    //社群模块
    public function getIndexCommunityPart($diyStatus,$diyData){
        $appId = AppUtils::getAppID();

        $part_title = "小社群";
        $status = 0;
        $list = [];

        $communityInfo = [];

        if($diyStatus){
            $part_title = $diyData['part_title'];
            $status = $diyData['status'];

            if($status == 1){
                $diyIdArr = [];
                foreach ($diyData["list"] as $item){
                    if(array_key_exists("id",$item) && $item['id']){
                        $diyIdArr[] =  $item['id'];
                    }
                }
                $diyIdCondition = implode("','", $diyIdArr);
                $diyIdCondition = " and id in ('$diyIdCondition') ";

                $communityInfo = DB::select("select id,title,img_url_compressed from t_community
                where app_id = ? and community_state=0 $diyIdCondition order by created_at desc", [$appId]);

                if(count($communityInfo) == 0){
                    return false;
                }
            }
        }

        $list = $communityInfo;

        $result = [
            'part_title'=>$part_title,
            'status'=>$status,
            'list'=>$list,
        ];

        return $result;
    }

    //会员/专栏模块
    public function getIndexProductPart($diyStatus,$diyData){

        $appId = AppUtils::getAppID();
        $nowTime = Utils::getTime();

        $part_title = "频道";
        $status = 0;
        $list = [];

        $info = [];

        if($diyStatus){
            $part_title = $diyData['part_title'];
            $status = $diyData['status'];

            if($status == 1){
                $diyIdArr = [];
                foreach ($diyData["list"] as $item){
                    if(array_key_exists("id",$item) && $item['id']){
                        $diyIdArr[] =  $item['id'];
                    }
                }
                $diyIdCondition = implode("','", $diyIdArr);
                $diyIdCondition = " and id in ('$diyIdCondition') ";

                $info = DB::select("select id,name as title,img_url_compressed
                                from t_pay_products 
                                where state=0 and app_id=? $diyIdCondition",
                    [$appId]);


                if(count($info) == 0){
                    return false;
                }
            }

        }

        $list = $info;

        $result = [
            'part_title'=>$part_title,
            'status'=>$status,
            'list'=>$list,
        ];

        return $result;
    }

    //问答模块
    public function getIndexQuestionPart($diyStatus,$diyData,$switch){
        if($switch){
            //暂不能配置，返回空对象
            $result =  new \stdClass();
        }
        else{
            $result = false;
        }
        return $result;
    }

    //直播模块
    public function getIndexAlivePart($diyStatus,$diyData){
        $appId = AppUtils::getAppID();

        $part_title = "直播";
        $status = 0;
        $list = [];

        $info = [];

        if($diyStatus){
            $part_title = $diyData['part_title'];
            $status = $diyData['status'];

            if($status == 1){
                $diyIdArr = [];
                foreach ($diyData["list"] as $item){
                    if(array_key_exists("id",$item) && $item['id']){
                        $diyIdArr[] =  $item['id'];
                    }
                }
                $diyIdCondition = implode("','", $diyIdArr);
                $diyIdCondition = " and id in ('$diyIdCondition') ";

                $info = DB::select("
                  select 4 as id,title,img_url_compressed
                  from t_alive
                  where state=0 and app_id=? $diyIdCondition", [$appId]);

                if(count($info) == 0){
                    return false;
                }
            }

        }

        $list = $info;

        $result = [
            'part_title'=>$part_title,
            'status'=>$status,
            'list'=>$list,
        ];

        return $result;
    }

    //最新模块
    public function getIndexRecommendPart($diyStatus,$diyData){
        //暂不能配置，返回空对象
        $result =  new \stdClass();;
        return $result;
    }

    //新增模块的信息
    public function addModulePart($index_sort,$moduleConfig){
        $result = [];
        /**
         * 获取当前业务版本
         * 1-基础版;2-成长版;3-专业版
         */
        $version_type = AppUtils::get_version_type();

        $version_name = "基础版";
        if($version_type == 2){
            $version_name = "成长版";
        }
        elseif ($version_type == 3){
            $version_name = "专业版";
        }

        //1-可用模块
        $userful_part = [];
        //2-已不可再添加
        $used_part = [];
        //3-未配置
        $unsetting_part = [];
        //4-版本没有
        $version_miss_part = [];


        $add_part = [];
        $add_part[] = StringConstants::IndexBannerPart;
        if($version_type == 2 || $version_type == 3){
            $add_part[] = StringConstants::IndexCategoryPart;//成长版及以上
        }
        else{
            $version_miss_part[] = StringConstants::IndexCategoryPart;
        }
        $add_part[] = StringConstants::IndexCommunityPart;
        $add_part[] = StringConstants::IndexMemberPart;
        if($version_type == 2 || $version_type == 3){
            $add_part[] = StringConstants::IndexQuestionPart;//成长版及以上
        }
        else{
            $version_miss_part[] = StringConstants::IndexQuestionPart;
        }
        $add_part[] = StringConstants::IndexAlivePart;
        $add_part[] = StringConstants::IndexRecommendPart;

        //未配置的模块
        $unsettiong = [];
        if(!$moduleConfig['resource_category']){
            array_push($unsettiong,StringConstants::IndexCategoryPart);
        }
        if(!$moduleConfig['has_que']){
            array_push($unsettiong,StringConstants::IndexQuestionPart);
        }


        foreach ($add_part as $item){
            //2-已不可再添加,暂时都只能添加一个
            if(in_array($item,$index_sort)){
                array_push($used_part,$item);
            }
            //3-未配置
            elseif (in_array($item,$unsettiong)){
                array_push($unsetting_part,$item);
            }
            //1-可用模块
            else{
                //剩下的就是可以配置的
                array_push($userful_part,$item);
            }
        }


        foreach ($userful_part as $item){
            $result[] = [
                'module'=>$item,
                'status'=>1,
                'msg'=>''
            ];
        }

        foreach ($used_part as $item){
            $result[] = [
                'module'=>$item,
                'status'=>2,
                'msg'=>'该模块已添加，不能继续添加'
            ];
        }

        foreach ($unsetting_part as $item){
            $result[] = [
                'module'=>$item,
                'status'=>3,
                'msg'=>'该模块尚未配置，请配置后再添加'
            ];
        }

        foreach ($version_miss_part as $item){
            $msg = $version_name."不能使用该模块";

            $result[] = [
                'module'=>$item,
                'status'=>4,
                'msg'=>$msg
            ];
        }


        return $result;
    }



}