<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\MessagePush;
use Hamcrest\Util;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Input;
use App\Http\Controllers\Tools\Utils;
use League\Flysystem\Exception;

class ArticleController extends Controller
{
    private $request;
    private $app_id;

    public function __construct(Request $request)
    {
        $this->request = $request;
        $this->app_id = AppUtils::getAppID();
    }

    //拉取图文列表
    public function getArticleList()
    {
        $resource_attr = Input::get('resource_attr', 'title');
        $search_content = Input::get('search_content', '');
        $app_id = AppUtils::getAppID();
        if (empty($search_content)) {
            $articles = \DB::table('t_image_text')
                ->where('app_id', '=', $app_id)
                ->where('display_state', '!=', 2)
                ->orderby('created_at', 'desc')
                ->paginate(10);
        } else {
            $articles = \DB::table('t_image_text')
                ->where($resource_attr, 'like', '%' . $search_content . '%')
                ->where('app_id', '=', $app_id)
                ->where('display_state', '!=', 2)
                ->orderby('created_at', 'desc')
                ->paginate(10);
        }
        if($articles){
            if(session('wxapp_join_statu')==1 || session('is_collection'))
            {
                if(session('is_collection') == 0){
                    $pageUrl = AppUtils::getUrlHeader($app_id).session('wx_app_id').'.'.env('DOMAIN_NAME');
                }else{
                    $pageUrl = AppUtils::getUrlHeader($app_id).env('DOMAIN_DUAN_NAME');
                }

                foreach ($articles as $key => $article) {
                    $article->pageurl = $pageUrl.Utils::getContentUrl(2, 1, $article->id, $article->product_id);
                }
            }
            foreach ($articles as $key2 => $value) {

                //  查询每一条音频在关系表中的状态
                $relation = \DB::table('t_pro_res_relation')
                    ->where('app_id', '=', $app_id)
                    ->where('resource_id', '=', $value->id)
                    ->where('resource_type', '=', 1)
                    ->where('relation_state', '！=', 1)
                    ->first();
                if (empty($relation) || empty($relation->product_id) || empty($relation->product_name)) {
                    //  查不到数据，单卖
                    $articles[$key2]->product_id = '';
                    $articles[$key2]->product_name = '';
                } else {
                    //  查到数据，专栏内单卖
                    $articles[$key2]->product_id = $relation->product_id;
                    $articles[$key2]->product_name = $relation->product_name;
                }
            }
        }

        //查询总数
        $total = \DB::select("select count(1) as count from t_image_text where app_id = '$app_id'")[0];
        return view('admin.articleList', compact('articles', 'resource_attr', 'search_content', 'total'));
    }

    //查询所有的专栏
    public function getAllPackages()
    {
        //查询所有的包
        $package_list = \DB::table('t_pay_products')
            ->where('app_id', '=', AppUtils::getAppID())->where('state','<','2')
            ->orderby('created_at', 'desc')
            ->get();
        return $package_list;
    }


    //创建图文页面
    public function createArticle()
    {
        //获取所有的产品包
        $package_list = $this->getAllPackages();
        $isHadSetTemp = MessagePush::isHadSetTemp($this->app_id);
        return view('admin.uploadArticle', compact('package_list', 'isHadSetTemp'));
    }

    //编辑图文页面
    public function editArticle()
    {
        $article = \DB::table('t_image_text')
            ->where('id', '=', Input::get("id"))
            ->where('app_id', '=', AppUtils::getAppID())
            ->first();

        $single_sale = 0;

        if($article->payment_type != 1)//若为单卖,则判断其是否为专栏外单卖
        {

            //TODO:在关系表t_pro_res_realtion中查找该resource_id的记录
            $is_exist = \DB::table('t_pro_res_relation')
                ->where('resource_id','=',Input::get("id"))
                ->where('app_id', '=', AppUtils::getAppID())
                ->where('resource_type', '=', 1)
                ->where('relation_state', '=', 0)
                ->first();
            if(count($is_exist))
            {
                if($article->payment_type == 2) {
                    $single_sale = 1;
                }

                $article->product_id = $is_exist->product_id;
                $article->product_name = $is_exist->product_name;
            }

        }

        //获取所有的产品包
        $package_list = $this->getAllPackages();
        $isHadSetTemp = MessagePush::isHadSetTemp($this->app_id);
        return view('admin.editArticle', compact('article', 'package_list','single_sale', 'isHadSetTemp'));
    }


    //新增图文，0文 1图
    public function addArticle()
    {
        $data = Input::get('params', '');
        //$data = Input::all();

        //$data['content'] = $this->sliceUE($data['content']);
        $data['content'] = $data['org_content'];
        $data['created_at'] = Utils::getTime();
        $data['app_id'] = AppUtils::getAppID();
        $data['id'] = Utils::getUniId('i_');


        if(array_key_exists('payment_type',$data)
            && array_key_exists('piece_price',$data)
            && $data['payment_type'] == 2
            && $data['piece_price'] == 0){
            return response()->json(['code' => -521, 'msg' => '上传失败，单价需大于0元!']);
        }


        //若客户使用的是"个人运营模式"即use_collection=1,则限制其piece_price不能超过200元
        $model_result=\DB::connection("mysql_config")->table("t_app_conf")
            ->where("app_id","=",AppUtils::getAppIdByOpenId(AppUtils::getOpenId()))
            ->where("wx_app_type","=",1)->first();
        if ($model_result->use_collection == 1) {
            if(array_key_exists('piece_price', $data)){
                if($data['piece_price'] > 100000){
                    //TODO:返回操作失败,个人运营模式下 定价不能超过1000元
                    return response()->json(['ret' => -521, 'msg' => '上传失败，单价不能超过1000元!']);
                }

            }
        }

        //表数据新增参数
        $relation_at = 0;
        //产品包资源数加1
        if ($data['payment_type'] == 3) {
            $product_id = $data['product_id'];
            $update_result = \DB::update("UPDATE t_pay_products SET resource_count=resource_count+1 WHERE id='$product_id'");
            //资源关系
            $relation['app_id'] = $data['app_id'];
            $relation['product_id'] = $product_id;
            $relation['resource_type'] = '1';
            $relation['product_name'] = $data['product_name'];
            $relation['resource_id'] = $data['id'];
            $relation['created_at'] = Utils::getTime();
            $relation_at = 1;

            // 如果用户开启了消息推送
            if (!empty($params['push_state'])){
                if ($params['push_state'] == 1) $params['push_state'] = 1;
            }

            $is_single_sale = Input::get('is_single_sale', 0);
            //属于该专栏的该音频资源可以单卖
            //在表t_pro_res_relation中插入该关系
            //$result_relation = \DB::table('t_pro_res_relation')->insert($relation);
            if($is_single_sale == 1) $data['payment_type'] = 2;
        }

        self::imageDeal($data['img_url'], 't_image_text', $data['id']);

        $insert = \DB::table("t_image_text")->insert($data);

        if ($insert > 0 || $insert) {
            if($relation_at) $relation_add = \DB::table("t_pro_res_relation")->insert($relation);

            //获取资源中所有图片大小,并更新至image_size_total中
            $item = \DB::table('t_image_text')->where('app_id','=',$data['app_id'])->where('id','=',$data['id'])->first();

            if($item) Utils::updateImageTextTotalSize($item);

            return response()->json(['ret' => 0, "msg" => "新增成功"]);

        } else {
            return response()->json(['ret' => -1, "msg" => "新增失败"]);
        }
    }

    //保存资源编辑 |上下架 删除 等
    public function saveResourceEdit()
    {
        $resource_type  = Input::get('resource_type', 'article');
        $resource_id = Input::get('id', '');
        $params = Input::get('params', '');

        //插入当前时间
        $app_id = AppUtils::getAppID();
        $current_time = Utils::getTime();
        $params['updated_at'] = $current_time;
        $table_name = 't_image_text';

        if( array_key_exists('display_state', $params)  )
        {
            $resourceInfo=\DB::select("select * from ".$table_name." where app_id = ? and id = ?",[$app_id,$resource_id]);
            $editPackage = $resourceInfo[0]->display_state; $params_state = $params['display_state'];
        }
        $result = \DB::table($table_name)
            ->where('id', '=', $resource_id)
            ->where('app_id', '=', $app_id)
            ->update($params);

        ////上下架删除资源等操作 需同步更新专栏期数值
        if(  array_key_exists('display_state', $params)  )
        {
            //$result && $resourceInfo[0]->payment_type == 3
            if( $result) {
                ////下架资源操作时 同步相关专栏期数值
                if ($params_state == 1) {
                    if ($editPackage == 0) {
                        $updatePackage = \DB::update("update t_pay_products set resource_count=resource_count-1
                  where app_id = ? and id = ?", [$app_id, $resourceInfo[0]->product_id]);
                    } else {
                        $updatePackage = 1;
                    }

                    if ($updatePackage) return response()->json(['code' => 0, 'msg' => '下架成功']);
                }
                ////上架架资源操作时 同步相关专栏期数值
                if ($params_state == 0) {
                    $updatePackage = \DB::update("update t_pay_products set resource_count=resource_count+1
                  where app_id = ? and id = ?", [$app_id, $resourceInfo[0]->product_id]);

                    if ($updatePackage) return response()->json(['code' => 0, 'msg' => '上架成功']);
                }
                ////删除资源操作state == 2 需同步更新专栏期数值
                if ($params_state == 2) {
                    if ($editPackage == 0) {
                        $updatePackage = \DB::update("update t_pay_products set resource_count=resource_count-1
                  where app_id = ? and id = ?", [$app_id, $resourceInfo[0]->product_id]);
                    } else {
                        $updatePackage = 1;
                    }

                    //更新资源关系表中记录为删除状态
                    if($resourceInfo[0]->payment_type != 1){
                        //检测在资源表中是否存在记录
                        $is_exist = \DB::select("select * from t_pro_res_relation where app_id = ? and resource_type = 1 and resource_id = ? and relation_state=0",[$app_id,$resource_id]);
                        if(count($is_exist))
                        {
                            $relation_at = \DB::table("t_pro_res_relation")
                                ->where('app_id','=',$app_id)
                                ->where('resource_type','=',1)
                                ->where('resource_id','=',$resource_id)
                                ->update(['relation_state'=>'1']);
                        }
                    }

                    if ($updatePackage) return response()->json(['code' => 0, 'msg' => '删除成功']);

                }
            }
        }

        if ($result >= 0 || $result) {
            return response()->json(['code' => 0, 'msg' => '修改成功']);
        } else {
            return response()->json(['code' => -1, 'msg' => '修改失败']);
        }
    }


    //更新图文
    public function updateArticle()
    {
        $data = Input::all();
        $data['content'] = $this->sliceUE($data['content']);
        $data['app_id'] = AppUtils::getAppID();

        if (isset($data['is_single_sale'])){
            Utils::array_remove($data, 'is_single_sale');
        }


        $resource_type = "article";
        $resource_id = $data['id'];


        if(array_key_exists('payment_type',$data)
            && array_key_exists('piece_price',$data)
            && $data['payment_type'] == 2
            && $data['piece_price'] == 0){
            return response()->json(['code' => -521, 'msg' => '上传失败，单价需大于0元!']);
        }


        $is_single_sale = Input::get('is_single_sale', -1);

        //若客户使用的是"个人运营模式"即use_collection=1,则限制其piece_price不能超过200元
        $model_result=\DB::connection("mysql_config")->table("t_app_conf")
            ->where("app_id","=",AppUtils::getAppIdByOpenId(AppUtils::getOpenId()))
            ->where("wx_app_type","=",1)->first();

        if ($model_result->use_collection == 1) {
            if(array_key_exists('piece_price',$data) && $data['piece_price'] >100000){
                //TODO:返回操作失败,个人运营模式下 定价不能超过1000元
                return response()->json(['ret' => -1, 'msg' => '编辑失败，"个人运营模式"下单价不能超过1000元!']);
            }
        }

        if (!empty($data['img_url']))
        {
            self::imageDeal($data['img_url'], 't_image_text', $data['id']);
            //self::imageDealo($data['img_url'], 't_image_text', $data['id'],160,120,60,'img_url_compressed');
        }
        //当payment_type发生改变时
        $old=\DB::select("select * from t_image_text where app_id = ? and id = ?",[$data['app_id'],$data['id']]);

        /****************消息推送***************/
        if (!empty($old['push_state'])){
            if ($old['push_state']== 2 || $data['push_state'] == 2){
                Utils::array_remove($data,'push_state');
            }
        }

        $oldType=$old[0]->payment_type;
        $newType=$data['payment_type'];
        if($old[0]->display_state == 0) //上架状态下更新产品包计数
        {
            //单个变为产品包
            if($oldType != 3 && $newType == 3)
            {
                $updateCount=\DB::update("update t_pay_products set resource_count=resource_count+1 
            where app_id = ? and id = ?",[$data['app_id'],$data['product_id']]);
            }
            //产品包变为单个
            elseif($oldType == 3 && $newType != 3)
            {
                $updateCount=\DB::update("update t_pay_products set resource_count=resource_count-1 
            where app_id = ? and id = ?",[$data['app_id'],$old[0]->product_id]);
            }
            //产品包之间转换
            elseif($oldType == 3 && $newType == 3)
            {
                //+1
                $updateCount=\DB::update("update t_pay_products set resource_count=resource_count+1 
            where app_id = ? and id = ?",[$data['app_id'],$data['product_id']]);
                //-1
                $updateCount=\DB::update("update t_pay_products set resource_count=resource_count-1 
            where app_id = ? and id = ?",[$data['app_id'],$old[0]->product_id]);
            }
        }

        //资源关系表更新\新增
        $relation_at = 0;$relation_add = 0;
        $resourceType = array(
            'article' => '1',
            'audio' => '2',
            'video' => '3',
            'alive' => '4'
        );
        $app_id = AppUtils::getAppID();
        $current_time = Utils::getTime();
        $data['updated_at'] = $current_time;
        $table_name = 't_image_text';

        if ( array_key_exists('payment_type', $data))
        {
//            echo "line:409";
//            echo "into if(array_key_exists)";

            $old=\DB::select("select * from ".$table_name." where app_id = ? and id = ?",[$app_id,$data['id']]);
            $oldType=$old[0]->payment_type;
            $newType=$data['payment_type'];
//            if($resource_type == 'audio') $editPackage = $old[0]->audio_state;
//            elseif($resource_type == 'video') $editPackage = $old[0]->video_state;
//            elseif($resource_type == 'article') $editPackage = $old[0]->display_state;
            $old_is_single_sale = 0;

            //判断是否为专栏外单卖
            if($oldType == 2)
            {
                $is_exist = \DB::select("select * from t_pro_res_relation where app_id = ? and resource_type = 1 and resource_id = ? and relation_state=0",[$app_id,$data['id']]);
                if(count($is_exist))
                {
                    $old_is_single_sale = 1;
                }
            }

            //单个变为产品包
            if($oldType != 3 && $newType == 3)
            {
                //资源关系
                //$relation_add = 1;
                //TODO:检测该resource_id在资源关系表中是否存在记录,若有则更新专栏信息,若无则标志新增关系
                $is_exist = \DB::select("select * from t_pro_res_relation where app_id = ? and resource_type = 1 and resource_id = ? ",[$app_id,$data['id']]);
                if(count($is_exist))
                {
                    $relation_at = 1; //更新
                    $relation['updated_at'] = Utils::getTime();
                    $relation['relation_state'] = 0;


                }else{
                    $relation_add = 1;
                    $relation['created_at'] = Utils::getTime();
                    $relation['app_id'] = $app_id;
                    $relation['resource_id'] = $resource_id;
                }

                $relation['product_id'] = $data['product_id'];
                $relation['resource_type'] = '1';
                $relation['product_name'] = $data['product_name'];




                if($is_single_sale == 1)//该资源可以专栏外单卖
                {
                    $data['payment_type'] = 2;
                }
            }
            //产品包变为单个
            elseif(($oldType == 3 || $old_is_single_sale ==1) && $newType != 3)
            {
                $old_relation = \DB::select("select * from t_pro_res_relation where app_id = ? and product_id = ? and resource_type=$resourceType[$resource_type] and resource_id = ?",
                    [$app_id,$old[0]->product_id,$resource_id]);
                if($old_relation){
                    $relation_at = 2; //更新

                    //清除params中有关专栏的信息
//                    $data['product_name'] = "";
//                    $data['product_id'] = "";
                }
            }
            //产品包之间转换
            elseif($oldType == 3 && $newType == 3)
            {
                //+1
                //资源关系
//                $relation_add = 1;
                //-1
                Utils::log($resource_id);
                $old_relation = \DB::select("select * from t_pro_res_relation where app_id = ? and resource_type=$resourceType[$resource_type] and resource_id = ?",
                    [$app_id,$resource_id]);

                if($old_relation){
                    Utils::log("into update!");
                    $relation_at = 1; //更新
                    $relation['updated_at'] = Utils::getTime();
                    $relation['relation_state'] = 0;
                }else{
                    Utils::log("into insert!");

                    $relation_add = 1;
                    $relation['app_id'] = $app_id;

                    $relation['resource_id'] = $resource_id;
                    $relation['created_at'] = Utils::getTime();
                }
                $relation['product_id'] = $data['product_id'];
                $relation['resource_type'] = '1';
                $relation['product_name'] = $data['product_name'];

//                $relation['app_id'] = $app_id;
//                $relation['product_id'] = $data['product_id'];
//                $relation['resource_type'] = '1';
//                $relation['product_name'] = $data['product_name'];
//                $relation['resource_id'] = $resource_id;
//                $relation['created_at'] = Utils::getTime();

                if($is_single_sale == 1)//该资源可以专栏外单卖
                {
                    $data['payment_type'] = 2;
                }

            }
        }else{
            //dd("没有payment_type");
        }

        $update = \DB::table("t_image_text")->where("id", "=", $data['id'])->update($data);

        if ($update >= 0 || $update)
        {
            //获取资源中所有图片大小,并更新至image_size_total中
            $item = \DB::table('t_image_text')->where('app_id','=',$data['app_id'])->where('id','=',$data['id'])->first();
            if($item){
                Utils::updateImageTextTotalSize($item);
            }

            //资源关系更新
            if($relation_at == 1){
                $relation_at = \DB::table('t_pro_res_relation')
                    ->where('app_id','=',$app_id)
                    ->where('resource_type','=',$resourceType[$resource_type])
                    ->where('resource_id','=',$resource_id)
//                    ->where('relation_state','=','0')
                    ->update($relation);
            }
            //删除关系
            if($relation_at == 2) {
                //解除旧的资源关系 一对多不指定专栏//->where('product_id','=',$old[0]->product_id)
                $relation_at = \DB::table("t_pro_res_relation")
                    ->where('app_id','=',$app_id)
                    ->where('resource_type','=',$resourceType[$resource_type])
                    ->where('resource_id','=',$resource_id)
                    ->update(['relation_state'=>'1']);
            }
            if($relation_add) {
                $relation_time = Utils::getTime();
                /*//$package = array('$data[product_id]');
                if(count(package)){foreach($package as $product_id){}}
                 */
                $relation_add = \DB::connection('mysql')->insert("insert into t_pro_res_relation SET 
app_id = '$data[app_id]',product_name='$data[product_name]', product_id = '$data[product_id]', resource_type = '1', resource_id = '$data[id]', created_at = '$relation_time'
on duplicate key 
update relation_state = '0' ,updated_at = '$relation_time'
");
            }

            return response()->json(['ret' => 0, "msg" => "更新成功"]);
        } else {
            return response()->json(['ret' => -1, "msg" => "更新失败"]);
        }
    }

    /**
     *图片处理
     * @param $image_url
     * @param $table_name
     * @param $image_id
     */
    public function imageDeal($image_url, $table_name, $image_id)
    {
        $host_url = env('HOST_URL');
        $app_id = AppUtils::getAppID();

        Utils::asyncThread($host_url . '/downloadImage?image_id=' . $image_id . '&app_id='
            . $app_id . '&table_name=' . $table_name . '&file_url=' . $image_url);

        Utils::log("async of out");
    }
    /**
     *图片处理
     * @param $image_url
     * @param $table_name
     * @param $image_id
     * @param $image_width 压缩尺寸 宽度
     * @param $image_height 压缩尺寸 高度
     * @param $image_quality 压缩参数 质量值
     * @param $compressed 缩略图存储字段
     */
    public function imageDealo($image_url, $table_name, $image_id, $image_width, $image_height, $image_quality, $compressed)
    {
        $host_url = env('HOST_URL');
        $app_id = AppUtils::getAppID();

        Utils::asyncThread($host_url . '/downloadImaged?image_id=' . $image_id . '&app_id='
            . $app_id . '&table_name=' . $table_name . '&file_url=' . $image_url
            . '&image_width=' . $image_width . '&image_height=' . $image_height . '&image_quality=' . $image_quality
            . '&compressed=' . $compressed);

        Utils::log("asyncoo of out");
    }

    //分隔文本编辑器的内容
    public function sliceUE($html)
    {
        $content = [];
        $out = explode('<', $html);
        for ($i = 0; $i < count($out); $i++) {
            $in = explode('>', $out[$i]);
            for ($j = 0; $j < count($in); $j++) {
                $length = count($content);
                if (strstr($in[$j], 'img')) {
                    $content[$length]["type"] = 1;
                    try{
                        if(!isset(explode('src="', $in[$j])[1])){
                            throw new Exception("复制的内容有问题，请尝试分开复制，或记录复制内容并联系技术小哥");
                        }else{
                            $content[$length]["value"] = explode('"', explode('src="', $in[$j])[1])[0];
                        }
                    }catch (Exception $e){
                        //var_dump($e->getMessage());
                        return false;
                    }

                } else {
//                    $text=str_replace(array("\r", "\n", "\r\n"),'',$in[$j]);
//                    $text = $in[$j];
//                    if(!empty($text))
//                    {
//                        $content[$length]["type"]=0;
//                        $content[$length]["value"]=$text;
//                    }
                    $content[$length]["type"] = 0;
                    $content[$length]["value"] = $in[$j];
                }
            }
        }
        return json_encode($content, JSON_UNESCAPED_UNICODE);
    }


}








