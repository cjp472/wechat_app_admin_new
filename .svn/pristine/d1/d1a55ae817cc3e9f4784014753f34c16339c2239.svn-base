(function t(e,r){if(typeof exports==="object"&&typeof module==="object")module.exports=r();else if(typeof define==="function"&&define.amd)define([],r);else if(typeof exports==="object")exports["echarts"]=r();else e["echarts"]=r()})(this,function(){return function(t){var e={};function r(a){if(e[a])return e[a].exports;var i=e[a]={exports:{},id:a,loaded:false};t[a].call(i.exports,i,i.exports,r);i.loaded=true;return i.exports}r.m=t;r.c=e;r.p="";return r(0)}([function(t,e,r){t.exports=r(1);r(91);r(127);r(132);r(141);r(145);r(155);r(177);r(189);r(207);r(211);r(215);r(230);r(236);r(243);r(249);r(253);r(258);r(106);r(262);r(268);r(272);r(283);r(216);r(285);r(286);r(300);r(315);r(319);r(322);r(331);r(345)},function(t,e,r){var a=r(2);var i=r(24);var n=r(25);var o=r(26);var s=r(19);var l=r(27);var u=r(28);var h=r(41);var c=r(42);var v=r(77);var f=r(3);var d=r(38);var p=r(78);var g=r(32);var m=f.each;var y=["echarts","chart","component"];var x=["transform","filter","statistic"];function _(t){return function(e,r,a){e=e&&e.toLowerCase();g.prototype[t].call(this,e,r,a)}}function w(){g.call(this)}w.prototype.on=_("on");w.prototype.off=_("off");w.prototype.one=_("one");f.mixin(w,g);function b(t,e,r){r=r||{};if(typeof e==="string"){e=W[e]}if(e){m(G,function(t){t(e)})}this.id;this.group;this._dom=t;this._zr=v.init(t,{renderer:r.renderer||"canvas",devicePixelRatio:r.devicePixelRatio});this._theme=f.clone(e);this._chartsViews=[];this._chartsMap={};this._componentsViews=[];this._componentsMap={};this._api=new i(this);this._coordSysMgr=new n;g.call(this);this._messageCenter=new w;this._initEvents();this.resize=f.bind(this.resize,this)}var M=b.prototype;M.getDom=function(){return this._dom};M.getZr=function(){return this._zr};M.setOption=function(t,e,r){if(!this._model||e){this._model=new a(null,null,this._theme,new o(this._api))}this._model.setOption(t,G);S.prepareAndUpdate.call(this);!r&&this._zr.refreshImmediately()};M.setTheme=function(){console.log("ECharts#setTheme() is DEPRECATED in ECharts 3.0")};M.getModel=function(){return this._model};M.getOption=function(){return this._model.getOption()};M.getWidth=function(){return this._zr.getWidth()};M.getHeight=function(){return this._zr.getHeight()};M.getRenderedCanvas=function(t){if(!p.canvasSupported){return}t=t||{};t.pixelRatio=t.pixelRatio||1;t.backgroundColor=t.backgroundColor||this._model.get("backgroundColor");var e=this._zr;var r=e.storage.getDisplayList();f.each(r,function(t){t.stopAnimation(true)});return e.painter.getRenderedCanvas(t)};M.getDataURL=function(t){t=t||{};var e=t.excludeComponents;var r=this._model;var a=[];var i=this;m(e,function(t){r.eachComponent({mainType:t},function(t){var e=i._componentsMap[t.__viewId];if(!e.group.ignore){a.push(e);e.group.ignore=true}})});var n=this.getRenderedCanvas(t).toDataURL("image/"+(t&&t.type||"png"));m(a,function(t){t.group.ignore=false});return n};M.getConnectedDataURL=function(t){if(!p.canvasSupported){return}var e=this.group;var r=Math.min;var a=Math.max;var i=Infinity;if(Z[e]){var n=i;var o=i;var s=-i;var l=-i;var u=[];var h=t&&t.pixelRatio||1;for(var d in H){var g=H[d];if(g.group===e){var y=g.getRenderedCanvas(f.clone(t));var x=g.getDom().getBoundingClientRect();n=r(x.left,n);o=r(x.top,o);s=a(x.right,s);l=a(x.bottom,l);u.push({dom:y,left:x.left,top:x.top})}}n*=h;o*=h;s*=h;l*=h;var _=s-n;var w=l-o;var b=f.createCanvas();b.width=_;b.height=w;var M=v.init(b);m(u,function(t){var e=new c.Image({style:{x:t.left*h-n,y:t.top*h-o,image:t.dom}});M.add(e)});M.refreshImmediately();return b.toDataURL("image/"+(t&&t.type||"png"))}else{return this.getDataURL(t)}};var S={update:function(t){var e=this._model;var r=this._api;var a=this._coordSysMgr;if(!e){return}e.restoreData();a.create(this._model,this._api);L.call(this,e,r);D.call(this,e);a.update(e,r);k.call(this,e,t);P.call(this,e,t);z.call(this,e,t);var i=e.get("backgroundColor")||"transparent";var n=this._zr.painter;if(n.isSingleCanvas&&n.isSingleCanvas()){this._zr.configLayer(0,{clearColor:i})}else{if(!p.canvasSupported){var o=d.parse(i);i=d.stringify(o,"rgb");if(o[3]===0){i="transparent"}}i=i;this._dom.style.backgroundColor=i}},updateView:function(t){var e=this._model;if(!e){return}k.call(this,e,t);P.call(this,e,t);T.call(this,"updateView",e,t)},updateVisual:function(t){var e=this._model;if(!e){return}P.call(this,e,t);T.call(this,"updateVisual",e,t)},updateLayout:function(t){var e=this._model;if(!e){return}k.call(this,e,t);T.call(this,"updateLayout",e,t)},highlight:function(t){I.call(this,"highlight",t)},downplay:function(t){I.call(this,"downplay",t)},prepareAndUpdate:function(t){var e=this._model;C.call(this,"component",e);C.call(this,"chart",e);S.update.call(this,t)}};function I(t,e){var r=this._model;if(!r){return}r.eachComponent({mainType:"series",query:e},function(a,i){var n=this._chartsMap[a.__viewId];if(n&&n.__alive){n[t](a,r,this._api,e)}},this)}M.resize=function(){this._zr.resize();var t=this._model&&this._model.resetOption("media");S[t?"prepareAndUpdate":"update"].call(this);this._loadingFX&&this._loadingFX.resize()};var A=r(87);M.showLoading=function(t,e){if(f.isObject(t)){e=t;t="default"}this.hideLoading();var r=A(this._api,e);var a=this._zr;this._loadingFX=r;a.add(r)};M.hideLoading=function(){this._loadingFX&&this._zr.remove(this._loadingFX);this._loadingFX=null};M.makeActionFromEvent=function(t){var e=f.extend({},t);e.type=V[t.type];return e};M.dispatchAction=function(t,e){var r=O[t.type];if(r){var a=r.actionInfo;var i=a.update||"update";var n=[t];var o=false;if(t.batch){o=true;n=f.map(t.batch,function(e){e=f.defaults(f.extend({},e),t);e.batch=null;return e})}var s=[];var l;var u=t.type==="highlight"||t.type==="downplay";for(var h=0;h<n.length;h++){var c=n[h];l=r.action(c,this._model);l=l||f.extend({},c);l.type=a.event||l.type;s.push(l);u&&S[i].call(this,c)}i!=="none"&&!u&&S[i].call(this,t);if(!e){if(o){l={type:a.event||t.type,batch:s}}else{l=s[0]}this._messageCenter.trigger(l.type,l)}}};M.on=_("on");M.off=_("off");M.one=_("one");function T(t,e,r){var a=this._api;m(this._componentsViews,function(i){var n=i.__model;i[t](n,e,a,r);E(n,i)},this);e.eachSeries(function(i,n){var o=this._chartsMap[i.__viewId];o[t](i,e,a,r);E(i,o)},this)}function C(t,e){var r=t==="component";var a=r?this._componentsViews:this._chartsViews;var i=r?this._componentsMap:this._chartsMap;var n=this._zr;for(var o=0;o<a.length;o++){a[o].__alive=false}e[r?"eachComponent":"eachSeries"](function(t,o){if(r){if(t==="series"){return}}else{o=t}var l=o.id+"_"+o.type;var c=i[l];if(!c){var v=s.parseClassType(o.type);var f=r?u.getClass(v.main,v.sub):h.getClass(v.sub);if(f){c=new f;c.init(e,this._api);i[l]=c;a.push(c);n.add(c.group)}else{return}}o.__viewId=l;c.__alive=true;c.__id=l;c.__model=o},this);for(var o=0;o<a.length;){var l=a[o];if(!l.__alive){n.remove(l.group);l.dispose(e,this._api);a.splice(o,1);delete i[l.__id]}else{o++}}}function L(t,e){m(x,function(r){m(B[r]||[],function(r){r(t,e)})})}function D(t){var e={};t.eachSeries(function(t){var r=t.get("stack");var a=t.getData();if(r&&a.type==="list"){var i=e[r];if(i){a.stackedOn=i}e[r]=a}})}function k(t,e){var r=this._api;m(N,function(a){a(t,r,e)})}function P(t,e){m(y,function(r){m(F[r]||[],function(r){r(t,e)})})}function z(t,e){var r=this._api;m(this._componentsViews,function(a){var i=a.__model;a.render(i,t,r,e);E(i,a)},this);m(this._chartsViews,function(t){t.__alive=false},this);t.eachSeries(function(a,i){var n=this._chartsMap[a.__viewId];n.__alive=true;n.render(a,t,r,e);E(a,n)},this);m(this._chartsViews,function(e){if(!e.__alive){e.remove(t,r)}},this)}var R=["click","dblclick","mouseover","mouseout","mousedown","mouseup","globalout"];M._initEvents=function(){var t=this._zr;m(R,function(e){t.on(e,function(t){var r=this.getModel();var a=t.target;if(a&&a.dataIndex!=null){var i=a.dataModel||r.getSeriesByIndex(a.seriesIndex);var n=i&&i.getDataParams(a.dataIndex)||{};n.event=t;n.type=e;this.trigger(e,n)}},this)},this);m(V,function(t,e){this._messageCenter.on(e,function(t){this.trigger(e,t)},this)},this)};M.isDisposed=function(){return this._disposed};M.clear=function(){this.setOption({},true)};M.dispose=function(){this._disposed=true;var t=this._api;var e=this._model;m(this._componentsViews,function(r){r.dispose(e,t)});m(this._chartsViews,function(r){r.dispose(e,t)});this._zr.dispose();delete H[this.id]};f.mixin(b,g);function E(t,e){var r=t.get("z");var a=t.get("zlevel");e.group.traverse(function(t){r!=null&&(t.z=r);a!=null&&(t.zlevel=a)})}var O=[];var V={};var N=[];var B={};var G=[];var F={};var W={};var H={};var Z={};var q=new Date-0;var j=new Date-0;var U="_echarts_instance_";var X={version:"3.1.6",dependencies:{zrender:"3.0.7"}};function Y(t){var e=0;var r=1;var a=2;var i="__connectUpdateStatus";function n(t,e){for(var r=0;r<t.length;r++){var a=t[r];a[i]=e}}f.each(V,function(o,s){t._messageCenter.on(s,function(o){if(Z[t.group]&&t[i]!==e){var s=t.makeActionFromEvent(o);var l=[];for(var u in H){var h=H[u];if(h!==t&&h.group===t.group){l.push(h)}}n(l,e);m(l,function(t){if(t[i]!==r){t.dispatchAction(s)}});n(l,a)}})})}X.init=function(t,e,r){if(v.version.replace(".","")-0<X.dependencies.zrender.replace(".","")-0){throw new Error("ZRender "+v.version+" is too old for ECharts "+X.version+". Current version need ZRender "+X.dependencies.zrender+"+")}if(!t){throw new Error("Initialize failed: invalid dom.")}var a=new b(t,e,r);a.id="ec_"+q++;H[a.id]=a;t.setAttribute&&t.setAttribute(U,a.id);Y(a);return a};X.connect=function(t){if(f.isArray(t)){var e=t;t=null;f.each(e,function(e){if(e.group!=null){t=e.group}});t=t||"g_"+j++;f.each(e,function(e){e.group=t})}Z[t]=true;return t};X.disConnect=function(t){Z[t]=false};X.dispose=function(t){if(f.isDom(t)){t=X.getInstanceByDom(t)}else if(typeof t==="string"){t=H[t]}if(t instanceof b&&!t.isDisposed()){t.dispose()}};X.getInstanceByDom=function(t){var e=t.getAttribute(U);return H[e]};X.getInstanceById=function(t){return H[t]};X.registerTheme=function(t,e){W[t]=e};X.registerPreprocessor=function(t){G.push(t)};X.registerProcessor=function(t,e){if(f.indexOf(x,t)<0){throw new Error("stage should be one of "+x)}var r=B[t]||(B[t]=[]);r.push(e)};X.registerAction=function(t,e,r){if(typeof e==="function"){r=e;e=""}var a=f.isObject(t)?t.type:[t,t={event:e}][0];t.event=(t.event||a).toLowerCase();e=t.event;if(!O[a]){O[a]={action:r,actionInfo:t}}V[e]=a};X.registerCoordinateSystem=function(t,e){n.register(t,e)};X.registerLayout=function(t){if(f.indexOf(N,t)<0){N.push(t)}};X.registerVisualCoding=function(t,e){if(f.indexOf(y,t)<0){throw new Error("stage should be one of "+y)}var r=F[t]||(F[t]=[]);r.push(e)};X.extendChartView=function(t){return h.extend(t)};X.extendComponentModel=function(t){return s.extend(t)};X.extendSeriesModel=function(t){return l.extend(t)};X.extendComponentView=function(t){return u.extend(t)};X.setCanvasCreator=function(t){f.createCanvas=t};X.registerVisualCoding("echarts",f.curry(r(88),"","itemStyle"));X.registerPreprocessor(r(89));X.registerAction({type:"highlight",event:"highlight",update:"highlight"},f.noop);X.registerAction({type:"downplay",event:"downplay",update:"downplay"},f.noop);X.graphic=r(42);X.number=r(7);X.format=r(6);X.matrix=r(17);X.vector=r(16);X.util={};m(["map","each","filter","indexOf","inherits","reduce","filter","bind","curry","isArray","isString","isObject","isFunction","extend"],function(t){X.util[t]=f[t]});t.exports=X},function(t,e,r){var a=r(3);var i=r(5);var n=r(8);var o=a.each;var s=a.filter;var l=a.map;var u=a.isArray;var h=a.indexOf;var c=a.isObject;var v=r(19);var f=r(23);var d="\0_ec_inner";var p=n.extend({constructor:p,init:function(t,e,r,a){r=r||{};this.option=null;this._theme=new n(r);this._optionManager=a},setOption:function(t,e){a.assert(!(d in t),"please use chart.getOption()");this._optionManager.setOption(t,e);this.resetOption()},resetOption:function(t){var e=false;var r=this._optionManager;if(!t||t==="recreate"){var a=r.mountOption(t==="recreate");if(!this.option||t==="recreate"){m.call(this,a)}else{this.restoreData();this.mergeOption(a)}e=true}if(t==="timeline"||t==="media"){this.restoreData()}if(!t||t==="recreate"||t==="timeline"){var i=r.getTimelineOption(this);i&&(this.mergeOption(i),e=true)}if(!t||t==="recreate"||t==="media"){var n=r.getMediaOption(this,this._api);if(n.length){o(n,function(t){this.mergeOption(t,e=true)},this)}}return e},mergeOption:function(t){var e=this.option;var r=this._componentsMap;var n=[];o(t,function(t,r){if(t==null){return}if(!v.hasClass(r)){e[r]=e[r]==null?a.clone(t):a.merge(e[r],t,true)}else{n.push(r)}});v.topologicalTravel(n,v.getAllClassMainTypes(),s,this);function s(n,s){var l=i.normalizeToArray(t[n]);var u=i.mappingToExists(r[n],l);x(n,u);var h=y(r,s);e[n]=[];r[n]=[];o(u,function(t,i){var o=t.exist;var s=t.option;a.assert(c(s)||o,"Empty component definition");if(!s){o.mergeOption({},this);o.optionUpdated(this)}else{var l=v.getClass(n,t.keyInfo.subType,true);if(o&&o instanceof l){o.mergeOption(s,this);o.optionUpdated(this)}else{o=new l(s,this,this,a.extend({dependentModels:h,componentIndex:i},t.keyInfo));o.optionUpdated(this)}}r[n][i]=o;e[n][i]=o.option},this);if(n==="series"){this._seriesIndices=w(r.series)}}},getOption:function(){var t=a.clone(this.option);o(t,function(e,r){if(v.hasClass(r)){var e=i.normalizeToArray(e);for(var a=e.length-1;a>=0;a--){if(i.isIdInner(e[a])){e.splice(a,1)}}t[r]=e}});delete t[d];return t},getTheme:function(){return this._theme},getComponent:function(t,e){var r=this._componentsMap[t];if(r){return r[e||0]}},queryComponents:function(t){var e=t.mainType;if(!e){return[]}var r=t.index;var a=t.id;var i=t.name;var n=this._componentsMap[e];if(!n||!n.length){return[]}var o;if(r!=null){if(!u(r)){r=[r]}o=s(l(r,function(t){return n[t]}),function(t){return!!t})}else if(a!=null){var c=u(a);o=s(n,function(t){return c&&h(a,t.id)>=0||!c&&t.id===a})}else if(i!=null){var v=u(i);o=s(n,function(t){return v&&h(i,t.name)>=0||!v&&t.name===i})}return b(o,t)},findComponents:function(t){var e=t.query;var r=t.mainType;var a=n(e);var i=a?this.queryComponents(a):this._componentsMap[r];return o(b(i,t));function n(t){var e=r+"Index";var a=r+"Id";var i=r+"Name";return t&&(t.hasOwnProperty(e)||t.hasOwnProperty(a)||t.hasOwnProperty(i))?{mainType:r,index:t[e],id:t[a],name:t[i]}:null}function o(e){return t.filter?s(e,t.filter):e}},eachComponent:function(t,e,r){var i=this._componentsMap;if(typeof t==="function"){r=e;e=t;o(i,function(t,a){o(t,function(t,i){e.call(r,a,t,i)})})}else if(a.isString(t)){o(i[t],e,r)}else if(c(t)){var n=this.findComponents(t);o(n,e,r)}},getSeriesByName:function(t){var e=this._componentsMap.series;return s(e,function(e){return e.name===t})},getSeriesByIndex:function(t){return this._componentsMap.series[t]},getSeriesByType:function(t){var e=this._componentsMap.series;return s(e,function(e){return e.subType===t})},getSeries:function(){return this._componentsMap.series.slice()},eachSeries:function(t,e){M(this);o(this._seriesIndices,function(r){var a=this._componentsMap.series[r];t.call(e,a,r)},this)},eachRawSeries:function(t,e){o(this._componentsMap.series,t,e)},eachSeriesByType:function(t,e,r){M(this);o(this._seriesIndices,function(a){var i=this._componentsMap.series[a];if(i.subType===t){e.call(r,i,a)}},this)},eachRawSeriesByType:function(t,e,r){return o(this.getSeriesByType(t),e,r)},isSeriesFiltered:function(t){M(this);return a.indexOf(this._seriesIndices,t.componentIndex)<0},filterSeries:function(t,e){M(this);var r=s(this._componentsMap.series,t,e);this._seriesIndices=w(r)},restoreData:function(){var t=this._componentsMap;this._seriesIndices=w(t.series);var e=[];o(t,function(t,r){e.push(r)});v.topologicalTravel(e,v.getAllClassMainTypes(),function(e,r){o(t[e],function(t){t.restoreData()})})}});function g(t,e){for(var r in e){if(!v.hasClass(r)){if(typeof e[r]==="object"){t[r]=!t[r]?a.clone(e[r]):a.merge(t[r],e[r],false)}else{if(t[r]==null){t[r]=e[r]}}}}}function m(t){t=t;this.option={};this.option[d]=1;this._componentsMap={};this._seriesIndices=null;g(t,this._theme.option);a.merge(t,f,false);this.mergeOption(t)}function y(t,e){if(!a.isArray(e)){e=e?[e]:[]}var r={};o(e,function(e){r[e]=(t[e]||[]).slice()});return r}function x(t,e){var r={};o(e,function(t,e){var a=t.exist;a&&(r[a.id]=t)});o(e,function(e,i){var n=e.option;a.assert(!n||n.id==null||!r[n.id]||r[n.id]===e,"id duplicates: "+(n&&n.id));n&&n.id!=null&&(r[n.id]=e);if(c(n)){var o=_(t,n,e.exist);e.keyInfo={mainType:t,subType:o}}});o(e,function(t,e){var a=t.exist;var i=t.option;var n=t.keyInfo;if(!c(i)){return}n.name=i.name!=null?i.name+"":a?a.name:"\0-";if(a){n.id=a.id}else if(i.id!=null){n.id=i.id+""}else{var o=0;do{n.id="\0"+n.name+"\0"+o++}while(r[n.id])}r[n.id]=t})}function _(t,e,r){var a=e.type?e.type:r?r.subType:v.determineSubType(t,e);return a}function w(t){return l(t,function(t){return t.componentIndex})||[]}function b(t,e){return e.hasOwnProperty("subType")?s(t,function(t){return t.subType===e.subType}):t}function M(t){if(!t._seriesIndices){throw new Error("Series has not been initialized yet.")}}t.exports=p},function(t,e,r){var a=r(4);var i={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1};var n=Object.prototype.toString;var o=Array.prototype;var s=o.forEach;var l=o.filter;var u=o.slice;var h=o.map;var c=o.reduce;function v(t){if(typeof t=="object"&&t!==null){var e=t;if(t instanceof Array){e=[];for(var r=0,a=t.length;r<a;r++){e[r]=v(t[r])}}else if(!E(t)&&!O(t)){e={};for(var i in t){if(t.hasOwnProperty(i)){e[i]=v(t[i])}}}return e}return t}function f(t,e,r){if(!R(e)||!R(t)){return r?v(e):t}for(var a in e){if(e.hasOwnProperty(a)){var i=t[a];var n=e[a];if(R(n)&&R(i)&&!k(n)&&!k(i)&&!O(n)&&!O(i)&&!E(n)&&!E(i)){f(i,n,r)}else if(r||!(a in t)){t[a]=v(e[a],true)}}}return t}function d(t,e){var r=t[0];for(var a=1,i=t.length;a<i;a++){r=f(r,t[a],e)}return r}function p(t,e){for(var r in e){if(e.hasOwnProperty(r)){t[r]=e[r]}}return t}function g(t,e,r){for(var a in e){if(e.hasOwnProperty(a)&&(r?e[a]!=null:t[a]==null)){t[a]=e[a]}}return t}function m(){return document.createElement("canvas")}var y;function x(){if(!y){y=G.createCanvas().getContext("2d")}return y}function _(t,e){if(t){if(t.indexOf){return t.indexOf(e)}for(var r=0,a=t.length;r<a;r++){if(t[r]===e){return r}}}return-1}function w(t,e){var r=t.prototype;function a(){}a.prototype=e.prototype;t.prototype=new a;for(var i in r){t.prototype[i]=r[i]}t.prototype.constructor=t;t.superClass=e}function b(t,e,r){t="prototype"in t?t.prototype:t;e="prototype"in e?e.prototype:e;g(t,e,r)}function M(t){if(!t){return}if(typeof t=="string"){return false}return typeof t.length=="number"}function S(t,e,r){if(!(t&&e)){return}if(t.forEach&&t.forEach===s){t.forEach(e,r)}else if(t.length===+t.length){for(var a=0,i=t.length;a<i;a++){e.call(r,t[a],a,t)}}else{for(var n in t){if(t.hasOwnProperty(n)){e.call(r,t[n],n,t)}}}}function I(t,e,r){if(!(t&&e)){return}if(t.map&&t.map===h){return t.map(e,r)}else{var a=[];for(var i=0,n=t.length;i<n;i++){a.push(e.call(r,t[i],i,t))}return a}}function A(t,e,r,a){if(!(t&&e)){return}if(t.reduce&&t.reduce===c){return t.reduce(e,r,a)}else{for(var i=0,n=t.length;i<n;i++){r=e.call(a,r,t[i],i,t)}return r}}function T(t,e,r){if(!(t&&e)){return}if(t.filter&&t.filter===l){return t.filter(e,r)}else{var a=[];for(var i=0,n=t.length;i<n;i++){if(e.call(r,t[i],i,t)){a.push(t[i])}}return a}}function C(t,e,r){if(!(t&&e)){return}for(var a=0,i=t.length;a<i;a++){if(e.call(r,t[a],a,t)){return t[a]}}}function L(t,e){var r=u.call(arguments,2);return function(){return t.apply(e,r.concat(u.call(arguments)))}}function D(t){var e=u.call(arguments,1);return function(){return t.apply(this,e.concat(u.call(arguments)))}}function k(t){return n.call(t)==="[object Array]"}function P(t){return typeof t==="function"}function z(t){return n.call(t)==="[object String]"}function R(t){var e=typeof t;return e==="function"||!!t&&e=="object"}function E(t){return!!i[n.call(t)]||t instanceof a}function O(t){return t&&t.nodeType===1&&typeof t.nodeName=="string"}function V(t){for(var e=0,r=arguments.length;e<r;e++){if(arguments[e]!=null){return arguments[e]}}}function N(){return Function.call.apply(u,arguments)}function B(t,e){if(!t){throw new Error(e)}}var G={inherits:w,mixin:b,clone:v,merge:f,mergeAll:d,extend:p,defaults:g,getContext:x,createCanvas:m,indexOf:_,slice:N,find:C,isArrayLike:M,each:S,map:I,reduce:A,filter:T,bind:L,curry:D,isArray:k,isString:z,isObject:R,isFunction:P,isBuildInObject:E,isDom:O,retrieve:V,assert:B,noop:function(){}};t.exports=G},function(t,e){var r=function(t){this.colorStops=t||[]};r.prototype={constructor:r,addColorStop:function(t,e){this.colorStops.push({offset:t,color:e})}};t.exports=r},function(t,e,r){var a=r(6);var i=r(7);var n=r(3);var o=r(8);var s=["x","y","z","radius","angle"];var l={};l.createNameEach=function(t,e){t=t.slice();var r=n.map(t,l.capitalFirst);e=(e||[]).slice();var a=n.map(e,l.capitalFirst);return function(i,o){n.each(t,function(t,n){var s={name:t,capital:r[n]};for(var l=0;l<e.length;l++){s[e[l]]=t+a[l]}i.call(o,s)})}};l.capitalFirst=function(t){return t?t.charAt(0).toUpperCase()+t.substr(1):t};l.eachAxisDim=l.createNameEach(s,["axisIndex","axis","index"]);l.normalizeToArray=function(t){return n.isArray(t)?t:t==null?[]:[t]};l.createLinkedNodesFinder=function(t,e,r){return function(r){var n={nodes:[],records:{}};e(function(t){n.records[t.name]={}});if(!r){return n}o(r,n);var s;do{s=false;t(l)}while(s);function l(t){if(!a(t,n)&&i(t,n)){o(t,n);s=true}}return n};function a(t,e){return n.indexOf(e.nodes,t)>=0}function i(t,a){var i=false;e(function(e){n.each(r(t,e)||[],function(t){a.records[e.name][t]&&(i=true)})});return i}function o(t,a){a.nodes.push(t);e(function(e){n.each(r(t,e)||[],function(t){a.records[e.name][t]=true})})}};l.defaultEmphasis=function(t,e){if(t){var r=t.emphasis=t.emphasis||{};var a=t.normal=t.normal||{};n.each(e,function(t){var e=n.retrieve(r[t],a[t]);if(e!=null){r[t]=e}})}};l.createDataFormatModel=function(t,e,r){var a=new o;n.mixin(a,l.dataFormatMixin);a.seriesIndex=t.seriesIndex;a.name=t.name||"";a.getData=function(){return e};a.getRawDataArray=function(){return r};return a};l.getDataItemValue=function(t){return t&&(t.value==null?t:t.value)};l.converDataValue=function(t,e){var r=e&&e.type;if(r==="ordinal"){return t}if(r==="time"&&!isFinite(t)&&t!=null&&t!=="-"){t=+i.parseDate(t)}return t==null||t===""?NaN:+t};l.dataFormatMixin={getDataParams:function(t){var e=this.getData();var r=this.seriesIndex;var a=this.name;var i=this.getRawValue(t);var n=e.getRawIndex(t);var o=e.getName(t,true);var s=this.getRawDataArray();var l=s&&s[n];return{seriesIndex:r,seriesName:a,name:o,dataIndex:n,data:l,value:i,color:e.getItemVisual(t,"color"),$vars:["seriesName","name","value"]}},getFormattedLabel:function(t,e,r){e=e||"normal";var i=this.getData();var n=i.getItemModel(t);var o=this.getDataParams(t);if(r==null){r=n.get(["label",e,"formatter"])}if(typeof r==="function"){o.status=e;return r(o)}else if(typeof r==="string"){return a.formatTpl(r,o)}},getRawValue:function(t){var e=this.getData().getItemModel(t);if(e&&e.option!=null){var r=e.option;return n.isObject(r)&&!n.isArray(r)?r.value:r}}};l.mappingToExists=function(t,e){e=(e||[]).slice();var r=n.map(t||[],function(t,e){return{exist:t}});n.each(e,function(t,a){if(!n.isObject(t)){return}for(var i=0;i<r.length;i++){var o=r[i].exist;if(!r[i].option&&(t.id!=null&&o.id===t.id+""||t.name!=null&&!l.isIdInner(t)&&!l.isIdInner(o)&&o.name===t.name+"")){r[i].option=t;e[a]=null;break}}});n.each(e,function(t,e){if(!n.isObject(t)){return}var a=0;for(;a<r.length;a++){var i=r[a].exist;if(!r[a].option&&!l.isIdInner(i)&&t.id==null){r[a].option=t;break}}if(a>=r.length){r.push({option:t})}});return r};l.isIdInner=function(t){return n.isObject(t)&&t.id&&(t.id+"").indexOf("\0_ec_\0")===0};t.exports=l},function(t,e,r){var a=r(3);var i=r(7);function n(t){if(isNaN(t)){return"-"}t=(t+"").split(".");return t[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,"$1,")+(t.length>1?"."+t[1]:"")}function o(t){return t.toLowerCase().replace(/-(.)/g,function(t,e){return e.toUpperCase()})}function s(t){var e=t.length;if(typeof t==="number"){return[t,t,t,t]}else if(e===2){return[t[0],t[1],t[0],t[1]]}else if(e===3){return[t[0],t[1],t[2],t[1]]}return t}function l(t){return String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}var u=["a","b","c","d","e","f","g"];function h(t,e){return"{"+t+(e==null?"":e)+"}"}function c(t,e){if(!a.isArray(e)){e=[e]}var r=e.length;if(!r){return""}var i=e[0].$vars;for(var n=0;n<i.length;n++){var o=u[n];t=t.replace(h(o),h(o,0))}for(var s=0;s<r;s++){for(var l=0;l<i.length;l++){t=t.replace(h(u[l],s),e[s][i[l]])}}return t}function v(t,e){if(t==="week"||t==="month"||t==="quarter"||t==="half-year"||t==="year"){t="MM-dd\nyyyy"}var r=i.parseDate(e);var a=r.getFullYear();var n=r.getMonth()+1;var o=r.getDate();var s=r.getHours();var l=r.getMinutes();var u=r.getSeconds();t=t.replace("MM",f(n)).toLowerCase().replace("yyyy",a).replace("yy",a%100).replace("dd",f(o)).replace("d",o).replace("hh",f(s)).replace("h",s).replace("mm",f(l)).replace("m",l).replace("ss",f(u)).replace("s",u);return t}function f(t){return t<10?"0"+t:t}t.exports={normalizeCssArray:s,addCommas:n,toCamelCase:o,encodeHTML:l,formatTpl:c,formatTime:v}},function(t,e){var r={};var a=1e-4;function i(t){return t.replace(/^\s+/,"").replace(/\s+$/,"")}r.linearMap=function(t,e,r,a){var i=e[1]-e[0];if(i===0){return(r[0]+r[1])/2}var n=(t-e[0])/i;if(a){n=Math.min(Math.max(n,0),1)}return n*(r[1]-r[0])+r[0]};r.parsePercent=function(t,e){switch(t){case"center":case"middle":t="50%";break;case"left":case"top":t="0%";break;case"right":case"bottom":t="100%";break}if(typeof t==="string"){if(i(t).match(/%$/)){return parseFloat(t)/100*e}return parseFloat(t)}return t==null?NaN:+t};r.round=function(t){return+(+t).toFixed(12)};r.asc=function(t){t.sort(function(t,e){return t-e});return t};r.getPrecision=function(t){if(isNaN(t)){return 0}var e=1;var r=0;while(Math.round(t*e)/e!==t){e*=10;r++}return r};r.getPixelPrecision=function(t,e){var r=Math.log;var a=Math.LN10;var i=Math.floor(r(t[1]-t[0])/a);var n=Math.round(r(Math.abs(e[1]-e[0]))/a);return Math.max(-i+n,0)};r.MAX_SAFE_INTEGER=9007199254740991;r.remRadian=function(t){var e=Math.PI*2;return(t%e+e)%e};r.isRadianAroundZero=function(t){return t>-a&&t<a};r.parseDate=function(t){return t instanceof Date?t:new Date(typeof t==="string"?t.replace(/-/g,"/"):Math.round(t))};r.nice=function(t,e){var r=Math.floor(Math.log(t)/Math.LN10);var a=Math.pow(10,r);var i=t/a;var n;if(e){if(i<1.5){n=1}else if(i<2.5){n=2}else if(i<4){n=3}else if(i<7){n=5}else{n=10}}else{if(i<1){n=1}else if(i<2){n=2}else if(i<3){n=3}else if(i<5){n=5}else{n=10}}return n*a};t.exports=r},function(t,e,r){var a=r(3);var i=r(9);function n(t,e,r,a){this.parentModel=e;this.ecModel=r;this.option=t;if(this.init){if(arguments.length<=4){this.init(t,e,r,a)}else{this.init.apply(this,arguments)}}}n.prototype={constructor:n,init:null,mergeOption:function(t){a.merge(this.option,t,true)},get:function(t,e){if(!t){return this.option}if(typeof t==="string"){t=t.split(".")}var r=this.option;var a=this.parentModel;for(var i=0;i<t.length;i++){r=r&&typeof r==="object"?r[t[i]]:null;if(r==null){break}}if(r==null&&a&&!e){r=a.get(t)}return r},getShallow:function(t,e){var r=this.option;var a=r&&r[t];var i=this.parentModel;if(a==null&&i&&!e){a=i.getShallow(t)}return a},getModel:function(t,e){var r=this.get(t,true);var a=this.parentModel;var i=new n(r,e||a&&a.getModel(t),this.ecModel);return i},isEmpty:function(){return this.option==null},restoreData:function(){},clone:function(){var t=this.constructor;return new t(a.clone(this.option))},setReadOnly:function(t){i.setReadOnly(this,t)}};i.enableClassExtend(n);var o=a.mixin;o(n,r(10));o(n,r(12));o(n,r(13));o(n,r(18));t.exports=n},function(t,e,r){var a=r(3);var i={};var n=".";var o="___EC__COMPONENT__CONTAINER___";var s=i.parseClassType=function(t){var e={main:"",sub:""};if(t){t=t.split(n);e.main=t[0]||"";e.sub=t[1]||""}return e};i.enableClassExtend=function(t,e){t.extend=function(r){var i=function(){e&&e.apply(this,arguments);t.apply(this,arguments)};a.extend(i.prototype,r);i.extend=this.extend;i.superCall=l;i.superApply=u;a.inherits(i,this);i.superClass=this;return i}};function l(t,e){var r=a.slice(arguments,2);return this.superClass.prototype[e].apply(t,r)}function u(t,e,r){return this.superClass.prototype[e].apply(t,r)}i.enableClassManagement=function(t,e){e=e||{};var r={};t.registerClass=function(t,e){if(e){e=s(e);if(!e.sub){if(r[e.main]){throw new Error(e.main+"exists.")}r[e.main]=t}else if(e.sub!==o){var a=i(e);a[e.sub]=t}}return t};t.getClass=function(t,e,a){var i=r[t];if(i&&i[o]){i=e?i[e]:null}if(a&&!i){throw new Error("Component "+t+"."+(e||"")+" not exists. Load it first.")}return i};t.getClassesByMainType=function(t){t=s(t);var e=[];var i=r[t.main];if(i&&i[o]){a.each(i,function(t,r){r!==o&&e.push(t)})}else{e.push(i)}return e};t.hasClass=function(t){t=s(t);return!!r[t.main]};t.getAllClassMainTypes=function(){var t=[];a.each(r,function(e,r){t.push(r)});return t};t.hasSubTypes=function(t){t=s(t);var e=r[t.main];return e&&e[o]};t.parseClassType=s;function i(t){var e=r[t.main];if(!e||!e[o]){e=r[t.main]={};e[o]=true}return e}if(e.registerWhenExtend){var n=t.extend;if(n){t.extend=function(e){var r=n.call(this,e);return t.registerClass(r,e.type)}}}return t};i.setReadOnly=function(t,e){};t.exports=i},function(t,e,r){var a=r(11)([["lineWidth","width"],["stroke","color"],["opacity"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["shadowColor"]]);t.exports={getLineStyle:function(t){var e=a.call(this,t);var r=this.getLineDash();r&&(e.lineDash=r);return e},getLineDash:function(){var t=this.get("type");return t==="solid"||t==null?null:t==="dashed"?[5,5]:[1,1]}}},function(t,e,r){var a=r(3);t.exports=function(t){for(var e=0;e<t.length;e++){if(!t[e][1]){t[e][1]=t[e][0]}}return function(e){var r={};for(var i=0;i<t.length;i++){var n=t[i][1];if(e&&a.indexOf(e,n)>=0){continue}var o=this.getShallow(n);if(o!=null){r[t[i][0]]=o}}return r}}},function(t,e,r){t.exports={getAreaStyle:r(11)([["fill","color"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["opacity"],["shadowColor"]])}},function(t,e,r){var a=r(14);function i(t,e){return t&&t.getShallow(e)}t.exports={getTextColor:function(){var t=this.ecModel;return this.getShallow("color")||t&&t.get("textStyle.color")},getFont:function(){var t=this.ecModel;var e=t&&t.getModel("textStyle");return[this.getShallow("fontStyle")||i(e,"fontStyle"),this.getShallow("fontWeight")||i(e,"fontWeight"),(this.getShallow("fontSize")||i(e,"fontSize")||12)+"px",this.getShallow("fontFamily")||i(e,"fontFamily")||"sans-serif"].join(" ")},getTextRect:function(t){var e=this.get("textStyle")||{};return a.getBoundingRect(t,this.getFont(),e.align,e.baseline)},ellipsis:function(t,e,r){return a.ellipsis(t,this.getFont(),e,r)}}},function(t,e,r){var a={};var i=0;var n=5e3;var o=r(3);var s=r(15);function l(t,e){var r=t+":"+e;if(a[r]){return a[r]}var o=(t+"").split("\n");var s=0;for(var l=0,u=o.length;l<u;l++){s=Math.max(d.measureText(o[l],e).width,s)}if(i>n){i=0;a={}}i++;a[r]=s;return s}function u(t,e,r,a){var i=((t||"")+"").split("\n").length;var n=l(t,e);var o=l("国",e);var u=i*o;var h=new s(0,0,n,u);h.lineHeight=o;switch(a){case"bottom":case"alphabetic":h.y-=o;break;case"middle":h.y-=o/2;break}switch(r){case"end":case"right":h.x-=h.width;break;case"center":h.x-=h.width/2;break}return h}function h(t,e,r,a){var i=e.x;var n=e.y;var o=e.height;var s=e.width;var l=r.height;var u=o/2-l/2;var h="left";switch(t){case"left":i-=a;n+=u;h="right";break;case"right":i+=a+s;n+=u;h="left";break;case"top":i+=s/2;n-=a+l;h="center";break;case"bottom":i+=s/2;n+=o+a;h="center";break;case"inside":i+=s/2;n+=u;h="center";break;case"insideLeft":i+=a;n+=u;h="left";break;case"insideRight":i+=s-a;n+=u;h="right";break;case"insideTop":i+=s/2;n+=a;h="center";break;case"insideBottom":i+=s/2;n+=o-l-a;h="center";break;case"insideTopLeft":i+=a;n+=a;h="left";break;case"insideTopRight":i+=s-a;n+=a
;h="right";break;case"insideBottomLeft":i+=a;n+=o-l-a;break;case"insideBottomRight":i+=s-a;n+=o-l-a;h="right";break}return{x:i,y:n,textAlign:h,textBaseline:"top"}}function c(t,e,r,a){if(!r){return""}a=o.defaults({ellipsis:"...",minCharacters:3,maxIterations:3,cnCharWidth:l("国",e),ascCharWidth:l("a",e)},a,true);r-=l(a.ellipsis);var i=(t+"").split("\n");for(var n=0,s=i.length;n<s;n++){i[n]=v(i[n],e,r,a)}return i.join("\n")}function v(t,e,r,a){for(var i=0;;i++){var n=l(t,e);if(n<r||i>=a.maxIterations){t+=a.ellipsis;break}var o=i===0?f(t,r,a):Math.floor(t.length*r/n);if(o<a.minCharacters){t="";break}t=t.substr(0,o)}return t}function f(t,e,r){var a=0;var i=0;for(var n=t.length;i<n&&a<e;i++){var o=t.charCodeAt(i);a+=0<=o&&o<=127?r.ascCharWidth:r.cnCharWidth}return i}var d={getWidth:l,getBoundingRect:u,adjustTextPositionOnRect:h,ellipsis:c,measureText:function(t,e){var r=o.getContext();r.font=e;return r.measureText(t)}};t.exports=d},function(t,e,r){"use strict";var a=r(16);var i=r(17);var n=a.applyTransform;var o=Math.min;var s=Math.abs;var l=Math.max;function u(t,e,r,a){this.x=t;this.y=e;this.width=r;this.height=a}u.prototype={constructor:u,union:function(t){var e=o(t.x,this.x);var r=o(t.y,this.y);this.width=l(t.x+t.width,this.x+this.width)-e;this.height=l(t.y+t.height,this.y+this.height)-r;this.x=e;this.y=r},applyTransform:function(){var t=[];var e=[];return function(r){if(!r){return}t[0]=this.x;t[1]=this.y;e[0]=this.x+this.width;e[1]=this.y+this.height;n(t,t,r);n(e,e,r);this.x=o(t[0],e[0]);this.y=o(t[1],e[1]);this.width=s(e[0]-t[0]);this.height=s(e[1]-t[1])}}(),calculateTransform:function(t){var e=this;var r=t.width/e.width;var a=t.height/e.height;var n=i.create();i.translate(n,n,[-e.x,-e.y]);i.scale(n,n,[r,a]);i.translate(n,n,[t.x,t.y]);return n},intersect:function(t){var e=this;var r=e.x;var a=e.x+e.width;var i=e.y;var n=e.y+e.height;var o=t.x;var s=t.x+t.width;var l=t.y;var u=t.y+t.height;return!(a<o||s<r||n<l||u<i)},contain:function(t,e){var r=this;return t>=r.x&&t<=r.x+r.width&&e>=r.y&&e<=r.y+r.height},clone:function(){return new u(this.x,this.y,this.width,this.height)},copy:function(t){this.x=t.x;this.y=t.y;this.width=t.width;this.height=t.height}};t.exports=u},function(t,e){var r=typeof Float32Array==="undefined"?Array:Float32Array;var a={create:function(t,e){var a=new r(2);a[0]=t||0;a[1]=e||0;return a},copy:function(t,e){t[0]=e[0];t[1]=e[1];return t},clone:function(t){var e=new r(2);e[0]=t[0];e[1]=t[1];return e},set:function(t,e,r){t[0]=e;t[1]=r;return t},add:function(t,e,r){t[0]=e[0]+r[0];t[1]=e[1]+r[1];return t},scaleAndAdd:function(t,e,r,a){t[0]=e[0]+r[0]*a;t[1]=e[1]+r[1]*a;return t},sub:function(t,e,r){t[0]=e[0]-r[0];t[1]=e[1]-r[1];return t},len:function(t){return Math.sqrt(this.lenSquare(t))},lenSquare:function(t){return t[0]*t[0]+t[1]*t[1]},mul:function(t,e,r){t[0]=e[0]*r[0];t[1]=e[1]*r[1];return t},div:function(t,e,r){t[0]=e[0]/r[0];t[1]=e[1]/r[1];return t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},scale:function(t,e,r){t[0]=e[0]*r;t[1]=e[1]*r;return t},normalize:function(t,e){var r=a.len(e);if(r===0){t[0]=0;t[1]=0}else{t[0]=e[0]/r;t[1]=e[1]/r}return t},distance:function(t,e){return Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1]))},distanceSquare:function(t,e){return(t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])},negate:function(t,e){t[0]=-e[0];t[1]=-e[1];return t},lerp:function(t,e,r,a){t[0]=e[0]+a*(r[0]-e[0]);t[1]=e[1]+a*(r[1]-e[1]);return t},applyTransform:function(t,e,r){var a=e[0];var i=e[1];t[0]=r[0]*a+r[2]*i+r[4];t[1]=r[1]*a+r[3]*i+r[5];return t},min:function(t,e,r){t[0]=Math.min(e[0],r[0]);t[1]=Math.min(e[1],r[1]);return t},max:function(t,e,r){t[0]=Math.max(e[0],r[0]);t[1]=Math.max(e[1],r[1]);return t}};a.length=a.len;a.lengthSquare=a.lenSquare;a.dist=a.distance;a.distSquare=a.distanceSquare;t.exports=a},function(t,e){var r=typeof Float32Array==="undefined"?Array:Float32Array;var a={create:function(){var t=new r(6);a.identity(t);return t},identity:function(t){t[0]=1;t[1]=0;t[2]=0;t[3]=1;t[4]=0;t[5]=0;return t},copy:function(t,e){t[0]=e[0];t[1]=e[1];t[2]=e[2];t[3]=e[3];t[4]=e[4];t[5]=e[5];return t},mul:function(t,e,r){var a=e[0]*r[0]+e[2]*r[1];var i=e[1]*r[0]+e[3]*r[1];var n=e[0]*r[2]+e[2]*r[3];var o=e[1]*r[2]+e[3]*r[3];var s=e[0]*r[4]+e[2]*r[5]+e[4];var l=e[1]*r[4]+e[3]*r[5]+e[5];t[0]=a;t[1]=i;t[2]=n;t[3]=o;t[4]=s;t[5]=l;return t},translate:function(t,e,r){t[0]=e[0];t[1]=e[1];t[2]=e[2];t[3]=e[3];t[4]=e[4]+r[0];t[5]=e[5]+r[1];return t},rotate:function(t,e,r){var a=e[0];var i=e[2];var n=e[4];var o=e[1];var s=e[3];var l=e[5];var u=Math.sin(r);var h=Math.cos(r);t[0]=a*h+o*u;t[1]=-a*u+o*h;t[2]=i*h+s*u;t[3]=-i*u+h*s;t[4]=h*n+u*l;t[5]=h*l-u*n;return t},scale:function(t,e,r){var a=r[0];var i=r[1];t[0]=e[0]*a;t[1]=e[1]*i;t[2]=e[2]*a;t[3]=e[3]*i;t[4]=e[4]*a;t[5]=e[5]*i;return t},invert:function(t,e){var r=e[0];var a=e[2];var i=e[4];var n=e[1];var o=e[3];var s=e[5];var l=r*o-n*a;if(!l){return null}l=1/l;t[0]=o*l;t[1]=-n*l;t[2]=-a*l;t[3]=r*l;t[4]=(a*s-o*i)*l;t[5]=(n*i-r*s)*l;return t}};t.exports=a},function(t,e,r){t.exports={getItemStyle:r(11)([["fill","color"],["stroke","borderColor"],["lineWidth","borderWidth"],["opacity"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["shadowColor"]])}},function(t,e,r){var a=r(8);var i=r(3);var n=Array.prototype.push;var o=r(20);var s=r(9);var l=r(21);var u=a.extend({type:"component",id:"",name:"",mainType:"",subType:"",componentIndex:0,defaultOption:null,ecModel:null,dependentModels:[],uid:null,layoutMode:null,init:function(t,e,r,a){this.mergeDefaultAndTheme(this.option,this.ecModel)},mergeDefaultAndTheme:function(t,e){var r=this.layoutMode;var a=r?l.getLayoutParams(t):{};var n=e.getTheme();i.merge(t,n.get(this.mainType));i.merge(t,this.getDefaultOption());if(r){l.mergeLayoutParam(t,a,r)}},mergeOption:function(t){i.merge(this.option,t,true);var e=this.layoutMode;if(e){l.mergeLayoutParam(this.option,t,e)}},optionUpdated:function(t){},getDefaultOption:function(){if(!this.hasOwnProperty("__defaultOption")){var t=[];var e=this.constructor;while(e){var r=e.prototype.defaultOption;r&&t.push(r);e=e.superClass}var a={};for(var n=t.length-1;n>=0;n--){a=i.merge(a,t[n],true)}this.__defaultOption=a}return this.__defaultOption}});s.enableClassExtend(u,function(t,e,r,a){i.extend(this,a);this.uid=o.getUID("componentModel")});s.enableClassManagement(u,{registerWhenExtend:true});o.enableSubTypeDefaulter(u);o.enableTopologicalTravel(u,h);function h(t){var e=[];i.each(u.getClassesByMainType(t),function(t){n.apply(e,t.prototype.dependencies||[])});return i.map(e,function(t){return s.parseClassType(t).main})}i.mixin(u,r(22));t.exports=u},function(t,e,r){var a=r(3);var i=r(9);var n=i.parseClassType;var o=0;var s={};var l="_";s.getUID=function(t){return[t||"",o++,Math.random()].join(l)};s.enableSubTypeDefaulter=function(t){var e={};t.registerSubTypeDefaulter=function(t,r){t=n(t);e[t.main]=r};t.determineSubType=function(r,a){var i=a.type;if(!i){var o=n(r).main;if(t.hasSubTypes(r)&&e[o]){i=e[o](a)}}return i};return t};s.enableTopologicalTravel=function(t,e){t.topologicalTravel=function(t,e,i,n){if(!t.length){return}var o=r(e);var s=o.graph;var l=o.noEntryList;var u={};a.each(t,function(t){u[t]=true});while(l.length){var h=l.pop();var c=s[h];var v=!!u[h];if(v){i.call(n,h,c.originalDeps.slice());delete u[h]}a.each(c.successor,v?d:f)}a.each(u,function(){throw new Error("Circle dependency may exists")});function f(t){s[t].entryCount--;if(s[t].entryCount===0){l.push(t)}}function d(t){u[t]=true;f(t)}};function r(t){var r={};var o=[];a.each(t,function(s){var l=i(r,s);var u=l.originalDeps=e(s);var h=n(u,t);l.entryCount=h.length;if(l.entryCount===0){o.push(s)}a.each(h,function(t){if(a.indexOf(l.predecessor,t)<0){l.predecessor.push(t)}var e=i(r,t);if(a.indexOf(e.successor,t)<0){e.successor.push(s)}})});return{graph:r,noEntryList:o}}function i(t,e){if(!t[e]){t[e]={predecessor:[],successor:[]}}return t[e]}function n(t,e){var r=[];a.each(t,function(t){a.indexOf(e,t)>=0&&r.push(t)});return r}};t.exports=s},function(t,e,r){"use strict";var a=r(3);var i=r(15);var n=r(7);var o=r(6);var s=n.parsePercent;var l=a.each;var u={};var h=["left","right","top","bottom","width","height"];function c(t,e,r,a,i){var n=0;var o=0;if(a==null){a=Infinity}if(i==null){i=Infinity}var s=0;e.eachChild(function(l,u){var h=l.position;var c=l.getBoundingRect();var v=e.childAt(u+1);var f=v&&v.getBoundingRect();var d;var p;if(t==="horizontal"){var g=c.width+(f?-f.x+c.x:0);d=n+g;if(d>a||l.newline){n=0;d=g;o+=s+r;s=c.height}else{s=Math.max(s,c.height)}}else{var m=c.height+(f?-f.y+c.y:0);p=o+m;if(p>i||l.newline){n+=s+r;o=0;p=m;s=c.width}else{s=Math.max(s,c.width)}}if(l.newline){return}h[0]=n;h[1]=o;t==="horizontal"?n=d+r:o=p+r})}u.box=c;u.vbox=a.curry(c,"vertical");u.hbox=a.curry(c,"horizontal");u.getAvailableSize=function(t,e,r){var a=e.width;var i=e.height;var n=s(t.x,a);var l=s(t.y,i);var u=s(t.x2,a);var h=s(t.y2,i);(isNaN(n)||isNaN(parseFloat(t.x)))&&(n=0);(isNaN(u)||isNaN(parseFloat(t.x2)))&&(u=a);(isNaN(l)||isNaN(parseFloat(t.y)))&&(l=0);(isNaN(h)||isNaN(parseFloat(t.y2)))&&(h=i);r=o.normalizeCssArray(r||0);return{width:Math.max(u-n-r[1]-r[3],0),height:Math.max(h-l-r[0]-r[2],0)}};u.getLayoutRect=function(t,e,r){r=o.normalizeCssArray(r||0);var a=e.width;var n=e.height;var l=s(t.left,a);var u=s(t.top,n);var h=s(t.right,a);var c=s(t.bottom,n);var v=s(t.width,a);var f=s(t.height,n);var d=r[2]+r[0];var p=r[1]+r[3];var g=t.aspect;if(isNaN(v)){v=a-h-p-l}if(isNaN(f)){f=n-c-d-u}if(isNaN(v)&&isNaN(f)){if(g>a/n){v=a*.8}else{f=n*.8}}if(g!=null){if(isNaN(v)){v=g*f}if(isNaN(f)){f=v/g}}if(isNaN(l)){l=a-h-v-p}if(isNaN(u)){u=n-c-f-d}switch(t.left||t.right){case"center":l=a/2-v/2-r[3];break;case"right":l=a-v-p;break}switch(t.top||t.bottom){case"middle":case"center":u=n/2-f/2-r[0];break;case"bottom":u=n-f-d;break}l=l||0;u=u||0;if(isNaN(v)){v=a-l-(h||0)}if(isNaN(f)){f=n-u-(c||0)}var m=new i(l+r[3],u+r[0],v,f);m.margin=r;return m};u.positionGroup=function(t,e,r,i){var n=t.getBoundingRect();e=a.extend(a.clone(e),{width:n.width,height:n.height});e=u.getLayoutRect(e,r,i);t.position=[e.x-n.x,e.y-n.y]};u.mergeLayoutParam=function(t,e,r){!a.isObject(r)&&(r={});var i=["width","left","right"];var n=["height","top","bottom"];var o=u(i);var s=u(n);v(i,t,o);v(n,t,s);function u(a){var i={};var n=0;var o={};var s=0;var u=r.ignoreSize?1:2;l(a,function(e){o[e]=t[e]});l(a,function(t){h(e,t)&&(i[t]=o[t]=e[t]);c(i,t)&&n++;c(o,t)&&s++});if(s===u||!n){return o}else if(n>=u){return i}else{for(var v=0;v<a.length;v++){var f=a[v];if(!h(i,f)&&h(t,f)){i[f]=t[f];break}}return i}}function h(t,e){return t.hasOwnProperty(e)}function c(t,e){return t[e]!=null&&t[e]!=="auto"}function v(t,e,r){l(t,function(t){e[t]=r[t]})}};u.getLayoutParams=function(t){return u.copyLayoutParams({},t)};u.copyLayoutParams=function(t,e){e&&t&&l(h,function(r){e.hasOwnProperty(r)&&(t[r]=e[r])});return t};t.exports=u},function(t,e){t.exports={getBoxLayoutParams:function(){return{left:this.get("left"),top:this.get("top"),right:this.get("right"),bottom:this.get("bottom"),width:this.get("width"),height:this.get("height")}}}},function(t,e){var r="";if(typeof navigator!=="undefined"){r=navigator.platform||""}t.exports={color:["#c23531","#2f4554","#61a0a8","#d48265","#91c7ae","#749f83","#ca8622","#bda29a","#6e7074","#546570","#c4ccd3"],grid:{},textStyle:{fontFamily:r.match(/^Win/)?"Microsoft YaHei":"sans-serif",fontSize:12,fontStyle:"normal",fontWeight:"normal"},animation:true,animationThreshold:2e3,animationDuration:1e3,animationDurationUpdate:300,animationEasing:"exponentialOut",animationEasingUpdate:"cubicOut"}},function(t,e,r){"use strict";var a=r(3);var i=["getDom","getZr","getWidth","getHeight","dispatchAction","on","off","getDataURL","getConnectedDataURL","getModel","getOption"];function n(t){a.each(i,function(e){this[e]=a.bind(t[e],t)},this)}t.exports=n},function(t,e){"use strict";var r={};function a(){this._coordinateSystems=[]}a.prototype={constructor:a,create:function(t,e){var a=[];for(var i in r){var n=r[i].create(t,e);n&&(a=a.concat(n))}this._coordinateSystems=a},update:function(t,e){var r=this._coordinateSystems;for(var a=0;a<r.length;a++){r[a].update&&r[a].update(t,e)}}};a.register=function(t,e){r[t]=e};a.get=function(t){return r[t]};t.exports=a},function(t,e,r){var a=r(3);var i=r(5);var n=r(19);var o=a.each;var s=a.clone;var l=a.map;var u=a.merge;var h=/^(min|max)?(.+)$/;function c(t){this._api=t;this._timelineOptions=[];this._mediaList=[];this._mediaDefault;this._currentMediaIndices=[];this._optionBackup;this._newOptionBackup}c.prototype={constructor:c,setOption:function(t,e){t=s(t,true);var r=this._optionBackup;var a=this._newOptionBackup=v.call(this,t,e);if(r){g(r.baseOption,a.baseOption);if(a.timelineOptions.length){r.timelineOptions=a.timelineOptions}if(a.mediaList.length){r.mediaList=a.mediaList}if(a.mediaDefault){r.mediaDefault=a.mediaDefault}}else{this._optionBackup=a}},mountOption:function(t){var e=t?this._optionBackup:this._newOptionBackup;this._timelineOptions=l(e.timelineOptions,s);this._mediaList=l(e.mediaList,s);this._mediaDefault=s(e.mediaDefault);this._currentMediaIndices=[];return s(e.baseOption)},getTimelineOption:function(t){var e;var r=this._timelineOptions;if(r.length){var a=t.getComponent("timeline");if(a){e=s(r[a.getCurrentIndex()],true)}}return e},getMediaOption:function(t){var e=this._api.getWidth();var r=this._api.getHeight();var a=this._mediaList;var i=this._mediaDefault;var n=[];var o=[];if(!a.length&&!i){return o}for(var u=0,h=a.length;u<h;u++){if(f(a[u].query,e,r)){n.push(u)}}if(!n.length&&i){n=[-1]}if(n.length&&!p(n,this._currentMediaIndices)){o=l(n,function(t){return s(t===-1?i.option:a[t].option)})}this._currentMediaIndices=n;return o}};function v(t,e){var r=[];var i=[];var n;var s;var l=t.timeline;if(t.baseOption){s=t.baseOption}if(l||t.options){s=s||{};r=(t.options||[]).slice()}if(t.media){s=s||{};var u=t.media;o(u,function(t){if(t&&t.option){if(t.query){i.push(t)}else if(!n){n=t}}})}if(!s){s=t}if(!s.timeline){s.timeline=l}o([s].concat(r).concat(a.map(i,function(t){return t.option})),function(t){o(e,function(e){e(t)})});return{baseOption:s,timelineOptions:r,mediaDefault:n,mediaList:i}}function f(t,e,r){var i={width:e,height:r,aspectratio:e/r};var n=true;a.each(t,function(t,e){var r=e.match(h);if(!r||!r[1]||!r[2]){return}var a=r[1];var o=r[2].toLowerCase();if(!d(i[o],t,a)){n=false}});return n}function d(t,e,r){if(r==="min"){return t>=e}else if(r==="max"){return t<=e}else{return t===e}}function p(t,e){return t.join(",")===e.join(",")}function g(t,e){e=e||{};o(e,function(e,r){if(e==null){return}var a=t[r];if(!n.hasClass(r)){t[r]=u(a,e,true)}else{e=i.normalizeToArray(e);a=i.normalizeToArray(a);var o=i.mappingToExists(a,e);t[r]=l(o,function(t){return t.option&&t.exist?u(t.exist,t.option,true):t.exist||t.option})}})}t.exports=c},function(t,e,r){"use strict";var a=r(3);var i=r(6);var n=r(5);var o=r(19);var s=i.encodeHTML;var l=i.addCommas;var u=o.extend({type:"series.__base__",seriesIndex:0,coordinateSystem:null,defaultOption:null,legendDataProvider:null,init:function(t,e,r,a){this.seriesIndex=this.componentIndex;this.mergeDefaultAndTheme(t,r);this._dataBeforeProcessed=this.getInitialData(t,r);this._data=this._dataBeforeProcessed.cloneShallow()},mergeDefaultAndTheme:function(t,e){a.merge(t,e.getTheme().get(this.subType));a.merge(t,this.getDefaultOption());n.defaultEmphasis(t.label,["position","show","textStyle","distance","formatter"]);var r=t.data||[];for(var i=0;i<r.length;i++){if(r[i]&&r[i].label){n.defaultEmphasis(r[i].label,["position","show","textStyle","distance","formatter"])}}},mergeOption:function(t,e){t=a.merge(this.option,t,true);var r=this.getInitialData(t,e);if(r){this._data=r;this._dataBeforeProcessed=r.cloneShallow()}},getInitialData:function(){},getData:function(){return this._data},setData:function(t){this._data=t},getRawData:function(){return this._dataBeforeProcessed},getRawDataArray:function(){return this.option.data},coordDimToDataDim:function(t){return[t]},dataDimToCoordDim:function(t){return t},getBaseAxis:function(){var t=this.coordinateSystem;return t&&t.getBaseAxis&&t.getBaseAxis()},formatTooltip:function(t,e){var r=this._data;var i=this.getRawValue(t);var n=a.isArray(i)?a.map(i,l).join(", "):l(i);var o=r.getName(t);var u=r.getItemVisual(t,"color");var h='<span style="display:inline-block;margin-right:5px;'+"border-radius:10px;width:9px;height:9px;background-color:"+u+'"></span>';return!e?s(this.name)+"<br />"+h+(o?s(o)+" : "+n:n):h+s(this.name)+" : "+n},restoreData:function(){this._data=this._dataBeforeProcessed.cloneShallow()}});a.mixin(u,n.dataFormatMixin);t.exports=u},function(t,e,r){var a=r(29);var i=r(20);var n=r(9);var o=function(){this.group=new a;this.uid=i.getUID("viewComponent")};o.prototype={constructor:o,init:function(t,e){},render:function(t,e,r,a){},dispose:function(){}};var s=o.prototype;s.updateView=s.updateLayout=s.updateVisual=function(t,e,r,a){};n.enableClassExtend(o);n.enableClassManagement(o,{registerWhenExtend:true});t.exports=o},function(t,e,r){var a=r(3);var i=r(30);var n=r(15);var o=function(t){t=t||{};i.call(this,t);for(var e in t){this[e]=t[e]}this._children=[];this.__storage=null;this.__dirty=true};o.prototype={constructor:o,type:"group",children:function(){return this._children.slice()},childAt:function(t){return this._children[t]},childOfName:function(t){var e=this._children;for(var r=0;r<e.length;r++){if(e[r].name===t){return e[r]}}},childCount:function(){return this._children.length},add:function(t){if(t&&t!==this&&t.parent!==this){this._children.push(t);this._doAdd(t)}return this},addBefore:function(t,e){if(t&&t!==this&&t.parent!==this&&e&&e.parent===this){var r=this._children;var a=r.indexOf(e);if(a>=0){r.splice(a,0,t);this._doAdd(t)}}return this},_doAdd:function(t){if(t.parent){t.parent.remove(t)}t.parent=this;var e=this.__storage;var r=this.__zr;if(e&&e!==t.__storage){e.addToMap(t);if(t instanceof o){t.addChildrenToStorage(e)}}r&&r.refresh()},remove:function(t){var e=this.__zr;var r=this.__storage;var i=this._children;var n=a.indexOf(i,t);if(n<0){return this}i.splice(n,1);t.parent=null;if(r){r.delFromMap(t.id);if(t instanceof o){t.delChildrenFromStorage(r)}}e&&e.refresh();return this},removeAll:function(){var t=this._children;var e=this.__storage;var r;var a;for(a=0;a<t.length;a++){r=t[a];if(e){e.delFromMap(r.id);if(r instanceof o){r.delChildrenFromStorage(e)}}r.parent=null}t.length=0;return this},eachChild:function(t,e){var r=this._children;for(var a=0;a<r.length;a++){var i=r[a];t.call(e,i,a)}return this},traverse:function(t,e){for(var r=0;r<this._children.length;r++){var a=this._children[r];t.call(e,a);if(a.type==="group"){a.traverse(t,e)}}return this},addChildrenToStorage:function(t){for(var e=0;e<this._children.length;e++){var r=this._children[e];t.addToMap(r);if(r instanceof o){r.addChildrenToStorage(t)}}},delChildrenFromStorage:function(t){for(var e=0;e<this._children.length;e++){var r=this._children[e];t.delFromMap(r.id);if(r instanceof o){r.delChildrenFromStorage(t)}}},dirty:function(){this.__dirty=true;this.__zr&&this.__zr.refresh();return this},getBoundingRect:function(t){var e=null;var r=new n(0,0,0,0);var a=t||this._children;var i=[];for(var o=0;o<a.length;o++){var s=a[o];if(s.ignore||s.invisible){continue}var l=s.getBoundingRect();var u=s.getLocalTransform(i);if(u){r.copy(l);r.applyTransform(u);e=e||r.clone();e.union(r)}else{e=e||l.clone();e.union(l)}}return e||r}};a.inherits(o,i);t.exports=o},function(t,e,r){"use strict";var a=r(31);var i=r(32);var n=r(33);var o=r(34);var s=r(3);var l=function(t){n.call(this,t);i.call(this,t);o.call(this,t);this.id=t.id||a()};l.prototype={type:"element",name:"",__zr:null,ignore:false,clipPath:null,drift:function(t,e){switch(this.draggable){case"horizontal":e=0;break;case"vertical":t=0;break}var r=this.transform;if(!r){r=this.transform=[1,0,0,1,0,0]}r[4]+=t;r[5]+=e;this.decomposeTransform();this.dirty()},beforeUpdate:function(){},afterUpdate:function(){},update:function(){this.updateTransform()},traverse:function(t,e){},attrKV:function(t,e){if(t==="position"||t==="scale"||t==="origin"){if(e){var r=this[t];if(!r){r=this[t]=[]}r[0]=e[0];r[1]=e[1]}}else{this[t]=e}},hide:function(){this.ignore=true;this.__zr&&this.__zr.refresh()},show:function(){this.ignore=false;this.__zr&&this.__zr.refresh()},attr:function(t,e){if(typeof t==="string"){this.attrKV(t,e)}else if(s.isObject(t)){for(var r in t){if(t.hasOwnProperty(r)){this.attrKV(r,t[r])}}}this.dirty();return this},setClipPath:function(t){var e=this.__zr;if(e){t.addSelfToZr(e)}if(this.clipPath&&this.clipPath!==t){this.removeClipPath()}this.clipPath=t;t.__zr=e;t.__clipTarget=this;this.dirty()},removeClipPath:function(){var t=this.clipPath;if(t){if(t.__zr){t.removeSelfFromZr(t.__zr)}t.__zr=null;t.__clipTarget=null;this.clipPath=null;this.dirty()}},addSelfToZr:function(t){this.__zr=t;var e=this.animators;if(e){for(var r=0;r<e.length;r++){t.animation.addAnimator(e[r])}}if(this.clipPath){this.clipPath.addSelfToZr(t)}},removeSelfFromZr:function(t){this.__zr=null;var e=this.animators;if(e){for(var r=0;r<e.length;r++){t.animation.removeAnimator(e[r])}}if(this.clipPath){this.clipPath.removeSelfFromZr(t)}}};s.mixin(l,o);s.mixin(l,n);s.mixin(l,i);t.exports=l},function(t,e){var r=2311;t.exports=function(){return"zr_"+r++}},function(t,e,r){var a=Array.prototype.slice;var i=r(3);var n=i.indexOf;var o=function(){this._$handlers={}};o.prototype={constructor:o,one:function(t,e,r){var a=this._$handlers;if(!e||!t){return this}if(!a[t]){a[t]=[]}if(n(a[t],t)>=0){return this}a[t].push({h:e,one:true,ctx:r||this});return this},on:function(t,e,r){var a=this._$handlers;if(!e||!t){return this}if(!a[t]){a[t]=[]}a[t].push({h:e,one:false,ctx:r||this});return this},isSilent:function(t){var e=this._$handlers;return e[t]&&e[t].length},off:function(t,e){var r=this._$handlers;if(!t){this._$handlers={};return this}if(e){if(r[t]){var a=[];for(var i=0,n=r[t].length;i<n;i++){if(r[t][i]["h"]!=e){a.push(r[t][i])}}r[t]=a}if(r[t]&&r[t].length===0){delete r[t]}}else{delete r[t]}return this},trigger:function(t){if(this._$handlers[t]){var e=arguments;var r=e.length;if(r>3){e=a.call(e,1)}var i=this._$handlers[t];var n=i.length;for(var o=0;o<n;){switch(r){case 1:i[o]["h"].call(i[o]["ctx"]);break;case 2:i[o]["h"].call(i[o]["ctx"],e[1]);break;case 3:i[o]["h"].call(i[o]["ctx"],e[1],e[2]);break;default:i[o]["h"].apply(i[o]["ctx"],e);break}if(i[o]["one"]){i.splice(o,1);n--}else{o++}}}return this},triggerWithContext:function(t){if(this._$handlers[t]){var e=arguments;var r=e.length;if(r>4){e=a.call(e,1,e.length-1)}var i=e[e.length-1];var n=this._$handlers[t];var o=n.length;for(var s=0;s<o;){switch(r){case 1:n[s]["h"].call(i);break;case 2:n[s]["h"].call(i,e[1]);break;case 3:n[s]["h"].call(i,e[1],e[2]);break;default:n[s]["h"].apply(i,e);break}if(n[s]["one"]){n.splice(s,1);o--}else{s++}}}return this}};t.exports=o},function(t,e,r){"use strict";var a=r(17);var i=r(16);var n=a.identity;var o=5e-5;function s(t){return t>o||t<-o}var l=function(t){t=t||{};if(!t.position){this.position=[0,0]}if(t.rotation==null){this.rotation=0}if(!t.scale){this.scale=[1,1]}this.origin=this.origin||null};var u=l.prototype;u.transform=null;u.needLocalTransform=function(){return s(this.rotation)||s(this.position[0])||s(this.position[1])||s(this.scale[0]-1)||s(this.scale[1]-1)};u.updateTransform=function(){var t=this.parent;var e=t&&t.transform;var r=this.needLocalTransform();var i=this.transform;if(!(r||e)){i&&n(i);return}i=i||a.create();if(r){this.getLocalTransform(i)}else{n(i)}if(e){if(r){a.mul(i,t.transform,i)}else{a.copy(i,t.transform)}}this.transform=i;this.invTransform=this.invTransform||a.create();a.invert(this.invTransform,i)};u.getLocalTransform=function(t){t=t||[];n(t);var e=this.origin;var r=this.scale;var i=this.rotation;var o=this.position;if(e){t[4]-=e[0];t[5]-=e[1]}a.scale(t,t,r);if(i){a.rotate(t,t,i)}if(e){t[4]+=e[0];t[5]+=e[1]}t[4]+=o[0];t[5]+=o[1];return t};u.setTransform=function(t){var e=this.transform;if(e){t.transform(e[0],e[1],e[2],e[3],e[4],e[5])}};var h=[];u.decomposeTransform=function(){if(!this.transform){return}var t=this.parent;var e=this.transform;if(t&&t.transform){a.mul(h,t.invTransform,e);e=h}var r=e[0]*e[0]+e[1]*e[1];var i=e[2]*e[2]+e[3]*e[3];var n=this.position;var o=this.scale;if(s(r-1)){r=Math.sqrt(r)}if(s(i-1)){i=Math.sqrt(i)}if(e[0]<0){r=-r}if(e[3]<0){i=-i}n[0]=e[4];n[1]=e[5];o[0]=r;o[1]=i;this.rotation=Math.atan2(-e[1]/i,e[0]/r)};u.transformCoordToLocal=function(t,e){var r=[t,e];var a=this.invTransform;if(a){i.applyTransform(r,r,a)}return r};u.transformCoordToGlobal=function(t,e){var r=[t,e];var a=this.transform;if(a){i.applyTransform(r,r,a)}return r};t.exports=l},function(t,e,r){"use strict";var a=r(35);var i=r(3);var n=i.isString;var o=i.isFunction;var s=i.isObject;var l=r(39);var u=function(){this.animators=[]};u.prototype={constructor:u,animate:function(t,e){var r;var n=false;var o=this;var s=this.__zr;if(t){var u=t.split(".");var h=o;n=u[0]==="shape";for(var c=0,v=u.length;c<v;c++){if(!h){continue}h=h[u[c]]}if(h){r=h}}else{r=o}if(!r){l('Property "'+t+'" is not existed in element '+o.id);return}var f=o.animators;var d=new a(r,e);d.during(function(t){o.dirty(n)}).done(function(){f.splice(i.indexOf(f,d),1)});f.push(d);if(s){s.animation.addAnimator(d)}return d},stopAnimation:function(t){var e=this.animators;var r=e.length;for(var a=0;a<r;a++){e[a].stop(t)}e.length=0;return this},animateTo:function(t,e,r,a,i){if(n(r)){i=a;a=r;r=0}else if(o(a)){i=a;a="linear";r=0}else if(o(r)){i=r;r=0}else if(o(e)){i=e;e=500}else if(!e){e=500}this.stopAnimation();this._animateToShallow("",this,t,e,r,a,i);var s=this.animators.slice();var l=s.length;function u(){l--;if(!l){i&&i()}}if(!l){i&&i()}for(var h=0;h<s.length;h++){s[h].done(u).start(a)}},_animateToShallow:function(t,e,r,a,n){var o={};var l=0;for(var u in r){if(e[u]!=null){if(s(r[u])&&!i.isArrayLike(r[u])){this._animateToShallow(t?t+"."+u:u,e[u],r[u],a,n)}else{o[u]=r[u];l++}}else if(r[u]!=null){if(!t){this.attr(u,r[u])}else{var h={};h[t]={};h[t][u]=r[u];this.attr(h)}}}if(l>0){this.animate(t,false).when(a==null?500:a,o).delay(n||0)}return this}};t.exports=u},function(t,e,r){var a=r(36);var i=r(38);var n=r(3);var o=n.isArrayLike;var s=Array.prototype.slice;function l(t,e){return t[e]}function u(t,e,r){t[e]=r}function h(t,e,r){return(e-t)*r+t}function c(t,e,r){return r>.5?e:t}function v(t,e,r,a,i){var n=t.length;if(i==1){for(var o=0;o<n;o++){a[o]=h(t[o],e[o],r)}}else{var s=t[0].length;for(var o=0;o<n;o++){for(var l=0;l<s;l++){a[o][l]=h(t[o][l],e[o][l],r)}}}}function f(t,e,r){var a=t.length;var i=e.length;if(a===i){return}var n=a>i;if(n){t.length=i}else{for(var o=a;o<i;o++){t.push(r===1?e[o]:s.call(e[o]))}}}function d(t,e,r){if(t===e){return true}var a=t.length;if(a!==e.length){return false}if(r===1){for(var i=0;i<a;i++){if(t[i]!==e[i]){return false}}}else{var n=t[0].length;for(var i=0;i<a;i++){for(var o=0;o<n;o++){if(t[i][o]!==e[i][o]){return false}}}}return true}function p(t,e,r,a,i,n,o,s,l){var u=t.length;if(l==1){for(var h=0;h<u;h++){s[h]=g(t[h],e[h],r[h],a[h],i,n,o)}}else{var c=t[0].length;for(var h=0;h<u;h++){for(var v=0;v<c;v++){s[h][v]=g(t[h][v],e[h][v],r[h][v],a[h][v],i,n,o)}}}}function g(t,e,r,a,i,n,o){var s=(r-t)*.5;var l=(a-e)*.5;return(2*(e-r)+s+l)*o+(-3*(e-r)-2*s-l)*n+s*i+e}function m(t){if(o(t)){var e=t.length;if(o(t[0])){var r=[];for(var a=0;a<e;a++){r.push(s.call(t[a]))}return r}return s.call(t)}return t}function y(t){t[0]=Math.floor(t[0]);t[1]=Math.floor(t[1]);t[2]=Math.floor(t[2]);return"rgba("+t.join(",")+")"}function x(t,e,r,n,s){var l=t._getter;var u=t._setter;var m=e==="spline";var x=n.length;if(!x){return}var _=n[0].value;var w=o(_);var b=false;var M=false;var S=w&&o(_[0])?2:1;var I;n.sort(function(t,e){return t.time-e.time});I=n[x-1].time;var A=[];var T=[];var C=n[0].value;var L=true;for(var D=0;D<x;D++){A.push(n[D].time/I);var k=n[D].value;if(!(w&&d(k,C,S)||!w&&k===C)){L=false}C=k;if(typeof k=="string"){var P=i.parse(k);if(P){k=P;b=true}else{M=true}}T.push(k)}if(L){return}if(w){var z=T[x-1];for(var D=0;D<x-1;D++){f(T[D],z,S)}f(l(t._target,s),z,S)}var R=0;var E=0;var O;var V;var N;var B;var G;var F;if(b){var W=[0,0,0,0]}var H=function(t,e){var r;if(e<E){O=Math.min(R+1,x-1);for(r=O;r>=0;r--){if(A[r]<=e){break}}r=Math.min(r,x-2)}else{for(r=R;r<x;r++){if(A[r]>e){break}}r=Math.min(r-1,x-2)}R=r;E=e;var a=A[r+1]-A[r];if(a===0){return}else{V=(e-A[r])/a}if(m){B=T[r];N=T[r===0?r:r-1];G=T[r>x-2?x-1:r+1];F=T[r>x-3?x-1:r+2];if(w){p(N,B,G,F,V,V*V,V*V*V,l(t,s),S)}else{var i;if(b){i=p(N,B,G,F,V,V*V,V*V*V,W,1);i=y(W)}else if(M){return c(B,G,V)}else{i=g(N,B,G,F,V,V*V,V*V*V)}u(t,s,i)}}else{if(w){v(T[r],T[r+1],V,l(t,s),S)}else{var i;if(b){v(T[r],T[r+1],V,W,1);i=y(W)}else if(M){return c(T[r],T[r+1],V)}else{i=h(T[r],T[r+1],V)}u(t,s,i)}}};var Z=new a({target:t._target,life:I,loop:t._loop,delay:t._delay,onframe:H,ondestroy:r});if(e&&e!=="spline"){Z.easing=e}return Z}var _=function(t,e,r,a){this._tracks={};this._target=t;this._loop=e||false;this._getter=r||l;this._setter=a||u;this._clipCount=0;this._delay=0;this._doneList=[];this._onframeList=[];this._clipList=[]};_.prototype={when:function(t,e){var r=this._tracks;for(var a in e){if(!r[a]){r[a]=[];var i=this._getter(this._target,a);if(i==null){continue}if(t!==0){r[a].push({time:0,value:m(i)})}}r[a].push({time:t,value:e[a]})}return this},during:function(t){this._onframeList.push(t);return this},_doneCallback:function(){this._tracks={};this._clipList.length=0;var t=this._doneList;var e=t.length;for(var r=0;r<e;r++){t[r].call(this)}},start:function(t){var e=this;var r=0;var a=function(){r--;if(!r){e._doneCallback()}};var i;for(var n in this._tracks){var o=x(this,t,a,this._tracks[n],n);if(o){this._clipList.push(o);r++;if(this.animation){this.animation.addClip(o)}i=o}}if(i){var s=i.onframe;i.onframe=function(t,r){s(t,r);for(var a=0;a<e._onframeList.length;a++){e._onframeList[a](t,r)}}}if(!r){this._doneCallback()}return this},stop:function(t){var e=this._clipList;var r=this.animation;for(var a=0;a<e.length;a++){var i=e[a];if(t){i.onframe(this._target,1)}r&&r.removeClip(i)}e.length=0},delay:function(t){this._delay=t;return this},done:function(t){if(t){this._doneList.push(t)}return this},getClips:function(){return this._clipList}};t.exports=_},function(t,e,r){var a=r(37);function i(t){this._target=t.target;this._life=t.life||1e3;this._delay=t.delay||0;this._initialized=false;this.loop=t.loop==null?false:t.loop;this.gap=t.gap||0;this.easing=t.easing||"Linear";this.onframe=t.onframe;this.ondestroy=t.ondestroy;this.onrestart=t.onrestart}i.prototype={constructor:i,step:function(t){if(!this._initialized){this._startTime=(new Date).getTime()+this._delay;this._initialized=true}var e=(t-this._startTime)/this._life;if(e<0){return}e=Math.min(e,1);var r=this.easing;var i=typeof r=="string"?a[r]:r;var n=typeof i==="function"?i(e):e;this.fire("frame",n);if(e==1){if(this.loop){this.restart();return"restart"}this._needsRemove=true;return"destroy"}return null},restart:function(){var t=(new Date).getTime();var e=(t-this._startTime)%this._life;this._startTime=(new Date).getTime()-e+this.gap;this._needsRemove=false},fire:function(t,e){t="on"+t;if(this[t]){this[t](this._target,e)}}};t.exports=i},function(t,e){var r={linear:function(t){return t},quadraticIn:function(t){return t*t},quadraticOut:function(t){return t*(2-t)},quadraticInOut:function(t){if((t*=2)<1){return.5*t*t}return-.5*(--t*(t-2)-1)},cubicIn:function(t){return t*t*t},cubicOut:function(t){return--t*t*t+1},cubicInOut:function(t){if((t*=2)<1){return.5*t*t*t}return.5*((t-=2)*t*t+2)},quarticIn:function(t){return t*t*t*t},quarticOut:function(t){return 1- --t*t*t*t},quarticInOut:function(t){if((t*=2)<1){return.5*t*t*t*t}return-.5*((t-=2)*t*t*t-2)},quinticIn:function(t){return t*t*t*t*t},quinticOut:function(t){return--t*t*t*t*t+1},quinticInOut:function(t){if((t*=2)<1){return.5*t*t*t*t*t}return.5*((t-=2)*t*t*t*t+2)},sinusoidalIn:function(t){return 1-Math.cos(t*Math.PI/2)},sinusoidalOut:function(t){return Math.sin(t*Math.PI/2)},sinusoidalInOut:function(t){return.5*(1-Math.cos(Math.PI*t))},
exponentialIn:function(t){return t===0?0:Math.pow(1024,t-1)},exponentialOut:function(t){return t===1?1:1-Math.pow(2,-10*t)},exponentialInOut:function(t){if(t===0){return 0}if(t===1){return 1}if((t*=2)<1){return.5*Math.pow(1024,t-1)}return.5*(-Math.pow(2,-10*(t-1))+2)},circularIn:function(t){return 1-Math.sqrt(1-t*t)},circularOut:function(t){return Math.sqrt(1- --t*t)},circularInOut:function(t){if((t*=2)<1){return-.5*(Math.sqrt(1-t*t)-1)}return.5*(Math.sqrt(1-(t-=2)*t)+1)},elasticIn:function(t){var e;var r=.1;var a=.4;if(t===0){return 0}if(t===1){return 1}if(!r||r<1){r=1;e=a/4}else{e=a*Math.asin(1/r)/(2*Math.PI)}return-(r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/a))},elasticOut:function(t){var e;var r=.1;var a=.4;if(t===0){return 0}if(t===1){return 1}if(!r||r<1){r=1;e=a/4}else{e=a*Math.asin(1/r)/(2*Math.PI)}return r*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/a)+1},elasticInOut:function(t){var e;var r=.1;var a=.4;if(t===0){return 0}if(t===1){return 1}if(!r||r<1){r=1;e=a/4}else{e=a*Math.asin(1/r)/(2*Math.PI)}if((t*=2)<1){return-.5*(r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/a))}return r*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/a)*.5+1},backIn:function(t){var e=1.70158;return t*t*((e+1)*t-e)},backOut:function(t){var e=1.70158;return--t*t*((e+1)*t+e)+1},backInOut:function(t){var e=1.70158*1.525;if((t*=2)<1){return.5*(t*t*((e+1)*t-e))}return.5*((t-=2)*t*((e+1)*t+e)+2)},bounceIn:function(t){return 1-r.bounceOut(1-t)},bounceOut:function(t){if(t<1/2.75){return 7.5625*t*t}else if(t<2/2.75){return 7.5625*(t-=1.5/2.75)*t+.75}else if(t<2.5/2.75){return 7.5625*(t-=2.25/2.75)*t+.9375}else{return 7.5625*(t-=2.625/2.75)*t+.984375}},bounceInOut:function(t){if(t<.5){return r.bounceIn(t*2)*.5}return r.bounceOut(t*2-1)*.5+.5}};t.exports=r},function(t,e){var r={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function a(t){t=Math.round(t);return t<0?0:t>255?255:t}function i(t){t=Math.round(t);return t<0?0:t>360?360:t}function n(t){return t<0?0:t>1?1:t}function o(t){if(t.length&&t.charAt(t.length-1)==="%"){return a(parseFloat(t)/100*255)}return a(parseInt(t,10))}function s(t){if(t.length&&t.charAt(t.length-1)==="%"){return n(parseFloat(t)/100)}return n(parseFloat(t))}function l(t,e,r){if(r<0){r+=1}else if(r>1){r-=1}if(r*6<1){return t+(e-t)*r*6}if(r*2<1){return e}if(r*3<2){return t+(e-t)*(2/3-r)*6}return t}function u(t,e,r){return t+(e-t)*r}function h(t){if(!t){return}t=t+"";var e=t.replace(/ /g,"").toLowerCase();if(e in r){return r[e].slice()}if(e.charAt(0)==="#"){if(e.length===4){var a=parseInt(e.substr(1),16);if(!(a>=0&&a<=4095)){return}return[(a&3840)>>4|(a&3840)>>8,a&240|(a&240)>>4,a&15|(a&15)<<4,1]}else if(e.length===7){var a=parseInt(e.substr(1),16);if(!(a>=0&&a<=16777215)){return}return[(a&16711680)>>16,(a&65280)>>8,a&255,1]}return}var i=e.indexOf("("),n=e.indexOf(")");if(i!==-1&&n+1===e.length){var l=e.substr(0,i);var u=e.substr(i+1,n-(i+1)).split(",");var h=1;switch(l){case"rgba":if(u.length!==4){return}h=s(u.pop());case"rgb":if(u.length!==3){return}return[o(u[0]),o(u[1]),o(u[2]),h];case"hsla":if(u.length!==4){return}u[3]=s(u[3]);return c(u);case"hsl":if(u.length!==3){return}return c(u);default:return}}return}function c(t){var e=(parseFloat(t[0])%360+360)%360/360;var r=s(t[1]);var i=s(t[2]);var n=i<=.5?i*(r+1):i+r-i*r;var o=i*2-n;var u=[a(l(o,n,e+1/3)*255),a(l(o,n,e)*255),a(l(o,n,e-1/3)*255)];if(t.length===4){u[3]=t[3]}return u}function v(t){if(!t){return}var e=t[0]/255;var r=t[1]/255;var a=t[2]/255;var i=Math.min(e,r,a);var n=Math.max(e,r,a);var o=n-i;var s=(n+i)/2;var l;var u;if(o===0){l=0;u=0}else{if(s<.5){u=o/(n+i)}else{u=o/(2-n-i)}var h=((n-e)/6+o/2)/o;var c=((n-r)/6+o/2)/o;var v=((n-a)/6+o/2)/o;if(e===n){l=v-c}else if(r===n){l=1/3+h-v}else if(a===n){l=2/3+c-h}if(l<0){l+=1}if(l>1){l-=1}}var f=[l*360,u,s];if(t[3]!=null){f.push(t[3])}return f}function f(t,e){var r=h(t);if(r){for(var a=0;a<3;a++){if(e<0){r[a]=r[a]*(1-e)|0}else{r[a]=(255-r[a])*e+r[a]|0}}return _(r,r.length===4?"rgba":"rgb")}}function d(t,e){var r=h(t);if(r){return((1<<24)+(r[0]<<16)+(r[1]<<8)+ +r[2]).toString(16).slice(1)}}function p(t,e,r){if(!(e&&e.length)||!(t>=0&&t<=1)){return}r=r||[0,0,0,0];var i=t*(e.length-1);var n=Math.floor(i);var o=Math.ceil(i);var s=e[n];var l=e[o];var h=i-n;r[0]=a(u(s[0],l[0],h));r[1]=a(u(s[1],l[1],h));r[2]=a(u(s[2],l[2],h));r[3]=a(u(s[3],l[3],h));return r}function g(t,e,r){if(!(e&&e.length)||!(t>=0&&t<=1)){return}var i=t*(e.length-1);var o=Math.floor(i);var s=Math.ceil(i);var l=h(e[o]);var c=h(e[s]);var v=i-o;var f=_([a(u(l[0],c[0],v)),a(u(l[1],c[1],v)),a(u(l[2],c[2],v)),n(u(l[3],c[3],v))],"rgba");return r?{color:f,leftIndex:o,rightIndex:s,value:i}:f}function m(t,e){if(t.length!==2||t[1]<t[0]){return}var r=g(t[0],e,true);var a=g(t[1],e,true);var i=[{color:r.color,offset:0}];var n=a.value-r.value;var o=Math.max(r.value,r.rightIndex);var s=Math.min(a.value,a.leftIndex);for(var l=o;n>0&&l<=s;l++){i.push({color:e[l],offset:(l-r.value)/n})}i.push({color:a.color,offset:1});return i}function y(t,e,r,a){t=h(t);if(t){t=v(t);e!=null&&(t[0]=i(e));r!=null&&(t[1]=s(r));a!=null&&(t[2]=s(a));return _(c(t),"rgba")}}function x(t,e){t=h(t);if(t&&e!=null){t[3]=n(e);return _(t,"rgba")}}function _(t,e){if(e==="rgb"||e==="hsv"||e==="hsl"){t=t.slice(0,3)}return e+"("+t.join(",")+")"}t.exports={parse:h,lift:f,toHex:d,fastMapToColor:p,mapToColor:g,mapIntervalToColor:m,modifyHSL:y,modifyAlpha:x,stringify:_}},function(t,e,r){var a=r(40);t.exports=function(){if(a.debugMode===0){return}else if(a.debugMode==1){for(var t in arguments){throw new Error(arguments[t])}}else if(a.debugMode>1){for(var t in arguments){console.log(arguments[t])}}}},function(t,e){var r=1;if(typeof window!=="undefined"){r=Math.max(window.devicePixelRatio||1,1)}var a={debugMode:0,devicePixelRatio:r};t.exports=a},function(t,e,r){var a=r(29);var i=r(20);var n=r(9);function o(){this.group=new a;this.uid=i.getUID("viewChart")}o.prototype={type:"chart",init:function(t,e){},render:function(t,e,r,a){},highlight:function(t,e,r,a){u(t.getData(),a,"emphasis")},downplay:function(t,e,r,a){u(t.getData(),a,"normal")},remove:function(t,e){this.group.removeAll()},dispose:function(){}};var s=o.prototype;s.updateView=s.updateLayout=s.updateVisual=function(t,e,r,a){this.render(t,e,r,a)};function l(t,e){if(t){t.trigger(e);if(t.type==="group"){for(var r=0;r<t.childCount();r++){l(t.childAt(r),e)}}}}function u(t,e,r){if(e.dataIndex!=null){var a=t.getItemGraphicEl(e.dataIndex);l(a,r)}else if(e.name){var i=t.indexOfName(e.name);var a=t.getItemGraphicEl(i);l(a,r)}else{t.eachItemGraphicEl(function(t){l(t,r)})}}n.enableClassExtend(o);n.enableClassManagement(o,{registerWhenExtend:true});t.exports=o},function(t,e,r){"use strict";var a=r(3);var i=r(43);var n=Math.round;var o=r(44);var s=r(38);var l=r(17);var u=r(16);var h=r(4);var c={};c.Group=r(29);c.Image=r(59);c.Text=r(62);c.Circle=r(63);c.Sector=r(64);c.Ring=r(65);c.Polygon=r(66);c.Polyline=r(70);c.Rect=r(71);c.Line=r(72);c.BezierCurve=r(73);c.Arc=r(74);c.LinearGradient=r(75);c.RadialGradient=r(76);c.BoundingRect=r(15);c.extendShape=function(t){return o.extend(t)};c.extendPath=function(t,e){return i.extendFromString(t,e)};c.makePath=function(t,e,r,a){var n=i.createFromString(t,e);var o=n.getBoundingRect();if(r){var s=o.width/o.height;if(a==="center"){var l=r.height*s;var u;if(l<=r.width){u=r.height}else{l=r.width;u=l/s}var h=r.x+r.width/2;var c=r.y+r.height/2;r.x=h-l/2;r.y=c-u/2;r.width=l;r.height=u}this.resizePath(n,r)}return n};c.mergePath=i.mergePath,c.resizePath=function(t,e){if(!t.applyTransform){return}var r=t.getBoundingRect();var a=r.calculateTransform(e);t.applyTransform(a)};c.subPixelOptimizeLine=function(t){var e=c.subPixelOptimize;var r=t.shape;var a=t.style.lineWidth;if(n(r.x1*2)===n(r.x2*2)){r.x1=r.x2=e(r.x1,a,true)}if(n(r.y1*2)===n(r.y2*2)){r.y1=r.y2=e(r.y1,a,true)}return t};c.subPixelOptimizeRect=function(t){var e=c.subPixelOptimize;var r=t.shape;var a=t.style.lineWidth;var i=r.x;var n=r.y;var o=r.width;var s=r.height;r.x=e(r.x,a,true);r.y=e(r.y,a,true);r.width=Math.max(e(i+o,a,false)-r.x,o===0?0:1);r.height=Math.max(e(n+s,a,false)-r.y,s===0?0:1);return t};c.subPixelOptimize=function(t,e,r){var a=n(t*2);return(a+n(e))%2===0?a/2:(a+(r?1:-1))/2};function v(t){if(t.__isHover){return}if(t.__hoverStlDirty){var e=t.style.stroke;var r=t.style.fill;var a=t.__hoverStl;var i=s.lift;a.fill=a.fill||r&&(r instanceof h?r:i(r,-.1));a.stroke=a.stroke||e&&(e instanceof h?e:i(e,-.1));var n={};for(var o in a){if(a.hasOwnProperty(o)){n[o]=t.style[o]}}t.__normalStl=n;t.__hoverStlDirty=false}t.setStyle(t.__hoverStl);t.z2+=1;t.__isHover=true}function f(t){if(!t.__isHover){return}var e=t.__normalStl;e&&t.setStyle(e);t.z2-=1;t.__isHover=false}function d(t){t.type==="group"?t.traverse(function(t){if(t.type!=="group"){v(t)}}):v(t)}function p(t){t.type==="group"?t.traverse(function(t){if(t.type!=="group"){f(t)}}):f(t)}function g(t,e){t.__hoverStl=t.hoverStyle||e||{};t.__hoverStlDirty=true}function m(){!this.__isEmphasis&&d(this)}function y(){!this.__isEmphasis&&p(this)}function x(){this.__isEmphasis=true;d(this)}function _(){this.__isEmphasis=false;p(this)}c.setHoverStyle=function(t,e){t.type==="group"?t.traverse(function(t){if(t.type!=="group"){g(t,e)}}):g(t,e);t.on("mouseover",m).on("mouseout",y);t.on("emphasis",x).on("normal",_)};c.setText=function(t,e,r){var i=e.getShallow("position")||"inside";var n=i.indexOf("inside")>=0?"white":r;var o=e.getModel("textStyle");a.extend(t,{textDistance:e.getShallow("distance")||5,textFont:o.getFont(),textPosition:i,textFill:o.getTextColor()||n})};function w(t,e,r,a,i){var n=t?"Update":"";var o=a&&a.getShallow("animationDuration"+n);var s=a&&a.getShallow("animationEasing"+n);a&&a.getShallow("animation")?e.animateTo(r,o,s,i):(e.attr(r),i&&i())}c.updateProps=a.curry(w,true);c.initProps=a.curry(w,false);c.getTransform=function(t,e){var r=l.identity([]);while(t&&t!==e){l.mul(r,t.getLocalTransform(),r);t=t.parent}return r};c.applyTransform=function(t,e,r){if(r){e=l.invert([],e)}return u.applyTransform([],t,e)};c.transformDirection=function(t,e,r){var a=e[4]===0||e[5]===0||e[0]===0?1:Math.abs(2*e[4]/e[0]);var i=e[4]===0||e[5]===0||e[2]===0?1:Math.abs(2*e[4]/e[2]);var n=[t==="left"?-a:t==="right"?a:0,t==="top"?-i:t==="bottom"?i:0];n=c.applyTransform(n,e,r);return Math.abs(n[0])>Math.abs(n[1])?n[0]>0?"right":"left":n[1]>0?"bottom":"top"};t.exports=c},function(t,e,r){var a=r(44);var i=r(48);var n=r(58);var o=r(17);var s=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];var l=Math.sqrt;var u=Math.sin;var h=Math.cos;var c=Math.PI;var v=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])};var f=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(v(t)*v(e))};var d=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(f(t,e))};function p(t,e,r,a,i,n,o,s,v,p,g){var m=v*(c/180);var y=h(m)*(t-r)/2+u(m)*(e-a)/2;var x=-1*u(m)*(t-r)/2+h(m)*(e-a)/2;var _=y*y/(o*o)+x*x/(s*s);if(_>1){o*=l(_);s*=l(_)}var w=(i===n?-1:1)*l((o*o*(s*s)-o*o*(x*x)-s*s*(y*y))/(o*o*(x*x)+s*s*(y*y)))||0;var b=w*o*x/s;var M=w*-s*y/o;var S=(t+r)/2+h(m)*b-u(m)*M;var I=(e+a)/2+u(m)*b+h(m)*M;var A=d([1,0],[(y-b)/o,(x-M)/s]);var T=[(y-b)/o,(x-M)/s];var C=[(-1*y-b)/o,(-1*x-M)/s];var L=d(T,C);if(f(T,C)<=-1){L=c}if(f(T,C)>=1){L=0}if(n===0&&L>0){L=L-2*c}if(n===1&&L<0){L=L+2*c}g.addData(p,S,I,o,s,A,L,m,n)}function g(t){if(!t){return[]}var e=t.replace(/-/g," -").replace(/  /g," ").replace(/ /g,",").replace(/,,/g,",");var r;for(r=0;r<s.length;r++){e=e.replace(new RegExp(s[r],"g"),"|"+s[r])}var a=e.split("|");var n=0;var o=0;var l=new i;var u=i.CMD;var h;for(r=1;r<a.length;r++){var c=a[r];var v=c.charAt(0);var f=0;var d=c.slice(1).replace(/e,-/g,"e-").split(",");var g;if(d.length>0&&d[0]===""){d.shift()}for(var m=0;m<d.length;m++){d[m]=parseFloat(d[m])}while(f<d.length&&!isNaN(d[f])){if(isNaN(d[0])){break}var y;var x;var _;var w;var b;var M;var S;var I=n;var A=o;switch(v){case"l":n+=d[f++];o+=d[f++];g=u.L;l.addData(g,n,o);break;case"L":n=d[f++];o=d[f++];g=u.L;l.addData(g,n,o);break;case"m":n+=d[f++];o+=d[f++];g=u.M;l.addData(g,n,o);v="l";break;case"M":n=d[f++];o=d[f++];g=u.M;l.addData(g,n,o);v="L";break;case"h":n+=d[f++];g=u.L;l.addData(g,n,o);break;case"H":n=d[f++];g=u.L;l.addData(g,n,o);break;case"v":o+=d[f++];g=u.L;l.addData(g,n,o);break;case"V":o=d[f++];g=u.L;l.addData(g,n,o);break;case"C":g=u.C;l.addData(g,d[f++],d[f++],d[f++],d[f++],d[f++],d[f++]);n=d[f-2];o=d[f-1];break;case"c":g=u.C;l.addData(g,d[f++]+n,d[f++]+o,d[f++]+n,d[f++]+o,d[f++]+n,d[f++]+o);n+=d[f-2];o+=d[f-1];break;case"S":y=n;x=o;var T=l.len();var C=l.data;if(h===u.C){y+=n-C[T-4];x+=o-C[T-3]}g=u.C;I=d[f++];A=d[f++];n=d[f++];o=d[f++];l.addData(g,y,x,I,A,n,o);break;case"s":y=n;x=o;var T=l.len();var C=l.data;if(h===u.C){y+=n-C[T-4];x+=o-C[T-3]}g=u.C;I=n+d[f++];A=o+d[f++];n+=d[f++];o+=d[f++];l.addData(g,y,x,I,A,n,o);break;case"Q":I=d[f++];A=d[f++];n=d[f++];o=d[f++];g=u.Q;l.addData(g,I,A,n,o);break;case"q":I=d[f++]+n;A=d[f++]+o;n+=d[f++];o+=d[f++];g=u.Q;l.addData(g,I,A,n,o);break;case"T":y=n;x=o;var T=l.len();var C=l.data;if(h===u.Q){y+=n-C[T-4];x+=o-C[T-3]}n=d[f++];o=d[f++];g=u.Q;l.addData(g,y,x,n,o);break;case"t":y=n;x=o;var T=l.len();var C=l.data;if(h===u.Q){y+=n-C[T-4];x+=o-C[T-3]}n+=d[f++];o+=d[f++];g=u.Q;l.addData(g,y,x,n,o);break;case"A":_=d[f++];w=d[f++];b=d[f++];M=d[f++];S=d[f++];I=n,A=o;n=d[f++];o=d[f++];g=u.A;p(I,A,n,o,M,S,_,w,b,g,l);break;case"a":_=d[f++];w=d[f++];b=d[f++];M=d[f++];S=d[f++];I=n,A=o;n+=d[f++];o+=d[f++];g=u.A;p(I,A,n,o,M,S,_,w,b,g,l);break}}if(v==="z"||v==="Z"){g=u.Z;l.addData(g)}h=g}l.toStatic();return l}function m(t,e){var r=g(t);var a;e=e||{};e.buildPath=function(t){t.setData(r.data);a&&n(t,a);var e=t.getContext();if(e){t.rebuildPath(e)}};e.applyTransform=function(t){if(!a){a=o.create()}o.mul(a,t,a)};return e}t.exports={createFromString:function(t,e){return new a(m(t,e))},extendFromString:function(t,e){return a.extend(m(t,e))},mergePath:function(t,e){var r=[];var i=t.length;var n;var o;for(o=0;o<i;o++){n=t[o];if(n.__dirty){n.buildPath(n.path,n.shape)}r.push(n.path)}var s=new a(e);s.buildPath=function(t){t.appendPath(r);var e=t.getContext();if(e){t.rebuildPath(e)}};return s}}},function(t,e,r){var a=r(45);var i=r(3);var n=r(48);var o=r(51);var s=r(4);function l(t){var e=t.fill;return e!=null&&e!=="none"}function u(t){var e=t.stroke;return e!=null&&e!=="none"&&t.lineWidth>0}var h=Math.abs;function c(t){a.call(this,t);this.path=new n}c.prototype={constructor:c,type:"path",__dirtyPath:true,strokeContainThreshold:5,brush:function(t){t.save();var e=this.style;var r=this.path;var a=u(e);var i=l(e);if(this.__dirtyPath){if(i&&e.fill instanceof s){e.fill.updateCanvasGradient(this,t)}if(a&&e.stroke instanceof s){e.stroke.updateCanvasGradient(this,t)}}e.bind(t,this);this.setTransform(t);var n=e.lineDash;var o=e.lineDashOffset;var h=!!t.setLineDash;if(this.__dirtyPath||n&&!h&&a){r=this.path.beginPath(t);if(n&&!h){r.setLineDash(n);r.setLineDashOffset(o)}this.buildPath(r,this.shape);this.__dirtyPath=false}else{t.beginPath();this.path.rebuildPath(t)}i&&r.fill(t);if(n&&h){t.setLineDash(n);t.lineDashOffset=o}a&&r.stroke(t);if(e.text!=null){this.drawRectText(t,this.getBoundingRect())}t.restore()},buildPath:function(t,e){},getBoundingRect:function(){var t=this._rect;var e=this.style;var r=!t;if(r){var a=this.path;if(this.__dirtyPath){a.beginPath();this.buildPath(a,this.shape)}t=a.getBoundingRect()}this._rect=t;if(u(e)){var i=this._rectWithStroke;if(this.__dirty||r){var i=this._rectWithStroke||(this._rectWithStroke=t.clone());i.copy(t);var n=e.lineWidth;var o=e.strokeNoScale?this.getLineScale():1;if(!l(e)){n=Math.max(n,this.strokeContainThreshold)}if(o>1e-10){i.width+=n/o;i.height+=n/o;i.x-=n/o/2;i.y-=n/o/2}}return i}return t},contain:function(t,e){var r=this.transformCoordToLocal(t,e);var a=this.getBoundingRect();var i=this.style;t=r[0];e=r[1];if(a.contain(t,e)){var n=this.path.data;if(u(i)){var s=i.lineWidth;var h=i.strokeNoScale?this.getLineScale():1;if(h>1e-10){if(!l(i)){s=Math.max(s,this.strokeContainThreshold)}if(o.containStroke(n,s/h,t,e)){return true}}}if(l(i)){return o.contain(n,t,e)}}return false},dirty:function(t){if(arguments.length===0){t=true}if(t){this.__dirtyPath=t;this._rect=null}this.__dirty=true;this.__zr&&this.__zr.refresh();if(this.__clipTarget){this.__clipTarget.dirty()}},animateShape:function(t){return this.animate("shape",t)},attrKV:function(t,e){if(t==="shape"){this.setShape(e)}else{a.prototype.attrKV.call(this,t,e)}},setShape:function(t,e){var r=this.shape;if(r){if(i.isObject(t)){for(var a in t){r[a]=t[a]}}else{r[t]=e}this.dirty(true)}return this},getLineScale:function(){var t=this.transform;return t&&h(t[0]-1)>1e-10&&h(t[3]-1)>1e-10?Math.sqrt(h(t[0]*t[3]-t[2]*t[1])):1}};c.extend=function(t){var e=function(e){c.call(this,e);if(t.style){this.style.extendFrom(t.style,false)}var r=t.shape;if(r){this.shape=this.shape||{};var a=this.shape;for(var i in r){if(!a.hasOwnProperty(i)&&r.hasOwnProperty(i)){a[i]=r[i]}}}t.init&&t.init.call(this,e)};i.inherits(e,c);for(var r in t){if(r!=="style"&&r!=="shape"){e.prototype[r]=t[r]}}return e};i.inherits(c,a);t.exports=c},function(t,e,r){var a=r(3);var i=r(46);var n=r(30);var o=r(47);function s(t){t=t||{};n.call(this,t);for(var e in t){if(t.hasOwnProperty(e)&&e!=="style"){this[e]=t[e]}}this.style=new i(t.style);this._rect=null;this.__clipPaths=[]}s.prototype={constructor:s,type:"displayable",__dirty:true,invisible:false,z:0,z2:0,zlevel:0,draggable:false,dragging:false,silent:false,culling:false,cursor:"pointer",rectHover:false,beforeBrush:function(t){},afterBrush:function(t){},brush:function(t){},getBoundingRect:function(){},contain:function(t,e){return this.rectContain(t,e)},traverse:function(t,e){t.call(e,this)},rectContain:function(t,e){var r=this.transformCoordToLocal(t,e);var a=this.getBoundingRect();return a.contain(r[0],r[1])},dirty:function(){this.__dirty=true;this._rect=null;this.__zr&&this.__zr.refresh()},animateStyle:function(t){return this.animate("style",t)},attrKV:function(t,e){if(t!=="style"){n.prototype.attrKV.call(this,t,e)}else{this.style.set(e)}},setStyle:function(t,e){this.style.set(t,e);this.dirty(false);return this}};a.inherits(s,n);a.mixin(s,o);t.exports=s},function(t,e){var r=["lineCap","lineJoin","miterLimit","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor"];var a=function(t){this.extendFrom(t)};a.prototype={constructor:a,fill:"#000000",stroke:null,opacity:1,lineDash:null,lineDashOffset:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,lineWidth:1,strokeNoScale:false,text:null,textFill:"#000",textStroke:null,textPosition:"inside",textBaseline:null,textAlign:null,textVerticalAlign:null,textDistance:5,textShadowBlur:0,textShadowOffsetX:0,textShadowOffsetY:0,bind:function(t,e){var a=this.fill;var i=this.stroke;for(var n=0;n<r.length;n++){var o=r[n];if(this[o]!=null){t[o]=this[o]}}if(i!=null){var s=this.lineWidth;t.lineWidth=s/(this.strokeNoScale&&e&&e.getLineScale?e.getLineScale():1)}if(a!=null){t.fillStyle=a.canvasGradient?a.canvasGradient:a}if(i!=null){t.strokeStyle=i.canvasGradient?i.canvasGradient:i}this.opacity!=null&&(t.globalAlpha=this.opacity)},extendFrom:function(t,e){if(t){var r=this;for(var a in t){if(t.hasOwnProperty(a)&&(e||!r.hasOwnProperty(a))){r[a]=t[a]}}}},set:function(t,e){if(typeof t==="string"){this[t]=e}else{this.extendFrom(t,true)}},clone:function(){var t=new this.constructor;t.extendFrom(this,true);return t}};var i=a.prototype;var n;var o;for(o=0;o<r.length;o++){n=r[o];if(!(n in i)){i[n]=null}}t.exports=a},function(t,e,r){var a=r(14);var i=r(15);var n=new i;var o=function(){};function s(t,e){if(typeof t==="string"){if(t.lastIndexOf("%")>=0){return parseFloat(t)/100*e}return parseFloat(t)}return t}function l(t,e){t.transform(e[0],e[1],e[2],e[3],e[4],e[5])}o.prototype={constructor:o,drawRectText:function(t,e,r){var i=this.style;var o=i.text;o!=null&&(o+="");if(!o){return}var u;var h;var c=i.textPosition;var v=i.textDistance;var f=i.textAlign;var d=i.textFont||i.font;var p=i.textBaseline;var g=i.textVerticalAlign;r=r||a.getBoundingRect(o,d,f,p);var m=this.transform;var y=this.invTransform;if(m){n.copy(e);n.applyTransform(m);e=n;l(t,y)}if(c instanceof Array){u=e.x+s(c[0],e.width);h=e.y+s(c[1],e.height);f=f||"left";p=p||"top"}else{var x=a.adjustTextPositionOnRect(c,e,r,v);u=x.x;h=x.y;f=f||x.textAlign;p=p||x.textBaseline}t.textAlign=f;if(g){switch(g){case"middle":h-=r.height/2;break;case"bottom":h-=r.height;break}t.textBaseline="top"}else{t.textBaseline=p}var _=i.textFill;var w=i.textStroke;_&&(t.fillStyle=_);w&&(t.strokeStyle=w);t.font=d;t.shadowColor=i.textShadowColor;t.shadowBlur=i.textShadowBlur;t.shadowOffsetX=i.textShadowOffsetX;t.shadowOffsetY=i.textShadowOffsetY;var b=o.split("\n");for(var M=0;M<b.length;M++){_&&t.fillText(b[M],u,h);w&&t.strokeText(b[M],u,h);h+=r.lineHeight}m&&l(t,m)}};t.exports=o},function(t,e,r){"use strict";var a=r(49);var i=r(16);var n=r(50);var o=r(15);var s={M:1,L:2,C:3,Q:4,A:5,Z:6,R:7};var l=[];var u=[];var h=[];var c=[];var v=Math.min;var f=Math.max;var d=Math.cos;var p=Math.sin;var g=Math.sqrt;var m=typeof Float32Array!="undefined";var y=function(){this.data=[];this._len=0;this._ctx=null;this._xi=0;this._yi=0;this._x0=0;this._y0=0};y.prototype={constructor:y,_lineDash:null,_dashOffset:0,_dashIdx:0,_dashSum:0,getContext:function(){return this._ctx},beginPath:function(t){this._ctx=t;t&&t.beginPath();this._len=0;if(this._lineDash){this._lineDash=null;this._dashOffset=0}return this},moveTo:function(t,e){this.addData(s.M,t,e);this._ctx&&this._ctx.moveTo(t,e);this._x0=t;this._y0=e;this._xi=t;this._yi=e;return this},lineTo:function(t,e){this.addData(s.L,t,e);if(this._ctx){this._needsDash()?this._dashedLineTo(t,e):this._ctx.lineTo(t,e)}this._xi=t;this._yi=e;return this},bezierCurveTo:function(t,e,r,a,i,n){this.addData(s.C,t,e,r,a,i,n);if(this._ctx){this._needsDash()?this._dashedBezierTo(t,e,r,a,i,n):this._ctx.bezierCurveTo(t,e,r,a,i,n)}this._xi=i;this._yi=n;return this},quadraticCurveTo:function(t,e,r,a){this.addData(s.Q,t,e,r,a);if(this._ctx){this._needsDash()?this._dashedQuadraticTo(t,e,r,a):this._ctx.quadraticCurveTo(t,e,r,a)}this._xi=r;this._yi=a;return this},arc:function(t,e,r,a,i,n){this.addData(s.A,t,e,r,r,a,i-a,0,n?0:1);this._ctx&&this._ctx.arc(t,e,r,a,i,n);this._xi=d(i)*r+t;this._xi=p(i)*r+t;return this},arcTo:function(t,e,r,a,i){if(this._ctx){this._ctx.arcTo(t,e,r,a,i)}return this},rect:function(t,e,r,a){this._ctx&&this._ctx.rect(t,e,r,a);this.addData(s.R,t,e,r,a);return this},closePath:function(){this.addData(s.Z);var t=this._ctx;var e=this._x0;var r=this._y0;if(t){this._needsDash()&&this._dashedLineTo(e,r);t.closePath()}this._xi=e;this._yi=r;return this},fill:function(t){t&&t.fill();this.toStatic()},stroke:function(t){t&&t.stroke();this.toStatic()},setLineDash:function(t){if(t instanceof Array){this._lineDash=t;this._dashIdx=0;var e=0;for(var r=0;r<t.length;r++){e+=t[r]}this._dashSum=e}return this},setLineDashOffset:function(t){this._dashOffset=t;return this},len:function(){return this._len},setData:function(t){var e=t.length;if(!(this.data&&this.data.length==e)&&m){this.data=new Float32Array(e)}for(var r=0;r<e;r++){this.data[r]=t[r]}this._len=e},appendPath:function(t){if(!(t instanceof Array)){t=[t]}var e=t.length;var r=0;var a=this._len;for(var i=0;i<e;i++){r+=t[i].len()}if(m&&this.data instanceof Float32Array){this.data=new Float32Array(a+r)}for(var i=0;i<e;i++){var n=t[i].data;for(var o=0;o<n.length;o++){this.data[a++]=n[o]}}this._len=a},addData:function(t){var e=this.data;if(this._len+arguments.length>e.length){this._expandData();e=this.data}for(var r=0;r<arguments.length;r++){e[this._len++]=arguments[r]}this._prevCmd=t},_expandData:function(){if(!(this.data instanceof Array)){var t=[];for(var e=0;e<this._len;e++){t[e]=this.data[e]}this.data=t}},_needsDash:function(){return this._lineDash},_dashedLineTo:function(t,e){var r=this._dashSum;var a=this._dashOffset;var i=this._lineDash;var n=this._ctx;var o=this._xi;var s=this._yi;var l=t-o;var u=e-s;var h=g(l*l+u*u);var c=o;var d=s;var p;var m=i.length;var y;l/=h;u/=h;if(a<0){a=r+a}a%=r;c-=a*l;d-=a*u;while(l>=0&&c<=t||l<0&&c>t){y=this._dashIdx;p=i[y];c+=l*p;d+=u*p;this._dashIdx=(y+1)%m;if(l>0&&c<o||l<0&&c>o){continue}n[y%2?"moveTo":"lineTo"](l>=0?v(c,t):f(c,t),u>=0?v(d,e):f(d,e))}l=c-t;u=d-e;this._dashOffset=-g(l*l+u*u)},_dashedBezierTo:function(t,e,r,i,n,o){var s=this._dashSum;var l=this._dashOffset;var u=this._lineDash;var h=this._ctx;var c=this._xi;var v=this._yi;var f;var d;var p;var m=a.cubicAt;var y=0;var x=this._dashIdx;var _=u.length;var w;var b;var M=0;if(l<0){l=s+l}l%=s;for(f=0;f<1;f+=.1){d=m(c,t,r,n,f+.1)-m(c,t,r,n,f);p=m(v,e,i,o,f+.1)-m(v,e,i,o,f);y+=g(d*d+p*p)}for(;x<_;x++){M+=u[x];if(M>l){break}}f=(M-l)/y;while(f<=1){w=m(c,t,r,n,f);b=m(v,e,i,o,f);x%2?h.moveTo(w,b):h.lineTo(w,b);f+=u[x]/y;x=(x+1)%_}x%2!==0&&h.lineTo(n,o);d=n-w;p=o-b;this._dashOffset=-g(d*d+p*p)},_dashedQuadraticTo:function(t,e,r,a){var i=r;var n=a;r=(r+2*t)/3;a=(a+2*e)/3;t=(this._xi+2*t)/3;e=(this._yi+2*e)/3;this._dashedBezierTo(t,e,r,a,i,n)},toStatic:function(){var t=this.data;if(t instanceof Array){t.length=this._len;if(m){this.data=new Float32Array(t)}}},getBoundingRect:function(){l[0]=l[1]=h[0]=h[1]=Number.MAX_VALUE;u[0]=u[1]=c[0]=c[1]=-Number.MAX_VALUE;var t=this.data;var e=0;var r=0;var a=0;var v=0;for(var f=0;f<t.length;){var g=t[f++];if(f==1){e=t[f];r=t[f+1];a=e;v=r}switch(g){case s.M:a=t[f++];v=t[f++];e=a;r=v;h[0]=a;h[1]=v;c[0]=a;c[1]=v;break;case s.L:n.fromLine(e,r,t[f],t[f+1],h,c);e=t[f++];r=t[f++];break;case s.C:n.fromCubic(e,r,t[f++],t[f++],t[f++],t[f++],t[f],t[f+1],h,c);e=t[f++];r=t[f++];break;case s.Q:n.fromQuadratic(e,r,t[f++],t[f++],t[f],t[f+1],h,c);e=t[f++];r=t[f++];break;case s.A:var m=t[f++];var y=t[f++];var x=t[f++];var _=t[f++];var w=t[f++];var b=t[f++]+w;var M=t[f++];var S=1-t[f++];if(f==1){a=d(w)*x+m;v=p(w)*_+y}n.fromArc(m,y,x,_,w,b,S,h,c);e=d(b)*x+m;r=p(b)*_+y;break;case s.R:a=e=t[f++];v=r=t[f++];var I=t[f++];var A=t[f++];n.fromLine(a,v,a+I,v+A,h,c);break;case s.Z:e=a;r=v;break}i.min(l,l,h);i.max(u,u,c)}if(f===0){l[0]=l[1]=u[0]=u[1]=0}return new o(l[0],l[1],u[0]-l[0],u[1]-l[1])},rebuildPath:function(t){var e=this.data;for(var r=0;r<this._len;){var a=e[r++];switch(a){case s.M:t.moveTo(e[r++],e[r++]);break;case s.L:t.lineTo(e[r++],e[r++]);break;case s.C:t.bezierCurveTo(e[r++],e[r++],e[r++],e[r++],e[r++],e[r++]);break;case s.Q:t.quadraticCurveTo(e[r++],e[r++],e[r++],e[r++]);break;case s.A:var i=e[r++];var n=e[r++];var o=e[r++];var l=e[r++];var u=e[r++];var h=e[r++];var c=e[r++];var v=e[r++];var f=o>l?o:l;var d=o>l?1:o/l;var p=o>l?l/o:1;var g=Math.abs(o-l)>.001;if(g){t.translate(i,n);t.rotate(c);t.scale(d,p);t.arc(0,0,f,u,u+h,1-v);t.scale(1/d,1/p);t.rotate(-c);t.translate(-i,-n)}else{t.arc(i,n,f,u,u+h,1-v)}break;case s.R:t.rect(e[r++],e[r++],e[r++],e[r++]);break;case s.Z:t.closePath()}}}};y.CMD=s;t.exports=y},function(t,e,r){"use strict";var a=r(16);var i=a.create;var n=a.distSquare;var o=Math.pow;var s=Math.sqrt;var l=1e-8;var u=1e-4;var h=s(3);var c=1/3;var v=i();var f=i();var d=i();function p(t){return t>-l&&t<l}function g(t){return t>l||t<-l}function m(t,e,r,a,i){var n=1-i;return n*n*(n*t+3*i*e)+i*i*(i*a+3*n*r)}function y(t,e,r,a,i){var n=1-i;return 3*(((e-t)*n+2*(r-e)*i)*n+(a-r)*i*i)}function x(t,e,r,a,i,n){var l=a+3*(e-r)-t;var u=3*(r-e*2+t);var v=3*(e-t);var f=t-i;var d=u*u-3*l*v;var g=u*v-9*l*f;var m=v*v-3*u*f;var y=0;if(p(d)&&p(g)){if(p(u)){n[0]=0}else{var x=-v/u;if(x>=0&&x<=1){n[y++]=x}}}else{var _=g*g-4*d*m;if(p(_)){var w=g/d;var x=-u/l+w;var b=-w/2;if(x>=0&&x<=1){n[y++]=x}if(b>=0&&b<=1){n[y++]=b}}else if(_>0){var M=s(_);var S=d*u+1.5*l*(-g+M);var I=d*u+1.5*l*(-g-M);if(S<0){S=-o(-S,c)}else{S=o(S,c)}if(I<0){I=-o(-I,c)}else{I=o(I,c)}var x=(-u-(S+I))/(3*l);if(x>=0&&x<=1){n[y++]=x}}else{var A=(2*d*u-3*l*g)/(2*s(d*d*d));var T=Math.acos(A)/3;var C=s(d);var L=Math.cos(T);var x=(-u-2*C*L)/(3*l);var b=(-u+C*(L+h*Math.sin(T)))/(3*l);var D=(-u+C*(L-h*Math.sin(T)))/(3*l);if(x>=0&&x<=1){n[y++]=x}if(b>=0&&b<=1){n[y++]=b}if(D>=0&&D<=1){n[y++]=D}}}return y}function _(t,e,r,a,i){var n=6*r-12*e+6*t;var o=9*e+3*a-3*t-9*r;var l=3*e-3*t;var u=0;if(p(o)){if(g(n)){var h=-l/n;if(h>=0&&h<=1){i[u++]=h}}}else{var c=n*n-4*o*l;if(p(c)){i[0]=-n/(2*o)}else if(c>0){var v=s(c);var h=(-n+v)/(2*o);var f=(-n-v)/(2*o);if(h>=0&&h<=1){i[u++]=h}if(f>=0&&f<=1){i[u++]=f}}}return u}function w(t,e,r,a,i,n){var o=(e-t)*i+t;var s=(r-e)*i+e;var l=(a-r)*i+r;var u=(s-o)*i+o;var h=(l-s)*i+s;var c=(h-u)*i+u;n[0]=t;n[1]=o;n[2]=u
;n[3]=c;n[4]=c;n[5]=h;n[6]=l;n[7]=a}function b(t,e,r,a,i,o,l,h,c,p,g){var y;var x=.005;var _=Infinity;var w;var b;var M;var S;v[0]=c;v[1]=p;for(var I=0;I<1;I+=.05){f[0]=m(t,r,i,l,I);f[1]=m(e,a,o,h,I);M=n(v,f);if(M<_){y=I;_=M}}_=Infinity;for(var A=0;A<32;A++){if(x<u){break}w=y-x;b=y+x;f[0]=m(t,r,i,l,w);f[1]=m(e,a,o,h,w);M=n(f,v);if(w>=0&&M<_){y=w;_=M}else{d[0]=m(t,r,i,l,b);d[1]=m(e,a,o,h,b);S=n(d,v);if(b<=1&&S<_){y=b;_=S}else{x*=.5}}}if(g){g[0]=m(t,r,i,l,y);g[1]=m(e,a,o,h,y)}return s(_)}function M(t,e,r,a){var i=1-a;return i*(i*t+2*a*e)+a*a*r}function S(t,e,r,a){return 2*((1-a)*(e-t)+a*(r-e))}function I(t,e,r,a,i){var n=t-2*e+r;var o=2*(e-t);var l=t-a;var u=0;if(p(n)){if(g(o)){var h=-l/o;if(h>=0&&h<=1){i[u++]=h}}}else{var c=o*o-4*n*l;if(p(c)){var h=-o/(2*n);if(h>=0&&h<=1){i[u++]=h}}else if(c>0){var v=s(c);var h=(-o+v)/(2*n);var f=(-o-v)/(2*n);if(h>=0&&h<=1){i[u++]=h}if(f>=0&&f<=1){i[u++]=f}}}return u}function A(t,e,r){var a=t+r-2*e;if(a===0){return.5}else{return(t-e)/a}}function T(t,e,r,a,i){var n=(e-t)*a+t;var o=(r-e)*a+e;var s=(o-n)*a+n;i[0]=t;i[1]=n;i[2]=s;i[3]=s;i[4]=o;i[5]=r}function C(t,e,r,a,i,o,l,h,c){var p;var g=.005;var m=Infinity;v[0]=l;v[1]=h;for(var y=0;y<1;y+=.05){f[0]=M(t,r,i,y);f[1]=M(e,a,o,y);var x=n(v,f);if(x<m){p=y;m=x}}m=Infinity;for(var _=0;_<32;_++){if(g<u){break}var w=p-g;var b=p+g;f[0]=M(t,r,i,w);f[1]=M(e,a,o,w);var x=n(f,v);if(w>=0&&x<m){p=w;m=x}else{d[0]=M(t,r,i,b);d[1]=M(e,a,o,b);var S=n(d,v);if(b<=1&&S<m){p=b;m=S}else{g*=.5}}}if(c){c[0]=M(t,r,i,p);c[1]=M(e,a,o,p)}return s(m)}t.exports={cubicAt:m,cubicDerivativeAt:y,cubicRootAt:x,cubicExtrema:_,cubicSubdivide:w,cubicProjectPoint:b,quadraticAt:M,quadraticDerivativeAt:S,quadraticRootAt:I,quadraticExtremum:A,quadraticSubdivide:T,quadraticProjectPoint:C}},function(t,e,r){var a=r(16);var i=r(49);var n={};var o=Math.min;var s=Math.max;var l=Math.sin;var u=Math.cos;var h=a.create();var c=a.create();var v=a.create();var f=Math.PI*2;n.fromPoints=function(t,e,r){if(t.length===0){return}var a=t[0];var i=a[0];var n=a[0];var l=a[1];var u=a[1];var h;for(h=1;h<t.length;h++){a=t[h];i=o(i,a[0]);n=s(n,a[0]);l=o(l,a[1]);u=s(u,a[1])}e[0]=i;e[1]=l;r[0]=n;r[1]=u};n.fromLine=function(t,e,r,a,i,n){i[0]=o(t,r);i[1]=o(e,a);n[0]=s(t,r);n[1]=s(e,a)};var d=[];var p=[];n.fromCubic=function(t,e,r,a,n,l,u,h,c,v){var f=i.cubicExtrema;var g=i.cubicAt;var m;var y=f(t,r,n,u,d);c[0]=Infinity;c[1]=Infinity;v[0]=-Infinity;v[1]=-Infinity;for(m=0;m<y;m++){var x=g(t,r,n,u,d[m]);c[0]=o(x,c[0]);v[0]=s(x,v[0])}y=f(e,a,l,h,p);for(m=0;m<y;m++){var _=g(e,a,l,h,p[m]);c[1]=o(_,c[1]);v[1]=s(_,v[1])}c[0]=o(t,c[0]);v[0]=s(t,v[0]);c[0]=o(u,c[0]);v[0]=s(u,v[0]);c[1]=o(e,c[1]);v[1]=s(e,v[1]);c[1]=o(h,c[1]);v[1]=s(h,v[1])};n.fromQuadratic=function(t,e,r,a,n,l,u,h){var c=i.quadraticExtremum;var v=i.quadraticAt;var f=s(o(c(t,r,n),1),0);var d=s(o(c(e,a,l),1),0);var p=v(t,r,n,f);var g=v(e,a,l,d);u[0]=o(t,n,p);u[1]=o(e,l,g);h[0]=s(t,n,p);h[1]=s(e,l,g)};n.fromArc=function(t,e,r,i,n,o,s,d,p){var g=a.min;var m=a.max;var y=Math.abs(n-o);if(y%f<1e-4&&y>1e-4){d[0]=t-r;d[1]=e-i;p[0]=t+r;p[1]=e+i;return}h[0]=u(n)*r+t;h[1]=l(n)*i+e;c[0]=u(o)*r+t;c[1]=l(o)*i+e;g(d,h,c);m(p,h,c);n=n%f;if(n<0){n=n+f}o=o%f;if(o<0){o=o+f}if(n>o&&!s){o+=f}else if(n<o&&s){n+=f}if(s){var x=o;o=n;n=x}for(var _=0;_<o;_+=Math.PI/2){if(_>n){v[0]=u(_)*r+t;v[1]=l(_)*i+e;g(d,v,d);m(p,v,p)}}};t.exports=n},function(t,e,r){"use strict";var a=r(48).CMD;var i=r(52);var n=r(53);var o=r(54);var s=r(55);var l=r(56).normalizeRadian;var u=r(49);var h=r(57);var c=i.containStroke;var v=Math.PI*2;var f=1e-4;function d(t,e){return Math.abs(t-e)<f}var p=[-1,-1,-1];var g=[-1,-1];function m(){var t=g[0];g[0]=g[1];g[1]=t}function y(t,e,r,a,i,n,o,s,l,h){if(h>e&&h>a&&h>n&&h>s||h<e&&h<a&&h<n&&h<s){return 0}var c=u.cubicRootAt(e,a,n,s,h,p);if(c===0){return 0}else{var v=0;var f=-1;var d,y;for(var x=0;x<c;x++){var _=p[x];var w=u.cubicAt(t,r,i,o,_);if(w<l){continue}if(f<0){f=u.cubicExtrema(e,a,n,s,g);if(g[1]<g[0]&&f>1){m()}d=u.cubicAt(e,a,n,s,g[0]);if(f>1){y=u.cubicAt(e,a,n,s,g[1])}}if(f==2){if(_<g[0]){v+=d<e?1:-1}else if(_<g[1]){v+=y<d?1:-1}else{v+=s<y?1:-1}}else{if(_<g[0]){v+=d<e?1:-1}else{v+=s<d?1:-1}}}return v}}function x(t,e,r,a,i,n,o,s){if(s>e&&s>a&&s>n||s<e&&s<a&&s<n){return 0}var l=u.quadraticRootAt(e,a,n,s,p);if(l===0){return 0}else{var h=u.quadraticExtremum(e,a,n);if(h>=0&&h<=1){var c=0;var v=u.quadraticAt(e,a,n,h);for(var f=0;f<l;f++){var d=u.quadraticAt(t,r,i,p[f]);if(d<o){continue}if(p[f]<h){c+=v<e?1:-1}else{c+=n<v?1:-1}}return c}else{var d=u.quadraticAt(t,r,i,p[0]);if(d<o){return 0}return n<e?1:-1}}}function _(t,e,r,a,i,n,o,s){s-=e;if(s>r||s<-r){return 0}var u=Math.sqrt(r*r-s*s);p[0]=-u;p[1]=u;var h=Math.abs(a-i);if(h<1e-4){return 0}if(h%v<1e-4){a=0;i=v;var c=n?1:-1;if(o>=p[0]+t&&o<=p[1]+t){return c}else{return 0}}if(n){var u=a;a=l(i);i=l(u)}else{a=l(a);i=l(i)}if(a>i){i+=v}var f=0;for(var d=0;d<2;d++){var g=p[d];if(g+t>o){var m=Math.atan2(s,g);var c=n?1:-1;if(m<0){m=v+m}if(m>=a&&m<=i||m+v>=a&&m+v<=i){if(m>Math.PI/2&&m<Math.PI*1.5){c=-c}f+=c}}}return f}function w(t,e,r,i,l){var u=0;var v=0;var f=0;var p=0;var g=0;for(var m=0;m<t.length;){var w=t[m++];if(w===a.M&&m>1){if(!r){u+=h(v,f,p,g,i,l)}if(u!==0){return true}}if(m==1){v=t[m];f=t[m+1];p=v;g=f}switch(w){case a.M:p=t[m++];g=t[m++];v=p;f=g;break;case a.L:if(r){if(c(v,f,t[m],t[m+1],e,i,l)){return true}}else{u+=h(v,f,t[m],t[m+1],i,l)||0}v=t[m++];f=t[m++];break;case a.C:if(r){if(n.containStroke(v,f,t[m++],t[m++],t[m++],t[m++],t[m],t[m+1],e,i,l)){return true}}else{u+=y(v,f,t[m++],t[m++],t[m++],t[m++],t[m],t[m+1],i,l)||0}v=t[m++];f=t[m++];break;case a.Q:if(r){if(o.containStroke(v,f,t[m++],t[m++],t[m],t[m+1],e,i,l)){return true}}else{u+=x(v,f,t[m++],t[m++],t[m],t[m+1],i,l)||0}v=t[m++];f=t[m++];break;case a.A:var b=t[m++];var M=t[m++];var S=t[m++];var I=t[m++];var A=t[m++];var T=t[m++];var C=t[m++];var L=1-t[m++];var D=Math.cos(A)*S+b;var k=Math.sin(A)*I+M;if(m>1){u+=h(v,f,D,k,i,l)}else{p=D;g=k}var P=(i-b)*I/S+b;if(r){if(s.containStroke(b,M,I,A,A+T,L,e,P,l)){return true}}else{u+=_(b,M,I,A,A+T,L,P,l)}v=Math.cos(A+T)*S+b;f=Math.sin(A+T)*I+M;break;case a.R:p=v=t[m++];g=f=t[m++];var z=t[m++];var R=t[m++];var D=p+z;var k=g+R;if(r){if(c(p,g,D,g,e,i,l)||c(D,g,D,k,e,i,l)||c(D,k,p,k,e,i,l)||c(p,k,D,k,e,i,l)){return true}}else{u+=h(D,g,D,k,i,l);u+=h(p,k,p,g,i,l)}break;case a.Z:if(r){if(c(v,f,p,g,e,i,l)){return true}}else{u+=h(v,f,p,g,i,l);if(u!==0){return true}}v=p;f=g;break}}if(!r&&!d(f,g)){u+=h(v,f,p,g,i,l)||0}return u!==0}t.exports={contain:function(t,e,r){return w(t,0,false,e,r)},containStroke:function(t,e,r,a){return w(t,e,true,r,a)}}},function(t,e){t.exports={containStroke:function(t,e,r,a,i,n,o){if(i===0){return false}var s=i;var l=0;var u=t;if(o>e+s&&o>a+s||o<e-s&&o<a-s||n>t+s&&n>r+s||n<t-s&&n<r-s){return false}if(t!==r){l=(e-a)/(t-r);u=(t*a-r*e)/(t-r)}else{return Math.abs(n-t)<=s/2}var h=l*n-o+u;var c=h*h/(l*l+1);return c<=s/2*s/2}}},function(t,e,r){var a=r(49);t.exports={containStroke:function(t,e,r,i,n,o,s,l,u,h,c){if(u===0){return false}var v=u;if(c>e+v&&c>i+v&&c>o+v&&c>l+v||c<e-v&&c<i-v&&c<o-v&&c<l-v||h>t+v&&h>r+v&&h>n+v&&h>s+v||h<t-v&&h<r-v&&h<n-v&&h<s-v){return false}var f=a.cubicProjectPoint(t,e,r,i,n,o,s,l,h,c,null);return f<=v/2}}},function(t,e,r){var a=r(49);t.exports={containStroke:function(t,e,r,i,n,o,s,l,u){if(s===0){return false}var h=s;if(u>e+h&&u>i+h&&u>o+h||u<e-h&&u<i-h&&u<o-h||l>t+h&&l>r+h&&l>n+h||l<t-h&&l<r-h&&l<n-h){return false}var c=a.quadraticProjectPoint(t,e,r,i,n,o,l,u,null);return c<=h/2}}},function(t,e,r){var a=r(56).normalizeRadian;var i=Math.PI*2;t.exports={containStroke:function(t,e,r,n,o,s,l,u,h){if(l===0){return false}var c=l;u-=t;h-=e;var v=Math.sqrt(u*u+h*h);if(v-c>r||v+c<r){return false}if(Math.abs(n-o)%i<1e-4){return true}if(s){var f=n;n=a(o);o=a(f)}else{n=a(n);o=a(o)}if(n>o){o+=i}var d=Math.atan2(h,u);if(d<0){d+=i}return d>=n&&d<=o||d+i>=n&&d+i<=o}}},function(t,e){var r=Math.PI*2;t.exports={normalizeRadian:function(t){t%=r;if(t<0){t+=r}return t}}},function(t,e){t.exports=function t(e,r,a,i,n,o){if(o>r&&o>i||o<r&&o<i){return 0}if(i===r){return 0}var s=i<r?1:-1;var l=(o-r)/(i-r);var u=l*(a-e)+e;return u>n?s:0}},function(t,e,r){var a=r(48).CMD;var i=r(16);var n=i.applyTransform;var o=[[],[],[]];var s=Math.sqrt;var l=Math.atan2;function u(t,e){var r=t.data;var i;var u;var h;var c;var v;var f;var d=a.M;var p=a.C;var g=a.L;var m=a.R;var y=a.A;var x=a.Q;for(h=0,c=0;h<r.length;){i=r[h++];c=h;u=0;switch(i){case d:u=1;break;case g:u=1;break;case p:u=3;break;case x:u=2;break;case y:var _=e[4];var w=e[5];var b=s(e[0]*e[0]+e[1]*e[1]);var M=s(e[2]*e[2]+e[3]*e[3]);var S=l(-e[1]/M,e[0]/b);r[h++]+=_;r[h++]+=w;r[h++]*=b;r[h++]*=M;r[h++]+=S;r[h++]+=S;h+=2;c=h;break;case m:f[0]=r[h++];f[1]=r[h++];n(f,f,e);r[c++]=f[0];r[c++]=f[1];f[0]+=r[h++];f[1]+=r[h++];n(f,f,e);r[c++]=f[0];r[c++]=f[1]}for(v=0;v<u;v++){var f=o[v];f[0]=r[h++];f[1]=r[h++];n(f,f,e);r[c++]=f[0];r[c++]=f[1]}}}t.exports=u},function(t,e,r){var a=r(45);var i=r(15);var n=r(3);var o=r(60);var s=r(61);var l=new s(50);function u(t){a.call(this,t)}u.prototype={constructor:u,type:"image",brush:function(t){var e=this.style;var r=e.image;var a;if(typeof r==="string"){a=this._image}else{a=r}if(!a&&r){var i=l.get(r);if(!i){a=new Image;a.onload=function(){a.onload=null;for(var t=0;t<i.pending.length;t++){i.pending[t].dirty()}};i={image:a,pending:[this]};a.src=r;l.put(r,i);this._image=a;return}else{a=i.image;this._image=a;if(!a.width||!a.height){i.pending.push(this);return}}}if(a){var n=e.width||a.width;var s=e.height||a.height;var u=e.x||0;var h=e.y||0;if(!a.width||!a.height){return}t.save();e.bind(t);this.setTransform(t);if(e.r){t.beginPath();o.buildPath(t,e);t.clip()}if(e.sWidth&&e.sHeight){var c=e.sx||0;var v=e.sy||0;t.drawImage(a,c,v,e.sWidth,e.sHeight,u,h,n,s)}else if(e.sx&&e.sy){var c=e.sx;var v=e.sy;var f=n-c;var d=s-v;t.drawImage(a,c,v,f,d,u,h,n,s)}else{t.drawImage(a,u,h,n,s)}if(e.width==null){e.width=n}if(e.height==null){e.height=s}if(e.text!=null){this.drawRectText(t,this.getBoundingRect())}t.restore()}},getBoundingRect:function(){var t=this.style;if(!this._rect){this._rect=new i(t.x||0,t.y||0,t.width||0,t.height||0)}return this._rect}};n.inherits(u,a);t.exports=u},function(t,e){t.exports={buildPath:function(t,e){var r=e.x;var a=e.y;var i=e.width;var n=e.height;var o=e.r;var s;var l;var u;var h;if(i<0){r=r+i;i=-i}if(n<0){a=a+n;n=-n}if(typeof o==="number"){s=l=u=h=o}else if(o instanceof Array){if(o.length===1){s=l=u=h=o[0]}else if(o.length===2){s=u=o[0];l=h=o[1]}else if(o.length===3){s=o[0];l=h=o[1];u=o[2]}else{s=o[0];l=o[1];u=o[2];h=o[3]}}else{s=l=u=h=0}var c;if(s+l>i){c=s+l;s*=i/c;l*=i/c}if(u+h>i){c=u+h;u*=i/c;h*=i/c}if(l+u>n){c=l+u;l*=n/c;u*=n/c}if(s+h>n){c=s+h;s*=n/c;h*=n/c}t.moveTo(r+s,a);t.lineTo(r+i-l,a);l!==0&&t.quadraticCurveTo(r+i,a,r+i,a+l);t.lineTo(r+i,a+n-u);u!==0&&t.quadraticCurveTo(r+i,a+n,r+i-u,a+n);t.lineTo(r+h,a+n);h!==0&&t.quadraticCurveTo(r,a+n,r,a+n-h);t.lineTo(r,a+s);s!==0&&t.quadraticCurveTo(r,a,r+s,a)}}},function(t,e){var r=function(){this.head=null;this.tail=null;this._len=0};var a=r.prototype;a.insert=function(t){var e=new i(t);this.insertEntry(e);return e};a.insertEntry=function(t){if(!this.head){this.head=this.tail=t}else{this.tail.next=t;t.prev=this.tail;this.tail=t}this._len++};a.remove=function(t){var e=t.prev;var r=t.next;if(e){e.next=r}else{this.head=r}if(r){r.prev=e}else{this.tail=e}t.next=t.prev=null;this._len--};a.len=function(){return this._len};var i=function(t){this.value=t;this.next;this.prev};var n=function(t){this._list=new r;this._map={};this._maxSize=t||10};var o=n.prototype;o.put=function(t,e){var r=this._list;var a=this._map;if(a[t]==null){var i=r.len();if(i>=this._maxSize&&i>0){var n=r.head;r.remove(n);delete a[n.key]}var o=r.insert(e);o.key=t;a[t]=o}};o.get=function(t){var e=this._map[t];var r=this._list;if(e!=null){if(e!==r.tail){r.remove(e);r.insertEntry(e)}return e.value}};o.clear=function(){this._list.clear();this._map={}};t.exports=n},function(t,e,r){var a=r(45);var i=r(3);var n=r(14);var o=function(t){a.call(this,t)};o.prototype={constructor:o,type:"text",brush:function(t){var e=this.style;var r=e.x||0;var a=e.y||0;var i=e.text;var o=e.fill;var s=e.stroke;i!=null&&(i+="");if(i){t.save();this.style.bind(t);this.setTransform(t);o&&(t.fillStyle=o);s&&(t.strokeStyle=s);t.font=e.textFont||e.font;t.textAlign=e.textAlign;if(e.textVerticalAlign){var l=n.getBoundingRect(i,t.font,e.textAlign,"top");t.textBaseline="top";switch(e.textVerticalAlign){case"middle":a-=l.height/2;break;case"bottom":a-=l.height;break}}else{t.textBaseline=e.textBaseline}var u=n.measureText("国",t.font).width;var h=i.split("\n");for(var c=0;c<h.length;c++){o&&t.fillText(h[c],r,a);s&&t.strokeText(h[c],r,a);a+=u}t.restore()}},getBoundingRect:function(){if(!this._rect){var t=this.style;var e=t.textVerticalAlign;var r=n.getBoundingRect(t.text+"",t.textFont||t.font,t.textAlign,e?"top":t.textBaseline);switch(e){case"middle":r.y-=r.height/2;break;case"bottom":r.y-=r.height;break}r.x+=t.x||0;r.y+=t.y||0;this._rect=r}return this._rect}};i.inherits(o,a);t.exports=o},function(t,e,r){"use strict";t.exports=r(44).extend({type:"circle",shape:{cx:0,cy:0,r:0},buildPath:function(t,e){t.moveTo(e.cx+e.r,e.cy);t.arc(e.cx,e.cy,e.r,0,Math.PI*2,true);return}})},function(t,e,r){t.exports=r(44).extend({type:"sector",shape:{cx:0,cy:0,r0:0,r:0,startAngle:0,endAngle:Math.PI*2,clockwise:true},buildPath:function(t,e){var r=e.cx;var a=e.cy;var i=Math.max(e.r0||0,0);var n=Math.max(e.r,0);var o=e.startAngle;var s=e.endAngle;var l=e.clockwise;var u=Math.cos(o);var h=Math.sin(o);t.moveTo(u*i+r,h*i+a);t.lineTo(u*n+r,h*n+a);t.arc(r,a,n,o,s,!l);t.lineTo(Math.cos(s)*i+r,Math.sin(s)*i+a);if(i!==0){t.arc(r,a,i,s,o,l)}t.closePath()}})},function(t,e,r){t.exports=r(44).extend({type:"ring",shape:{cx:0,cy:0,r:0,r0:0},buildPath:function(t,e){var r=e.cx;var a=e.cy;var i=Math.PI*2;t.moveTo(r+e.r,a);t.arc(r,a,e.r,0,i,false);t.moveTo(r+e.r0,a);t.arc(r,a,e.r0,0,i,true)}})},function(t,e,r){var a=r(67);t.exports=r(44).extend({type:"polygon",shape:{points:null,smooth:false,smoothConstraint:null},buildPath:function(t,e){a.buildPath(t,e,true)}})},function(t,e,r){var a=r(68);var i=r(69);t.exports={buildPath:function(t,e,r){var n=e.points;var o=e.smooth;if(n&&n.length>=2){if(o&&o!=="spline"){var s=i(n,o,r,e.smoothConstraint);t.moveTo(n[0][0],n[0][1]);var l=n.length;for(var u=0;u<(r?l:l-1);u++){var h=s[u*2];var c=s[u*2+1];var v=n[(u+1)%l];t.bezierCurveTo(h[0],h[1],c[0],c[1],v[0],v[1])}}else{if(o==="spline"){n=a(n,r)}t.moveTo(n[0][0],n[0][1]);for(var u=1,f=n.length;u<f;u++){t.lineTo(n[u][0],n[u][1])}}r&&t.closePath()}}}},function(t,e,r){var a=r(16);function i(t,e,r,a,i,n,o){var s=(r-t)*.5;var l=(a-e)*.5;return(2*(e-r)+s+l)*o+(-3*(e-r)-2*s-l)*n+s*i+e}t.exports=function(t,e){var r=t.length;var n=[];var o=0;for(var s=1;s<r;s++){o+=a.distance(t[s-1],t[s])}var l=o/2;l=l<r?r:l;for(var s=0;s<l;s++){var u=s/(l-1)*(e?r:r-1);var h=Math.floor(u);var c=u-h;var v;var f=t[h%r];var d;var p;if(!e){v=t[h===0?h:h-1];d=t[h>r-2?r-1:h+1];p=t[h>r-3?r-1:h+2]}else{v=t[(h-1+r)%r];d=t[(h+1)%r];p=t[(h+2)%r]}var g=c*c;var m=c*g;n.push([i(v[0],f[0],d[0],p[0],c,g,m),i(v[1],f[1],d[1],p[1],c,g,m)])}return n}},function(t,e,r){var a=r(16);var i=a.min;var n=a.max;var o=a.scale;var s=a.distance;var l=a.add;t.exports=function(t,e,r,u){var h=[];var c=[];var v=[];var f=[];var d;var p;var g,m;if(u){g=[Infinity,Infinity];m=[-Infinity,-Infinity];for(var y=0,x=t.length;y<x;y++){i(g,g,t[y]);n(m,m,t[y])}i(g,g,u[0]);n(m,m,u[1])}for(var y=0,x=t.length;y<x;y++){var _=t[y];if(r){d=t[y?y-1:x-1];p=t[(y+1)%x]}else{if(y===0||y===x-1){h.push(a.clone(t[y]));continue}else{d=t[y-1];p=t[y+1]}}a.sub(c,p,d);o(c,c,e);var w=s(_,d);var b=s(_,p);var M=w+b;if(M!==0){w/=M;b/=M}o(v,c,-w);o(f,c,b);var S=l([],_,v);var I=l([],_,f);if(u){n(S,S,g);i(S,S,m);n(I,I,g);i(I,I,m)}h.push(S);h.push(I)}if(r){h.push(h.shift())}return h}},function(t,e,r){var a=r(67);t.exports=r(44).extend({type:"polyline",shape:{points:null,smooth:false,smoothConstraint:null},style:{stroke:"#000",fill:null},buildPath:function(t,e){a.buildPath(t,e,false)}})},function(t,e,r){var a=r(60);t.exports=r(44).extend({type:"rect",shape:{r:0,x:0,y:0,width:0,height:0},buildPath:function(t,e){var r=e.x;var i=e.y;var n=e.width;var o=e.height;if(!e.r){t.rect(r,i,n,o)}else{a.buildPath(t,e)}t.closePath();return}})},function(t,e,r){t.exports=r(44).extend({type:"line",shape:{x1:0,y1:0,x2:0,y2:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(t,e){var r=e.x1;var a=e.y1;var i=e.x2;var n=e.y2;var o=e.percent;if(o===0){return}t.moveTo(r,a);if(o<1){i=r*(1-o)+i*o;n=a*(1-o)+n*o}t.lineTo(i,n)},pointAt:function(t){var e=this.shape;return[e.x1*(1-t)+e.x2*t,e.y1*(1-t)+e.y2*t]}})},function(t,e,r){"use strict";var a=r(49);var i=a.quadraticSubdivide;var n=a.cubicSubdivide;var o=a.quadraticAt;var s=a.cubicAt;var l=[];t.exports=r(44).extend({type:"bezier-curve",shape:{x1:0,y1:0,x2:0,y2:0,cpx1:0,cpy1:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(t,e){var r=e.x1;var a=e.y1;var o=e.x2;var s=e.y2;var u=e.cpx1;var h=e.cpy1;var c=e.cpx2;var v=e.cpy2;var f=e.percent;if(f===0){return}t.moveTo(r,a);if(c==null||v==null){if(f<1){i(r,u,o,f,l);u=l[1];o=l[2];i(a,h,s,f,l);h=l[1];s=l[2]}t.quadraticCurveTo(u,h,o,s)}else{if(f<1){n(r,u,c,o,f,l);u=l[1];c=l[2];o=l[3];n(a,h,v,s,f,l);h=l[1];v=l[2];s=l[3]}t.bezierCurveTo(u,h,c,v,o,s)}},pointAt:function(t){var e=this.shape;var r=e.cpx2;var a=e.cpy2;if(r===null||a===null){return[o(e.x1,e.cpx1,e.x2,t),o(e.y1,e.cpy1,e.y2,t)]}else{return[s(e.x1,e.cpx1,e.cpx1,e.x2,t),s(e.y1,e.cpy1,e.cpy1,e.y2,t)]}}})},function(t,e,r){t.exports=r(44).extend({type:"arc",shape:{cx:0,cy:0,r:0,startAngle:0,endAngle:Math.PI*2,clockwise:true},style:{stroke:"#000",fill:null},buildPath:function(t,e){var r=e.cx;var a=e.cy;var i=Math.max(e.r,0);var n=e.startAngle;var o=e.endAngle;var s=e.clockwise;var l=Math.cos(n);var u=Math.sin(n);t.moveTo(l*i+r,u*i+a);t.arc(r,a,i,n,o,!s)}})},function(t,e,r){"use strict";var a=r(3);var i=r(4);var n=function(t,e,r,a,n){this.x=t==null?0:t;this.y=e==null?0:e;this.x2=r==null?1:r;this.y2=a==null?0:a;i.call(this,n)};n.prototype={constructor:n,type:"linear",updateCanvasGradient:function(t,e){var r=t.getBoundingRect();var a=this.x*r.width+r.x;var i=this.x2*r.width+r.x;var n=this.y*r.height+r.y;var o=this.y2*r.height+r.y;var s=e.createLinearGradient(a,n,i,o);var l=this.colorStops;for(var u=0;u<l.length;u++){s.addColorStop(l[u].offset,l[u].color)}this.canvasGradient=s}};a.inherits(n,i);t.exports=n},function(t,e,r){"use strict";var a=r(3);var i=r(4);var n=function(t,e,r,a){this.x=t==null?.5:t;this.y=e==null?.5:e;this.r=r==null?.5:r;i.call(this,a)};n.prototype={constructor:n,type:"radial",updateCanvasGradient:function(t,e){var r=t.getBoundingRect();var a=r.width;var i=r.height;var n=Math.min(a,i);var o=this.x*a+r.x;var s=this.y*i+r.y;var l=this.r*n;var u=e.createRadialGradient(o,s,0,o,s,l);var h=this.colorStops;for(var c=0;c<h.length;c++){u.addColorStop(h[c].offset,h[c].color)}this.canvasGradient=u}};a.inherits(n,i);t.exports=n},function(t,e,r){var a=r(31);var i=r(78);var n=r(79);var o=r(83);var s=r(84);var l=!i.canvasSupported;var u={canvas:r(85)};var h={};var c={};c.version="3.0.7";c.init=function(t,e){var r=new f(a(),t,e);h[r.id]=r;return r};c.dispose=function(t){if(t){t.dispose()}else{for(var e in h){h[e].dispose()}h={}}return c};c.getInstance=function(t){return h[t]};c.registerPainter=function(t,e){u[t]=e};function v(t){delete h[t]}var f=function(t,e,r){r=r||{};this.dom=e;this.id=t;var a=this;var h=new o;var c=r.renderer;if(l){if(!u.vml){throw new Error("You need to require 'zrender/vml/vml' to support IE8")}c="vml"}else if(!c||!u[c]){c="canvas"}var v=new u[c](e,h,r);this.storage=h;this.painter=v;if(!i.node){this.handler=new n(v.getViewportRoot(),h,v)}this.animation=new s({stage:{update:function(){if(a._needsRefresh){a.refreshImmediately()}}}});this.animation.start();this._needsRefresh;var f=h.delFromMap;var d=h.addToMap;h.delFromMap=function(t){var e=h.get(t);f.call(h,t);e&&e.removeSelfFromZr(a)};h.addToMap=function(t){d.call(h,t);t.addSelfToZr(a)}};f.prototype={constructor:f,getId:function(){return this.id},add:function(t){this.storage.addRoot(t);this._needsRefresh=true},remove:function(t){this.storage.delRoot(t);this._needsRefresh=true},configLayer:function(t,e){this.painter.configLayer(t,e);this._needsRefresh=true},refreshImmediately:function(){this._needsRefresh=false;this.painter.refresh();this._needsRefresh=false},refresh:function(){this._needsRefresh=true},resize:function(){this.painter.resize();this.handler&&this.handler.resize()},clearAnimation:function(){this.animation.clear()},getWidth:function(){return this.painter.getWidth()},getHeight:function(){return this.painter.getHeight()},toDataURL:function(t,e,r){return this.painter.toDataURL(t,e,r)},pathToImage:function(t,e,r){var i=a();return this.painter.pathToImage(i,t,e,r)},setDefaultCursorStyle:function(t){this.handler.setDefaultCursorStyle(t)},on:function(t,e,r){this.handler&&this.handler.on(t,e,r)},off:function(t,e){this.handler&&this.handler.off(t,e)},trigger:function(t,e){this.handler&&this.handler.trigger(t,e)},clear:function(){this.storage.delRoot();this.painter.clear()},dispose:function(){this.animation.stop();this.clear();this.storage.dispose();this.painter.dispose();this.handler&&this.handler.dispose();this.animation=this.storage=this.painter=this.handler=null;v(this.id)}};t.exports=c},function(t,e){var r={};if(typeof navigator==="undefined"){r={browser:{},os:{},node:true,canvasSupported:true}}else{r=a(navigator.userAgent)}t.exports=r;function a(t){var e={};var r={};var a=t.match(/Web[kK]it[\/]{0,1}([\d.]+)/);var i=t.match(/(Android);?[\s\/]+([\d.]+)?/);var n=t.match(/(iPad).*OS\s([\d_]+)/);var o=t.match(/(iPod)(.*OS\s([\d_]+))?/);var s=!n&&t.match(/(iPhone\sOS)\s([\d_]+)/);var l=t.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);var u=l&&t.match(/TouchPad/);var h=t.match(/Kindle\/([\d.]+)/);var c=t.match(/Silk\/([\d._]+)/);var v=t.match(/(BlackBerry).*Version\/([\d.]+)/);var f=t.match(/(BB10).*Version\/([\d.]+)/);var d=t.match(/(RIM\sTablet\sOS)\s([\d.]+)/);var p=t.match(/PlayBook/);var g=t.match(/Chrome\/([\d.]+)/)||t.match(/CriOS\/([\d.]+)/);var m=t.match(/Firefox\/([\d.]+)/);var y=a&&t.match(/Mobile\//)&&!g;var x=t.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/)&&!g;var _=t.match(/MSIE\s([\d.]+)/)||t.match(/Trident\/.+?rv:(([\d.]+))/);var w=t.match(/Edge\/([\d.]+)/);if(r.webkit=!!a)r.version=a[1];if(i)e.android=true,e.version=i[2];if(s&&!o)e.ios=e.iphone=true,e.version=s[2].replace(/_/g,".");if(n)e.ios=e.ipad=true,e.version=n[2].replace(/_/g,".");if(o)e.ios=e.ipod=true,e.version=o[3]?o[3].replace(/_/g,"."):null;if(l)e.webos=true,e.version=l[2];if(u)e.touchpad=true;if(v)e.blackberry=true,e.version=v[2];if(f)e.bb10=true,e.version=f[2];if(d)e.rimtabletos=true,e.version=d[2];if(p)r.playbook=true;if(h)e.kindle=true,e.version=h[1];if(c)r.silk=true,r.version=c[1];if(!c&&e.android&&t.match(/Kindle Fire/))r.silk=true;if(g)r.chrome=true,r.version=g[1];if(m)r.firefox=true,r.version=m[1];if(_)r.ie=true,r.version=_[1];if(y&&(t.match(/Safari/)||!!e.ios))r.safari=true;if(x)r.webview=true;if(_)r.ie=true,r.version=_[1];if(w)r.edge=true,r.version=w[1];e.tablet=!!(n||p||i&&!t.match(/Mobile/)||m&&t.match(/Tablet/)||_&&!t.match(/Phone/)&&t.match(/Touch/));e.phone=!!(!e.tablet&&!e.ipod&&(i||s||l||v||f||g&&t.match(/Android/)||g&&t.match(/CriOS\/([\d.]+)/)||m&&t.match(/Mobile/)||_&&t.match(/Touch/)));return{browser:r,os:e,node:false,canvasSupported:document.createElement("canvas").getContext?true:false,touchEventsSupported:"ontouchstart"in window&&!r.ie&&!r.edge,pointerEventsSupported:"onpointerdown"in window&&(r.edge||r.ie&&r.version>=10)}}},function(t,e,r){"use strict";var a=r(78);var i=r(80);var n=r(3);var o=r(81);var s=r(82);var l=r(32);var u=["click","dblclick","mousewheel","mouseout"];!M()&&u.push("mouseup","mousedown","mousemove");var h=["touchstart","touchend","touchmove"];var c=["pointerdown","pointerup","pointermove"];var v=300;var f=i.addEventListener;var d=i.removeEventListener;var p=i.normalizeEvent;function g(t,e,r){return{type:t,event:r,target:e,cancelBubble:false,offsetX:r.zrX,offsetY:r.zrY,gestureEvent:r.gestureEvent,pinchX:r.pinchX,pinchY:r.pinchY,pinchScale:r.pinchScale,wheelDelta:r.zrDelta}}var m={mousemove:function(t){t=p(this.root,t);var e=t.zrX;var r=t.zrY;var a=this.findHover(e,r,null);var i=this._hovered;this._hovered=a;this.root.style.cursor=a?a.cursor:this._defaultCursorStyle;if(i&&a!==i&&i.__zr){this._dispatchProxy(i,"mouseout",t)}this._dispatchProxy(a,"mousemove",t);if(a&&a!==i){this._dispatchProxy(a,"mouseover",t)}},mouseout:function(t){t=p(this.root,t);var e=t.toElement||t.relatedTarget;if(e!=this.root){while(e&&e.nodeType!=9){if(e===this.root){return}e=e.parentNode}}this._dispatchProxy(this._hovered,"mouseout",t);this.trigger("globalout",{event:t})},touchstart:function(t){t=p(this.root,t);this._lastTouchMoment=new Date;y(this,t,"start");m.mousemove.call(this,t);m.mousedown.call(this,t);b(this)},touchmove:function(t){t=p(this.root,t);y(this,t,"change");m.mousemove.call(this,t);b(this)},touchend:function(t){t=p(this.root,t);y(this,t,"end");m.mouseup.call(this,t);if(+new Date-this._lastTouchMoment<v){m.click.call(this,t)}b(this)}};n.each(["click","mousedown","mouseup","mousewheel","dblclick"],function(t){m[t]=function(e){e=p(this.root,e);var r=this.findHover(e.zrX,e.zrY,null);this._dispatchProxy(r,t,e)}});function y(t,e,r){var a=t._gestureMgr;r==="start"&&a.clear();var i=a.recognize(e,t.findHover(e.zrX,e.zrY,null));r==="end"&&a.clear();if(i){var n=i.type;e.gestureEvent=n;t._dispatchProxy(i.target,n,i.event)}}function x(t){var e=h.concat(c);for(var r=0;r<e.length;r++){var a=e[r];t._handlers[a]=n.bind(m[a],t)}for(var r=0;r<u.length;r++){var a=u[r];t._handlers[a]=i(m[a],t)}function i(t,e){return function(){if(e._touching){return}return t.apply(e,arguments)}}}var _=function(t,e,r){l.call(this);this.root=t;this.storage=e;this.painter=r;this._hovered;this._lastTouchMoment;this._lastX;this._lastY;this._defaultCursorStyle="default";this._gestureMgr=new s;this._handlers=[];this._touching=false;this._touchTimer;x(this);if(M()){a(c,this)}else if(S()){a(h,this)}a(u,this);o.call(this);function a(e,r){n.each(e,function(e){f(t,I(e),r._handlers[e])},r)}};_.prototype={constructor:_,resize:function(t){this._hovered=null},dispatch:function(t,e){var r=this._handlers[t];r&&r.call(this,e)},dispose:function(){var t=this.root;var e=u.concat(h);for(var r=0;r<e.length;r++){var a=e[r];d(t,I(a),this._handlers[a])}this.root=this.storage=this.painter=null},setDefaultCursorStyle:function(t){this._defaultCursorStyle=t},_dispatchProxy:function(t,e,r){var a="on"+e;var i=g(e,t,r);var n=t;while(n){n[a]&&(i.cancelBubble=n[a].call(n,i));n.trigger(e,i);n=n.parent;if(i.cancelBubble){break}}if(!i.cancelBubble){this.trigger(e,i);this.painter&&this.painter.eachOtherLayer(function(t){if(typeof t[a]=="function"){t[a].call(t,i)}if(t.trigger){t.trigger(e,i)}})}},findHover:function(t,e,r){var a=this.storage.getDisplayList();for(var i=a.length-1;i>=0;i--){if(!a[i].silent&&a[i]!==r&&!a[i].ignore&&w(a[i],t,e)){return a[i]}}}};function w(t,e,r){if(t[t.rectHover?"rectContain":"contain"](e,r)){var a=t.parent;while(a){if(a.clipPath&&!a.clipPath.contain(e,r)){return false}a=a.parent}return true}return false}function b(t){t._touching=true;clearTimeout(t._touchTimer);t._touchTimer=setTimeout(function(){t._touching=false},700)}function M(){return false}function S(){return a.touchEventsSupported}function I(t){return t==="mousewheel"&&a.browser.firefox?"DOMMouseScroll":t}n.mixin(_,l);n.mixin(_,o);t.exports=_},function(t,e,r){"use strict";var a=r(32);var i=typeof window!=="undefined"&&!!window.addEventListener;function n(t){return t.getBoundingClientRect?t.getBoundingClientRect():{left:0,top:0}}function o(t,e){e=e||window.event;if(e.zrX!=null){return e}var r=e.type;var a=r&&r.indexOf("touch")>=0;if(!a){var i=n(t);e.zrX=e.clientX-i.left;e.zrY=e.clientY-i.top;e.zrDelta=e.wheelDelta?e.wheelDelta/120:-(e.detail||0)/3}else{var o=r!="touchend"?e.targetTouches[0]:e.changedTouches[0];if(o){var s=n(t);e.zrX=o.clientX-s.left;e.zrY=o.clientY-s.top}}return e}function s(t,e,r){if(i){t.addEventListener(e,r)}else{t.attachEvent("on"+e,r)}}function l(t,e,r){if(i){t.removeEventListener(e,r)}else{t.detachEvent("on"+e,r)}}var u=i?function(t){t.preventDefault();t.stopPropagation();t.cancelBubble=true}:function(t){t.returnValue=false;t.cancelBubble=true};t.exports={normalizeEvent:o,addEventListener:s,removeEventListener:l,stop:u,Dispatcher:a}},function(t,e){function r(){this.on("mousedown",this._dragStart,this);this.on("mousemove",this._drag,this);this.on("mouseup",this._dragEnd,this);this.on("globalout",this._dragEnd,this)}r.prototype={constructor:r,_dragStart:function(t){var e=t.target;if(e&&e.draggable){this._draggingTarget=e;e.dragging=true;this._x=t.offsetX;this._y=t.offsetY;this._dispatchProxy(e,"dragstart",t.event)}},_drag:function(t){var e=this._draggingTarget;if(e){var r=t.offsetX;var a=t.offsetY;var i=r-this._x;var n=a-this._y;this._x=r;this._y=a;e.drift(i,n,t);this._dispatchProxy(e,"drag",t.event);var o=this.findHover(r,a,e);var s=this._dropTarget;this._dropTarget=o;if(e!==o){if(s&&o!==s){this._dispatchProxy(s,"dragleave",t.event)}if(o&&o!==s){this._dispatchProxy(o,"dragenter",t.event)}}}},_dragEnd:function(t){var e=this._draggingTarget;if(e){e.dragging=false}this._dispatchProxy(e,"dragend",t.event);if(this._dropTarget){this._dispatchProxy(this._dropTarget,"drop",t.event)}this._draggingTarget=null;this._dropTarget=null}};t.exports=r},function(t,e){"use strict";var r=function(){this._track=[]};r.prototype={constructor:r,recognize:function(t,e){this._doTrack(t,e);return this._recognize(t)},clear:function(){this._track.length=0;return this},_doTrack:function(t,e){var r=t.touches;if(!r){return}var a={points:[],touches:[],target:e,event:t};for(var i=0,n=r.length;i<n;i++){var o=r[i];a.points.push([o.clientX,o.clientY]);a.touches.push(o)}this._track.push(a)},_recognize:function(t){for(var e in n){if(n.hasOwnProperty(e)){var r=n[e](this._track,t);if(r){return r}}}}};function a(t){var e=t[1][0]-t[0][0];var r=t[1][1]-t[0][1];return Math.sqrt(e*e+r*r)}function i(t){return[(t[0][0]+t[1][0])/2,(t[0][1]+t[1][1])/2]}var n={pinch:function(t,e){var r=t.length;if(!r){return}var n=(t[r-1]||{}).points;var o=(t[r-2]||{}).points||n;if(o&&o.length>1&&n&&n.length>1){var s=a(n)/a(o);!isFinite(s)&&(s=1);e.pinchScale=s;var l=i(n);e.pinchX=l[0];e.pinchY=l[1];return{type:"pinch",target:t[0].target,event:e}}}};t.exports=r},function(t,e,r){"use strict";var a=r(3);var i=r(29);function n(t,e){if(t.zlevel===e.zlevel){if(t.z===e.z){if(t.z2===e.z2){return t.__renderidx-e.__renderidx}return t.z2-e.z2}return t.z-e.z}return t.zlevel-e.zlevel}var o=function(){this._elements={};this._roots=[];this._displayList=[];this._displayListLen=0};o.prototype={constructor:o,getDisplayList:function(t,e){e=e||false;if(t){this.updateDisplayList(e)}return this._displayList},updateDisplayList:function(t){this._displayListLen=0;var e=this._roots;var r=this._displayList;for(var a=0,i=e.length;a<i;a++){this._updateAndAddDisplayable(e[a],null,t)}r.length=this._displayListLen;for(var a=0,i=r.length;a<i;a++){r[a].__renderidx=a}r.sort(n)},_updateAndAddDisplayable:function(t,e,r){if(t.ignore&&!r){return}t.beforeUpdate();t.update();t.afterUpdate();var a=t.clipPath;if(a){a.parent=t;a.updateTransform();if(e){e=e.slice();e.push(a)}else{e=[a]}}if(t.type=="group"){var i=t._children;for(var n=0;n<i.length;n++){var o=i[n];o.__dirty=t.__dirty||o.__dirty;this._updateAndAddDisplayable(o,e,r)}t.__dirty=false}else{t.__clipPaths=e;this._displayList[this._displayListLen++]=t}},addRoot:function(t){if(this._elements[t.id]){return}if(t instanceof i){t.addChildrenToStorage(this)}this.addToMap(t);this._roots.push(t)},delRoot:function(t){if(t==null){for(var e=0;e<this._roots.length;e++){var r=this._roots[e];if(r instanceof i){r.delChildrenFromStorage(this)}}this._elements={};this._roots=[];this._displayList=[];this._displayListLen=0;return}if(t instanceof Array){for(var e=0,n=t.length;e<n;e++){
this.delRoot(t[e])}return}var o;if(typeof t=="string"){o=this._elements[t]}else{o=t}var s=a.indexOf(this._roots,o);if(s>=0){this.delFromMap(o.id);this._roots.splice(s,1);if(o instanceof i){o.delChildrenFromStorage(this)}}},addToMap:function(t){if(t instanceof i){t.__storage=this}t.dirty();this._elements[t.id]=t;return this},get:function(t){return this._elements[t]},delFromMap:function(t){var e=this._elements;var r=e[t];if(r){delete e[t];if(r instanceof i){r.__storage=null}}return this},dispose:function(){this._elements=this._renderList=this._roots=null}};t.exports=o},function(t,e,r){"use strict";var a=r(3);var i=r(80).Dispatcher;var n=typeof window!=="undefined"&&(window.requestAnimationFrame||window.msRequestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame)||function(t){setTimeout(t,16)};var o=r(35);var s=function(t){t=t||{};this.stage=t.stage||{};this.onframe=t.onframe||function(){};this._clips=[];this._running=false;this._time=0;i.call(this)};s.prototype={constructor:s,addClip:function(t){this._clips.push(t)},addAnimator:function(t){t.animation=this;var e=t.getClips();for(var r=0;r<e.length;r++){this.addClip(e[r])}},removeClip:function(t){var e=a.indexOf(this._clips,t);if(e>=0){this._clips.splice(e,1)}},removeAnimator:function(t){var e=t.getClips();for(var r=0;r<e.length;r++){this.removeClip(e[r])}t.animation=null},_update:function(){var t=(new Date).getTime();var e=t-this._time;var r=this._clips;var a=r.length;var i=[];var n=[];for(var o=0;o<a;o++){var s=r[o];var l=s.step(t);if(l){i.push(l);n.push(s)}}for(var o=0;o<a;){if(r[o]._needsRemove){r[o]=r[a-1];r.pop();a--}else{o++}}a=i.length;for(var o=0;o<a;o++){n[o].fire(i[o])}this._time=t;this.onframe(e);this.trigger("frame",e);if(this.stage.update){this.stage.update()}},start:function(){var t=this;this._running=true;function e(){if(t._running){n(e);t._update()}}this._time=(new Date).getTime();n(e)},stop:function(){this._running=false},clear:function(){this._clips=[]},animate:function(t,e){e=e||{};var r=new o(t,e.loop,e.getter,e.setter);return r}};a.mixin(s,i);t.exports=s},function(t,e,r){"use strict";var a=r(40);var i=r(3);var n=r(39);var o=r(15);var s=r(86);function l(t){return parseInt(t,10)}function u(t){if(!t){return false}if(t.isBuildin){return true}if(typeof t.resize!=="function"||typeof t.refresh!=="function"){return false}return true}function h(t){t.__unusedCount++}function c(t){t.__dirty=false;if(t.__unusedCount==1){t.clear()}}var v=new o(0,0,0,0);var f=new o(0,0,0,0);function d(t,e,r){v.copy(t.getBoundingRect());if(t.transform){v.applyTransform(t.transform)}f.width=e;f.height=r;return!v.intersect(f)}function p(t,e){if(!t||!e||t.length!==e.length){return true}for(var r=0;r<t.length;r++){if(t[r]!==e[r]){return true}}}function g(t,e){for(var r=0;r<t.length;r++){var a=t[r];var i;if(a.transform){i=a.transform;e.transform(i[0],i[1],i[2],i[3],i[4],i[5])}var n=a.path;n.beginPath(e);a.buildPath(n,a.shape);e.clip();if(a.transform){i=a.invTransform;e.transform(i[0],i[1],i[2],i[3],i[4],i[5])}}}var m=function(t,e,r){var i=!t.nodeName||t.nodeName.toUpperCase()==="CANVAS";r=r||{};this.dpr=r.devicePixelRatio||a.devicePixelRatio;this._singleCanvas=i;this.root=t;var n=t.style;if(n){n["-webkit-tap-highlight-color"]="transparent";n["-webkit-user-select"]="none";n["user-select"]="none";n["-webkit-touch-callout"]="none";t.innerHTML=""}this.storage=e;if(!i){var o=this._getWidth();var l=this._getHeight();this._width=o;this._height=l;var u=document.createElement("div");this._domRoot=u;var h=u.style;h.position="relative";h.overflow="hidden";h.width=this._width+"px";h.height=this._height+"px";t.appendChild(u);this._layers={};this._zlevelList=[]}else{var o=t.width;var l=t.height;this._width=o;this._height=l;var c=new s(t,this,1);c.initContext();this._layers={0:c};this._zlevelList=[0]}this._layerConfig={};this.pathToImage=this._createPathToImage()};m.prototype={constructor:m,isSingleCanvas:function(){return this._singleCanvas},getViewportRoot:function(){return this._singleCanvas?this._layers[0].dom:this._domRoot},refresh:function(t){var e=this.storage.getDisplayList(true);var r=this._zlevelList;this._paintList(e,t);for(var a=0;a<r.length;a++){var i=r[a];var n=this._layers[i];if(!n.isBuildin&&n.refresh){n.refresh()}}return this},_paintList:function(t,e){if(e==null){e=false}this._updateLayerStatus(t);var r;var a;var i;var o=this._width;var s=this._height;this.eachBuildinLayer(h);var l=null;for(var u=0,v=t.length;u<v;u++){var f=t[u];var m=this._singleCanvas?0:f.zlevel;if(a!==m){a=m;r=this.getLayer(a);if(!r.isBuildin){n("ZLevel "+a+" has been used by unkown layer "+r.id)}i=r.ctx;r.__unusedCount=0;if(r.__dirty||e){r.clear()}}if((r.__dirty||e)&&!f.invisible&&f.style.opacity!==0&&f.scale[0]&&f.scale[1]&&!(f.culling&&d(f,o,s))){var y=f.__clipPaths;if(p(y,l)){if(l){i.restore()}if(y){i.save();g(y,i)}l=y}f.beforeBrush&&f.beforeBrush(i);f.brush(i,false);f.afterBrush&&f.afterBrush(i)}f.__dirty=false}if(l){i.restore()}this.eachBuildinLayer(c)},getLayer:function(t){if(this._singleCanvas){return this._layers[0]}var e=this._layers[t];if(!e){e=new s("zr_"+t,this,this.dpr);e.isBuildin=true;if(this._layerConfig[t]){i.merge(e,this._layerConfig[t],true)}this.insertLayer(t,e);e.initContext()}return e},insertLayer:function(t,e){var r=this._layers;var a=this._zlevelList;var i=a.length;var o=null;var s=-1;var l=this._domRoot;if(r[t]){n("ZLevel "+t+" has been used already");return}if(!u(e)){n("Layer of zlevel "+t+" is not valid");return}if(i>0&&t>a[0]){for(s=0;s<i-1;s++){if(a[s]<t&&a[s+1]>t){break}}o=r[a[s]]}a.splice(s+1,0,t);if(o){var h=o.dom;if(h.nextSibling){l.insertBefore(e.dom,h.nextSibling)}else{l.appendChild(e.dom)}}else{if(l.firstChild){l.insertBefore(e.dom,l.firstChild)}else{l.appendChild(e.dom)}}r[t]=e},eachLayer:function(t,e){var r=this._zlevelList;var a;var i;for(i=0;i<r.length;i++){a=r[i];t.call(e,this._layers[a],a)}},eachBuildinLayer:function(t,e){var r=this._zlevelList;var a;var i;var n;for(n=0;n<r.length;n++){i=r[n];a=this._layers[i];if(a.isBuildin){t.call(e,a,i)}}},eachOtherLayer:function(t,e){var r=this._zlevelList;var a;var i;var n;for(n=0;n<r.length;n++){i=r[n];a=this._layers[i];if(!a.isBuildin){t.call(e,a,i)}}},getLayers:function(){return this._layers},_updateLayerStatus:function(t){var e=this._layers;var r={};this.eachBuildinLayer(function(t,e){r[e]=t.elCount;t.elCount=0});for(var a=0,i=t.length;a<i;a++){var n=t[a];var o=this._singleCanvas?0:n.zlevel;var s=e[o];if(s){s.elCount++;if(s.__dirty){continue}s.__dirty=n.__dirty}}this.eachBuildinLayer(function(t,e){if(r[e]!==t.elCount){t.__dirty=true}})},clear:function(){this.eachBuildinLayer(this._clearLayer);return this},_clearLayer:function(t){t.clear()},configLayer:function(t,e){if(e){var r=this._layerConfig;if(!r[t]){r[t]=e}else{i.merge(r[t],e,true)}var a=this._layers[t];if(a){i.merge(a,r[t],true)}}},delLayer:function(t){var e=this._layers;var r=this._zlevelList;var a=e[t];if(!a){return}a.dom.parentNode.removeChild(a.dom);delete e[t];r.splice(i.indexOf(r,t),1)},resize:function(t,e){var r=this._domRoot;r.style.display="none";t=t||this._getWidth();e=e||this._getHeight();r.style.display="";if(this._width!=t||e!=this._height){r.style.width=t+"px";r.style.height=e+"px";for(var a in this._layers){this._layers[a].resize(t,e)}this.refresh(true)}this._width=t;this._height=e;return this},clearLayer:function(t){var e=this._layers[t];if(e){e.clear()}},dispose:function(){this.root.innerHTML="";this.root=this.storage=this._domRoot=this._layers=null},getRenderedCanvas:function(t){t=t||{};if(this._singleCanvas){return this._layers[0].dom}var e=new s("image",this,t.pixelRatio||this.dpr);e.initContext();var r=e.ctx;e.clearColor=t.backgroundColor;e.clear();var a=this.storage.getDisplayList(true);for(var i=0;i<a.length;i++){var n=a[i];if(!n.invisible){n.beforeBrush&&n.beforeBrush(r);n.brush(r,false);n.afterBrush&&n.afterBrush(r)}}return e.dom},getWidth:function(){return this._width},getHeight:function(){return this._height},_getWidth:function(){var t=this.root;var e=document.defaultView.getComputedStyle(t);return(t.clientWidth||l(e.width)||l(t.style.width))-(l(e.paddingLeft)||0)-(l(e.paddingRight)||0)|0},_getHeight:function(){var t=this.root;var e=document.defaultView.getComputedStyle(t);return(t.clientHeight||l(e.height)||l(t.style.height))-(l(e.paddingTop)||0)-(l(e.paddingBottom)||0)|0},_pathToImage:function(t,e,a,i,n){var o=document.createElement("canvas");var s=o.getContext("2d");o.width=a*n;o.height=i*n;s.clearRect(0,0,a*n,i*n);var l={position:e.position,rotation:e.rotation,scale:e.scale};e.position=[0,0,0];e.rotation=0;e.scale=[1,1];if(e){e.brush(s)}var u=r(59);var h=new u({id:t,style:{x:0,y:0,image:o}});if(l.position!=null){h.position=e.position=l.position}if(l.rotation!=null){h.rotation=e.rotation=l.rotation}if(l.scale!=null){h.scale=e.scale=l.scale}return h},_createPathToImage:function(){var t=this;return function(e,r,a,i){return t._pathToImage(e,r,a,i,t.dpr)}}};t.exports=m},function(t,e,r){var a=r(3);var i=r(40);function n(){return false}function o(t,e,r,a){var i=document.createElement(e);var n=r.getWidth();var o=r.getHeight();var s=i.style;s.position="absolute";s.left=0;s.top=0;s.width=n+"px";s.height=o+"px";i.width=n*a;i.height=o*a;i.setAttribute("data-zr-dom-id",t);return i}var s=function(t,e,r){var s;r=r||i.devicePixelRatio;if(typeof t==="string"){s=o(t,"canvas",e,r)}else if(a.isObject(t)){s=t;t=s.id}this.id=t;this.dom=s;var l=s.style;if(l){s.onselectstart=n;l["-webkit-user-select"]="none";l["user-select"]="none";l["-webkit-touch-callout"]="none";l["-webkit-tap-highlight-color"]="rgba(0,0,0,0)"}this.domBack=null;this.ctxBack=null;this.painter=e;this.config=null;this.clearColor=0;this.motionBlur=false;this.lastFrameAlpha=.7;this.dpr=r};s.prototype={constructor:s,elCount:0,__dirty:true,initContext:function(){this.ctx=this.dom.getContext("2d");var t=this.dpr;if(t!=1){this.ctx.scale(t,t)}},createBackBuffer:function(){var t=this.dpr;this.domBack=o("back-"+this.id,"canvas",this.painter,t);this.ctxBack=this.domBack.getContext("2d");if(t!=1){this.ctxBack.scale(t,t)}},resize:function(t,e){var r=this.dpr;var a=this.dom;var i=a.style;var n=this.domBack;i.width=t+"px";i.height=e+"px";a.width=t*r;a.height=e*r;if(r!=1){this.ctx.scale(r,r)}if(n){n.width=t*r;n.height=e*r;if(r!=1){this.ctxBack.scale(r,r)}}},clear:function(t){var e=this.dom;var r=this.ctx;var a=e.width;var i=e.height;var n=this.clearColor;var o=this.motionBlur&&!t;var s=this.lastFrameAlpha;var l=this.dpr;if(o){if(!this.domBack){this.createBackBuffer()}this.ctxBack.globalCompositeOperation="copy";this.ctxBack.drawImage(e,0,0,a/l,i/l)}r.clearRect(0,0,a/l,i/l);if(n){r.save();r.fillStyle=this.clearColor;r.fillRect(0,0,a/l,i/l);r.restore()}if(o){var u=this.domBack;r.save();r.globalAlpha=s;r.drawImage(u,0,0,a/l,i/l);r.restore()}}};t.exports=s},function(t,e,r){var a=r(42);var i=r(3);var n=Math.PI;t.exports=function(t,e){e=e||{};i.defaults(e,{text:"loading",color:"#c23531",textColor:"#000",maskColor:"rgba(255, 255, 255, 0.8)",zlevel:0});var r=new a.Rect({style:{fill:e.maskColor},zlevel:e.zlevel,z:1e4});var o=new a.Arc({shape:{startAngle:-n/2,endAngle:-n/2+.1,r:10},style:{stroke:e.color,lineCap:"round",lineWidth:5},zlevel:e.zlevel,z:10001});var s=new a.Rect({style:{fill:"none",text:e.text,textPosition:"right",textDistance:10,textFill:e.textColor},zlevel:e.zlevel,z:10001});o.animateShape(true).when(1e3,{endAngle:n*3/2}).start("circularInOut");o.animateShape(true).when(1e3,{startAngle:n*3/2}).delay(300).start("circularInOut");var l=new a.Group;l.add(o);l.add(s);l.add(r);l.resize=function(){var e=t.getWidth()/2;var a=t.getHeight()/2;o.setShape({cx:e,cy:a});var i=o.shape.r;s.setShape({x:e-i,y:a-i,width:i*2,height:i*2});r.setShape({x:0,y:0,width:t.getWidth(),height:t.getHeight()})};l.resize();return l}},function(t,e,r){var a=r(4);t.exports=function(t,e,r){function i(t){var i=[e,"normal","color"];var n=r.get("color");var o=t.getData();var s=t.get(i)||n[t.seriesIndex%n.length];o.setVisual("color",s);if(!r.isSeriesFiltered(t)){if(typeof s==="function"&&!(s instanceof a)){o.each(function(e){o.setItemVisual(e,"color",s(t.getDataParams(e)))})}o.each(function(t){var e=o.getItemModel(t);var r=e.get(i,true);if(r!=null){o.setItemVisual(t,"color",r)}})}}t?r.eachSeriesByType(t,i):r.eachSeries(i)}},function(t,e,r){var a=r(3);var i=r(90);function n(t,e){e=e.split(",");var r=t;for(var a=0;a<e.length;a++){r=r&&r[e[a]];if(r==null){break}}return r}function o(t,e,r,a){e=e.split(",");var i=t;var n;for(var o=0;o<e.length-1;o++){n=e[o];if(i[n]==null){i[n]={}}i=i[n]}if(a||i[e[o]]==null){i[e[o]]=r}}function s(t){c(l,function(e){if(e[0]in t&&!(e[1]in t)){t[e[1]]=t[e[0]]}})}var l=[["x","left"],["y","top"],["x2","right"],["y2","bottom"]];var u=["grid","geo","parallel","legend","toolbox","title","visualMap","dataZoom","timeline"];var h=["bar","boxplot","candlestick","chord","effectScatter","funnel","gauge","lines","graph","heatmap","line","map","parallel","pie","radar","sankey","scatter","treemap"];var c=a.each;t.exports=function(t){c(t.series,function(t){if(!a.isObject(t)){return}var e=t.type;i(t);if(e==="pie"||e==="gauge"){if(t.clockWise!=null){t.clockwise=t.clockWise}}if(e==="gauge"){var r=n(t,"pointer.color");r!=null&&o(t,"itemStyle.normal.color",r)}for(var l=0;l<h.length;l++){if(h[l]===t.type){s(t);break}}});if(t.dataRange){t.visualMap=t.dataRange}c(u,function(e){var r=t[e];if(r){if(!a.isArray(r)){r=[r]}c(r,function(t){s(t)})}})}},function(t,e,r){var a=r(3);var i=["areaStyle","lineStyle","nodeStyle","linkStyle","chordStyle","label","labelLine"];function n(t){var e=t&&t.itemStyle;if(e){a.each(i,function(r){var i=e.normal;var n=e.emphasis;if(i&&i[r]){t[r]=t[r]||{};if(!t[r].normal){t[r].normal=i[r]}else{a.merge(t[r].normal,i[r])}i[r]=null}if(n&&n[r]){t[r]=t[r]||{};if(!t[r].emphasis){t[r].emphasis=n[r]}else{a.merge(t[r].emphasis,n[r])}n[r]=null}})}}t.exports=function(t){if(!t){return}n(t);n(t.markPoint);n(t.markLine);var e=t.data;if(e){for(var r=0;r<e.length;r++){n(e[r])}var i=t.markPoint;if(i&&i.data){var o=i.data;for(var r=0;r<o.length;r++){n(o[r])}}var s=t.markLine;if(s&&s.data){var l=s.data;for(var r=0;r<l.length;r++){if(a.isArray(l[r])){n(l[r][0]);n(l[r][1])}else{n(l[r])}}}}}},function(t,e,r){var a=r(3);var i=r(1);r(92);r(97);i.registerVisualCoding("chart",a.curry(r(103),"line","circle","line"));i.registerLayout(a.curry(r(104),"line"));i.registerProcessor("statistic",a.curry(r(105),"line"));r(106)},function(t,e,r){"use strict";var a=r(93);var i=r(27);t.exports=i.extend({type:"series.line",dependencies:["grid","polar"],getInitialData:function(t,e){return a(t.data,this,e)},defaultOption:{zlevel:0,z:2,coordinateSystem:"cartesian2d",legendHoverLink:true,hoverAnimation:true,xAxisIndex:0,yAxisIndex:0,polarIndex:0,clipOverflow:true,label:{normal:{position:"top"}},lineStyle:{normal:{width:2,type:"solid"}},symbol:"emptyCircle",symbolSize:4,showSymbol:true,animationEasing:"linear"}})},function(t,e,r){"use strict";var a=r(94);var i=r(96);var n=r(3);var o=r(5);var s=r(25);var l=o.getDataItemValue;var u=o.converDataValue;function h(t){var e=0;while(e<t.length&&t[e]==null){e++}return t[e]}function c(t){var e=h(t);return e!=null&&!n.isArray(l(e))}function v(t,e,r){t=t||[];var n=e.get("coordinateSystem");var o=p[n];var h=s.get(n);var v=o&&o(t,e,r);var f=v&&v.dimensions;if(!f){f=h&&h.dimensions||["x","y"];f=i(f,t,f.concat(["value"]))}var d=v&&v.categoryAxisModel;var m=f[0].type==="ordinal"?0:f[1].type==="ordinal"?1:-1;var y=new a(f,e);var x=g(v,t);var _=d&&c(t)?function(t,e,r,a){return a===m?r:u(l(t),f[a])}:function(t,e,r,a){var i=l(t);return u(i&&i[a],f[a])};y.initData(t,x,_);return y}function f(t){return t!=="category"&&t!=="time"}function d(t){return t==="category"?"ordinal":t==="time"?"time":"float"}var p={cartesian2d:function(t,e,r){var a=r.getComponent("xAxis",e.get("xAxisIndex"));var n=r.getComponent("yAxis",e.get("yAxisIndex"));var o=a.get("type");var s=n.get("type");var l=[{name:"x",type:d(o),stackable:f(o)},{name:"y",type:d(s),stackable:f(s)}];var u=o==="category";i(l,t,["x","y","z"]);return{dimensions:l,categoryIndex:u?0:1,categoryAxisModel:u?a:s==="category"?n:null}},polar:function(t,e,r){var a=e.get("polarIndex")||0;var n=function(t){return t.get("polarIndex")===a};var o=r.findComponents({mainType:"angleAxis",filter:n})[0];var s=r.findComponents({mainType:"radiusAxis",filter:n})[0];var l=s.get("type");var u=o.get("type");var h=[{name:"radius",type:d(l),stackable:f(l)},{name:"angle",type:d(u),stackable:f(u)}];var c=u==="category";i(h,t,["radius","angle","value"]);return{dimensions:h,categoryIndex:c?1:0,categoryAxisModel:c?o:l==="category"?s:null}},geo:function(t,e,r){return{dimensions:i([{name:"lng"},{name:"lat"}],t,["lng","lat","value"])}}};function g(t,e){var r=[];if(t&&t.categoryAxisModel){var a=t.categoryAxisModel.getCategories();if(a){var i=e.length;if(n.isArray(e[0])&&e[0].length>1){r=[];for(var o=0;o<i;o++){r[o]=a[e[o][t.categoryIndex||0]]}}else{r=a.slice(0)}}}return r}t.exports=v},function(t,e,r){(function(e){var a="undefined";var i=typeof window==="undefined"?e:window;var n=typeof i.Float64Array===a?Array:i.Float64Array;var o=typeof i.Int32Array===a?Array:i.Int32Array;var s={float:n,int:o,ordinal:Array,number:Array,time:Array};var l=r(8);var u=r(95);var h=r(3);var c=r(5);var v=h.isObject;var f=["stackedOn","_nameList","_idList","_rawData"];var d=function(t,e,r){h.each(f.concat(r||[]),function(r){if(e.hasOwnProperty(r)){t[r]=e[r]}})};var p=function(t,e){t=t||["x","y"];var r={};var a=[];for(var i=0;i<t.length;i++){var n;var o={};if(typeof t[i]==="string"){n=t[i];o={name:n,stackable:false,type:"number"}}else{o=t[i];n=o.name;o.type=o.type||"number"}a.push(n);r[n]=o}this.dimensions=a;this._dimensionInfos=r;this.hostModel=e;this.indices=[];this._storage={};this._nameList=[];this._idList=[];this._optionModels=[];this.stackedOn=null;this._visual={};this._layout={};this._itemVisuals=[];this._itemLayouts=[];this._graphicEls=[];this._rawData;this._extent};var g=p.prototype;g.type="list";g.getDimension=function(t){if(!isNaN(t)){t=this.dimensions[t]||t}return t};g.getDimensionInfo=function(t){return h.clone(this._dimensionInfos[this.getDimension(t)])};g.initData=function(t,e,r){t=t||[];this._rawData=t;var a=this._storage={};var i=this.indices=[];var n=this.dimensions;var o=t.length;var l=this._dimensionInfos;var u=[];var v={};e=e||[];for(var f=0;f<n.length;f++){var d=l[n[f]];var p=s[d.type];a[n[f]]=new p(o)}r=r||function(t,e,r,a){var i=c.getDataItemValue(t);return c.converDataValue(h.isArray(i)?i[a]:i,l[e])};for(var g=0;g<t.length;g++){var m=t[g];for(var y=0;y<n.length;y++){var x=n[y];var _=a[x];_[g]=r(m,x,g,y)}i.push(g)}for(var f=0;f<t.length;f++){var w="";if(!e[f]){e[f]=t[f].name;w=t[f].id}var b=e[f]||"";if(!w&&b){v[b]=v[b]||0;w=b;if(v[b]>0){w+="__ec__"+v[b]}v[b]++}w&&(u[f]=w)}this._nameList=e;this._idList=u};g.count=function(){return this.indices.length};g.get=function(t,e,r){var a=this._storage;var i=this.indices[e];if(i==null){return NaN}var n=a[t]&&a[t][i];if(r){var o=this._dimensionInfos[t];if(o&&o.stackable){var s=this.stackedOn;while(s){var l=s.get(t,e);if(n>=0&&l>0||n<=0&&l<0){n+=l}s=s.stackedOn}}}return n};g.getValues=function(t,e,r){var a=[];if(!h.isArray(t)){r=e;e=t;t=this.dimensions}for(var i=0,n=t.length;i<n;i++){a.push(this.get(t[i],e,r))}return a};g.hasValue=function(t){var e=this.dimensions;var r=this._dimensionInfos;for(var a=0,i=e.length;a<i;a++){if(r[e[a]].type!=="ordinal"&&isNaN(this.get(e[a],t))){return false}}return true};g.getDataExtent=function(t,e){var r=this._storage[t];var a=this.getDimensionInfo(t);e=a&&a.stackable&&e;var i=(this._extent||(this._extent={}))[t+!!e];var n;if(i){return i}if(r){var o=Infinity;var s=-Infinity;for(var l=0,u=this.count();l<u;l++){n=this.get(t,l,e);n<o&&(o=n);n>s&&(s=n)}return this._extent[t+e]=[o,s]}else{return[Infinity,-Infinity]}};g.getSum=function(t,e){var r=this._storage[t];var a=0;if(r){for(var i=0,n=this.count();i<n;i++){var o=this.get(t,i,e);if(!isNaN(o)){a+=o}}}return a};g.indexOf=function(t,e){var r=this._storage;var a=r[t];var i=this.indices;if(a){for(var n=0,o=i.length;n<o;n++){var s=i[n];if(a[s]===e){return n}}}return-1};g.indexOfName=function(t){var e=this.indices;var r=this._nameList;for(var a=0,i=e.length;a<i;a++){var n=e[a];if(r[n]===t){return a}}return-1};g.indexOfNearest=function(t,e,r){var a=this._storage;var i=a[t];if(i){var n=Number.MAX_VALUE;var o=-1;for(var s=0,l=this.count();s<l;s++){var u=e-this.get(t,s,r);var h=Math.abs(u);if(h<n||h===n&&u>0){n=h;o=s}}return o}return-1};g.getRawIndex=function(t){var e=this.indices[t];return e==null?-1:e};g.getName=function(t){return this._nameList[this.indices[t]]||""};g.getId=function(t){return this._idList[this.indices[t]]||this.getRawIndex(t)+""};function m(t){if(!h.isArray(t)){t=[t]}return t}g.each=function(t,e,r,a){if(typeof t==="function"){a=r;r=e;e=t;t=[]}t=h.map(m(t),this.getDimension,this);var i=[];var n=t.length;var o=this.indices;a=a||this;for(var s=0;s<o.length;s++){if(n===0){e.call(a,s)}else if(n===1){e.call(a,this.get(t[0],s,r),s)}else{for(var l=0;l<n;l++){i[l]=this.get(t[l],s,r)}i[l]=s;e.apply(a,i)}}};g.filterSelf=function(t,e,r,a){if(typeof t==="function"){a=r;r=e;e=t;t=[]}t=h.map(m(t),this.getDimension,this);var i=[];var n=[];var o=t.length;var s=this.indices;a=a||this;for(var l=0;l<s.length;l++){var u;if(o===1){u=e.call(a,this.get(t[0],l,r),l)}else{for(var c=0;c<o;c++){n[c]=this.get(t[c],l,r)}n[c]=l;u=e.apply(a,n)}if(u){i.push(s[l])}}this.indices=i;this._extent={};return this};g.mapArray=function(t,e,r,a){if(typeof t==="function"){a=r;r=e;e=t;t=[]}var i=[];this.each(t,function(){i.push(e&&e.apply(this,arguments))},r,a);return i};function y(t,e){var r=t.dimensions;var a=new p(h.map(r,t.getDimensionInfo,t),t.hostModel);d(a,t,t._wrappedMethods);var i=a._storage={};var n=t._storage;for(var o=0;o<r.length;o++){var s=r[o];var l=n[s];if(h.indexOf(e,s)>=0){i[s]=new l.constructor(n[s].length)}else{i[s]=n[s]}}return a}g.map=function(t,e,r,a){t=h.map(m(t),this.getDimension,this);var i=y(this,t);var n=i.indices=this.indices;var o=i._storage;var s=[];this.each(t,function(){var r=arguments[arguments.length-1];var a=e&&e.apply(this,arguments);if(a!=null){if(typeof a==="number"){s[0]=a;a=s}for(var i=0;i<a.length;i++){var l=t[i];var u=o[l];var h=n[r];if(u){u[h]=a[i]}}}},r,a);return i};g.downSample=function(t,e,r,a){var i=y(this,[t]);var n=this._storage;var o=i._storage;var s=this.indices;var l=i.indices=[];var u=[];var h=[];var c=Math.floor(1/e);var v=o[t];var f=this.count();for(var d=0;d<n[t].length;d++){o[t][d]=n[t][d]}for(var d=0;d<f;d+=c){if(c>f-d){c=f-d;u.length=c}for(var p=0;p<c;p++){var g=s[d+p];u[p]=v[g];h[p]=g}var m=r(u);var g=h[a(u,m)||0];v[g]=m;l.push(g)}return i};g.getItemModel=function(t){var e=this.hostModel;t=this.indices[t];return new l(this._rawData[t],e,e.ecModel)};g.diff=function(t){var e=this._idList;var r=t&&t._idList;return new u(t?t.indices:[],this.indices,function(t){return r[t]||t+""},function(t){return e[t]||t+""})};g.getVisual=function(t){var e=this._visual;return e&&e[t]};g.setVisual=function(t,e){if(v(t)){for(var r in t){if(t.hasOwnProperty(r)){this.setVisual(r,t[r])}}return}this._visual=this._visual||{};this._visual[t]=e};g.setLayout=function(t,e){if(v(t)){for(var r in t){if(t.hasOwnProperty(r)){this.setLayout(r,t[r])}}return}this._layout[t]=e};g.getLayout=function(t){return this._layout[t]};g.getItemLayout=function(t){return this._itemLayouts[t]},g.setItemLayout=function(t,e,r){this._itemLayouts[t]=r?h.extend(this._itemLayouts[t]||{},e):e},g.getItemVisual=function(t,e,r){var a=this._itemVisuals[t];var i=a&&a[e];if(i==null&&!r){return this.getVisual(e)}return i},g.setItemVisual=function(t,e,r){var a=this._itemVisuals[t]||{};this._itemVisuals[t]=a;if(v(e)){for(var i in e){if(e.hasOwnProperty(i)){a[i]=e[i]}}return}a[e]=r};var x=function(t){t.seriesIndex=this.seriesIndex;t.dataIndex=this.dataIndex};g.setItemGraphicEl=function(t,e){var r=this.hostModel;if(e){e.dataIndex=t;e.seriesIndex=r&&r.seriesIndex;if(e.type==="group"){e.traverse(x,e)}}this._graphicEls[t]=e};g.getItemGraphicEl=function(t){return this._graphicEls[t]};g.eachItemGraphicEl=function(t,e){h.each(this._graphicEls,function(r,a){if(r){t&&t.call(e,r,a)}})};g.cloneShallow=function(){var t=h.map(this.dimensions,this.getDimensionInfo,this);var e=new p(t,this.hostModel);e._storage=this._storage;d(e,this,this._wrappedMethods);e.indices=this.indices.slice();return e};g.wrapMethod=function(t,e){var r=this[t];if(typeof r!=="function"){return}this._wrappedMethods=this._wrappedMethods||[];this._wrappedMethods.push(t);this[t]=function(){var t=r.apply(this,arguments);return e.call(this,t)}};t.exports=p}).call(e,function(){return this}())},function(t,e){"use strict";function r(t){return t}function a(t,e,a,i){this._old=t;this._new=e;this._oldKeyGetter=a||r;this._newKeyGetter=i||r}a.prototype={constructor:a,add:function(t){this._add=t;return this},update:function(t){this._update=t;return this},remove:function(t){this._remove=t;return this},execute:function(){var t=this._old;var e=this._new;var r=this._oldKeyGetter;var a=this._newKeyGetter;var n={};var o={};var s;i(t,n,r);i(e,o,a);for(s=0;s<t.length;s++){var l=r(t[s]);var u=o[l];if(u!=null){var h=u.length;if(h){h===1&&(o[l]=null);u=u.unshift()}else{o[l]=null}this._update&&this._update(u,s)}else{this._remove&&this._remove(s)}}for(var l in o){if(o.hasOwnProperty(l)){var u=o[l];if(u==null){continue}if(!u.length){this._add&&this._add(u)}else{for(var s=0,h=u.length;s<h;s++){this._add&&this._add(u[s])}}}}}};function i(t,e,r){for(var a=0;a<t.length;a++){var i=r(t[a]);var n=e[i];if(n==null){e[i]=a}else{if(!n.length){e[i]=n=[n]}n.push(a)}}}t.exports=a},function(t,e,r){var a=r(3);function i(t,e,r,i){if(!e){return t}var s=o(e[0]);var l=a.isArray(s)&&s.length||1;r=r||[];i=i||"extra";for(var u=0;u<l;u++){if(!t[u]){var h=r[u]||i+(u-r.length);t[u]=n(e,u)?{type:"ordinal",name:h}:h}}return t}function n(t,e){for(var r=0,i=t.length;r<i;r++){var n=o(t[r]);if(!a.isArray(n)){return false}var n=n[e];if(n!=null&&isFinite(n)){return false}else if(a.isString(n)&&n!=="-"){return true}}return false}function o(t){return a.isArray(t)?t:a.isObject(t)?t.value:t}t.exports=i},function(t,e,r){"use strict";var a=r(3);var i=r(98);var n=r(99);var o=r(101);var s=r(42);var l=r(102);var u=r(41);function h(t,e){if(t.length!==e.length){return}for(var r=0;r<t.length;r++){var a=t[r];var i=e[r];if(a[0]!==i[0]||a[1]!==i[1]){return}}return true}function c(t){return typeof t==="number"?t:t?.3:0}function v(t){var e=t.getGlobalExtent();if(t.onBand){var r=t.getBandWidth()/2-1;var a=e[1]>e[0]?1:-1;e[0]+=a*r;e[1]-=a*r}return e}function f(t){return t>=0?1:-1}function d(t,e){var r=t.getBaseAxis();var a=t.getOtherAxis(r);var i=r.onZero?0:a.scale.getExtent()[0];var n=a.dim;var o=n==="x"||n==="radius"?1:0;return e.mapArray([n],function(a,s){var l;var u=e.stackedOn;while(u&&f(u.get(n,s))===f(a)){l=u;break}var h=[];h[o]=e.get(r.dim,s);h[1-o]=l?l.get(n,s,true):i;return t.dataToPoint(h)},true)}function p(t,e){if(e.dataIndex!=null){return e.dataIndex}else if(e.name!=null){return t.indexOfName(e.name)}}function g(t,e,r){var a=v(t.getAxis("x"));var i=v(t.getAxis("y"));var n=t.getBaseAxis().isHorizontal();var o=a[0];var l=i[0];var u=a[1]-o;var h=i[1]-l;if(!r.get("clipOverflow")){if(n){l-=h;h*=3}else{o-=u;u*=3}}var c=new s.Rect({shape:{x:o,y:l,width:u,height:h}});if(e){c.shape[n?"width":"height"]=0;s.initProps(c,{shape:{width:u,height:h}},r)}return c}function m(t,e,r){var a=t.getAngleAxis();var i=t.getRadiusAxis();var n=i.getExtent();var o=a.getExtent();var l=Math.PI/180;var u=new s.Sector({shape:{cx:t.cx,cy:t.cy,r0:n[0],r:n[1],startAngle:-o[0]*l,endAngle:-o[1]*l,clockwise:a.inverse}});if(e){u.shape.endAngle=-o[0]*l;s.initProps(u,{shape:{endAngle:-o[1]*l}},r)}return u}function y(t,e,r){return t.type==="polar"?m(t,e,r):g(t,e,r)}t.exports=u.extend({type:"line",init:function(){var t=new s.Group;var e=new i;this.group.add(e.group);this._symbolDraw=e;this._lineGroup=t},render:function(t,e,r){var i=t.coordinateSystem;var n=this.group;var o=t.getData();var s=t.getModel("lineStyle.normal");var l=t.getModel("areaStyle.normal");var u=o.mapArray(o.getItemLayout,true);var v=i.type==="polar";var f=this._coordSys;var p=this._symbolDraw;var g=this._polyline;var m=this._polygon;var x=this._lineGroup;var _=t.get("animation");var w=!l.isEmpty();var b=d(i,o);var M=t.get("showSymbol");var S=M&&!v&&!t.get("showAllSymbol")&&this._getSymbolIgnoreFunc(o,i);var I=this._data;I&&I.eachItemGraphicEl(function(t,e){if(t.__temp){n.remove(t);I.setItemGraphicEl(e,null)}});if(!M){p.remove()}n.add(x);if(!(g&&f.type===i.type)){M&&p.updateData(o,S);g=this._newPolyline(u,i,_);if(w){m=this._newPolygon(u,b,i,_)}x.setClipPath(y(i,true,t))}else{if(w&&!m){m=this._newPolygon(u,b,i,_)}else if(m&&!w){x.remove(m);m=this._polygon=null}x.setClipPath(y(i,false,t));M&&p.updateData(o,S);o.eachItemGraphicEl(function(t){t.stopAnimation(true)});if(!h(this._stackedOnPoints,b)||!h(this._points,u)){if(_){this._updateAnimation(o,b,i,r)}else{g.setShape({points:u});m&&m.setShape({points:u,stackedOnPoints:b})}}}g.setStyle(a.defaults(s.getLineStyle(),{stroke:o.getVisual("color"),lineJoin:"bevel"}));var A=t.get("smooth");A=c(t.get("smooth"));g.setShape({smooth:A,smoothMonotone:t.get("smoothMonotone")});if(m){var T=o.stackedOn;var C=0;m.style.opacity=.7;m.setStyle(a.defaults(l.getAreaStyle(),{fill:o.getVisual("color"),lineJoin:"bevel"}));if(T){var L=T.hostModel;C=c(L.get("smooth"))}m.setShape({smooth:A,stackedOnSmooth:C,smoothMonotone:t.get("smoothMonotone")})}this._data=o;this._coordSys=i;this._stackedOnPoints=b;this._points=u},highlight:function(t,e,r,a){var i=t.getData();var o=p(i,a);if(o!=null&&o>=0){var s=i.getItemGraphicEl(o);if(!s){var l=i.getItemLayout(o);s=new n(i,o,r);s.position=l;s.setZ(t.get("zlevel"),t.get("z"));s.ignore=isNaN(l[0])||isNaN(l[1]);s.__temp=true;i.setItemGraphicEl(o,s);s.stopSymbolAnimation(true);this.group.add(s)}s.highlight()}else{u.prototype.highlight.call(this,t,e,r,a)}},downplay:function(t,e,r,a){var i=t.getData();var n=p(i,a);if(n!=null&&n>=0){var o=i.getItemGraphicEl(n);if(o){if(o.__temp){i.setItemGraphicEl(n,null);this.group.remove(o)}else{o.downplay()}}}else{u.prototype.downplay.call(this,t,e,r,a)}},_newPolyline:function(t){var e=this._polyline;if(e){this._lineGroup.remove(e)}e=new l.Polyline({shape:{points:t},silent:true,z2:10});this._lineGroup.add(e);this._polyline=e;return e},_newPolygon:function(t,e){var r=this._polygon;if(r){this._lineGroup.remove(r)}r=new l.Polygon({shape:{points:t,stackedOnPoints:e},silent:true});this._lineGroup.add(r);this._polygon=r;return r},_getSymbolIgnoreFunc:function(t,e){var r=e.getAxesByScale("ordinal")[0];if(r&&r.isLabelIgnored){return a.bind(r.isLabelIgnored,r)}},_updateAnimation:function(t,e,r,a){var i=this._polyline;var n=this._polygon;var l=t.hostModel;var u=o(this._data,t,this._stackedOnPoints,e,this._coordSys,r);i.shape.points=u.current;s.updateProps(i,{shape:{points:u.next}},l);if(n){n.setShape({points:u.current,stackedOnPoints:u.stackedOnCurrent});s.updateProps(n,{shape:{points:u.next,stackedOnPoints:u.stackedOnNext}},l)}var h=[];var c=u.status;for(var v=0;v<c.length;v++){var f=c[v].cmd;if(f==="="){var d=t.getItemGraphicEl(c[v].idx1);if(d){h.push({el:d,ptIdx:v})}}}if(i.animators&&i.animators.length){i.animators[0].during(function(){for(var t=0;t<h.length;t++){var e=h[t].el;e.attr("position",i.shape.points[h[t].ptIdx])}})}},remove:function(t){var e=this.group;var r=this._data;this._lineGroup.removeAll();this._symbolDraw.remove(true);r&&r.eachItemGraphicEl(function(t,a){if(t.__temp){e.remove(t);r.setItemGraphicEl(a,null)}});this._polyline=this._polygon=this._coordSys=this._points=this._stackedOnPoints=this._data=null}})},function(t,e,r){var a=r(42);var i=r(99);function n(t){this.group=new a.Group;this._symbolCtor=t||i}var o=n.prototype;function s(t,e,r){var a=t.getItemLayout(e);return a&&!isNaN(a[0])&&!isNaN(a[1])&&!(r&&r(e))&&t.getItemVisual(e,"symbol")!=="none"}o.updateData=function(t,e){var r=this.group;var i=t.hostModel;var n=this._data;var o=this._symbolCtor;t.diff(n).add(function(a){
var i=t.getItemLayout(a);if(s(t,a,e)){var n=new o(t,a);n.attr("position",i);t.setItemGraphicEl(a,n);r.add(n)}}).update(function(l,u){var h=n.getItemGraphicEl(u);var c=t.getItemLayout(l);if(!s(t,l,e)){r.remove(h);return}if(!h){h=new o(t,l);h.attr("position",c)}else{h.updateData(t,l);a.updateProps(h,{position:c},i)}r.add(h);t.setItemGraphicEl(l,h)}).remove(function(t){var e=n.getItemGraphicEl(t);e&&e.fadeOut(function(){r.remove(e)})}).execute();this._data=t};o.updateLayout=function(){var t=this._data;if(t){t.eachItemGraphicEl(function(e,r){e.attr("position",t.getItemLayout(r))})}};o.remove=function(t){var e=this.group;var r=this._data;if(r){if(t){r.eachItemGraphicEl(function(t){t.fadeOut(function(){e.remove(t)})})}else{e.removeAll()}}};t.exports=n},function(t,e,r){var a=r(3);var i=r(100);var n=r(42);var o=r(7);function s(t){if(!a.isArray(t)){t=[+t,+t]}return t}function l(t,e){n.Group.call(this);this.updateData(t,e)}var u=l.prototype;function h(t,e){this.parent.drift(t,e)}u._createSymbol=function(t,e,r){this.removeAll();var a=e.hostModel;var o=e.getItemVisual(r,"color");var l=i.createSymbol(t,-.5,-.5,1,1,o);l.attr({style:{strokeNoScale:true},z2:100,culling:true,scale:[0,0]});l.drift=h;var u=s(e.getItemVisual(r,"symbolSize"));n.initProps(l,{scale:u},a);this._symbolType=t;this.add(l)};u.stopSymbolAnimation=function(t){this.childAt(0).stopAnimation(t)};u.getScale=function(){return this.childAt(0).scale};u.highlight=function(){this.childAt(0).trigger("emphasis")};u.downplay=function(){this.childAt(0).trigger("normal")};u.setZ=function(t,e){var r=this.childAt(0);r.zlevel=t;r.z=e};u.setDraggable=function(t){var e=this.childAt(0);e.draggable=t;e.cursor=t?"move":"pointer"};u.updateData=function(t,e){var r=t.getItemVisual(e,"symbol")||"circle";var a=t.hostModel;var i=s(t.getItemVisual(e,"symbolSize"));if(r!==this._symbolType){this._createSymbol(r,t,e)}else{var o=this.childAt(0);n.updateProps(o,{scale:i},a)}this._updateCommon(t,e,i);this._seriesModel=a};var c=["itemStyle","normal"];var v=["itemStyle","emphasis"];var f=["label","normal"];var d=["label","emphasis"];u._updateCommon=function(t,e,r){var i=this.childAt(0);var l=t.hostModel;var u=t.getItemModel(e);var h=u.getModel(c);var p=t.getItemVisual(e,"color");var g=u.getModel(v).getItemStyle();i.rotation=u.getShallow("symbolRotate")*Math.PI/180||0;var m=u.getShallow("symbolOffset");if(m){var y=i.position;y[0]=o.parsePercent(m[0],r[0]);y[1]=o.parsePercent(m[1],r[1])}i.setColor(p);a.extend(i.style,h.getItemStyle(["color"]));var x=u.getModel(f);var _=u.getModel(d);var w=i.style;var b=t.dimensions.slice();var M=b.pop();var S;while((S=t.getDimensionInfo(M).type)==="ordinal"||S==="time"){M=b.pop()}if(x.get("show")){n.setText(w,x,p);w.text=a.retrieve(l.getFormattedLabel(e,"normal"),t.get(M,e))}else{w.text=""}if(_.getShallow("show")){n.setText(g,_,p);g.text=a.retrieve(l.getFormattedLabel(e,"emphasis"),t.get(M,e))}else{g.text=""}var I=s(t.getItemVisual(e,"symbolSize"));i.off("mouseover").off("mouseout").off("emphasis").off("normal");n.setHoverStyle(i,g);if(u.getShallow("hoverAnimation")){var A=function(){var t=I[1]/I[0];this.animateTo({scale:[Math.max(I[0]*1.1,I[0]+3),Math.max(I[1]*1.1,I[1]+3*t)]},400,"elasticOut")};var T=function(){this.animateTo({scale:I},400,"elasticOut")};i.on("mouseover",A).on("mouseout",T).on("emphasis",A).on("normal",T)}};u.fadeOut=function(t){var e=this.childAt(0);e.style.text="";n.updateProps(e,{scale:[0,0]},this._seriesModel,t)};a.inherits(l,n.Group);t.exports=l},function(t,e,r){"use strict";var a=r(42);var i=r(15);var n=a.extendShape({type:"triangle",shape:{cx:0,cy:0,width:0,height:0},buildPath:function(t,e){var r=e.cx;var a=e.cy;var i=e.width/2;var n=e.height/2;t.moveTo(r,a-n);t.lineTo(r+i,a+n);t.lineTo(r-i,a+n);t.closePath()}});var o=a.extendShape({type:"diamond",shape:{cx:0,cy:0,width:0,height:0},buildPath:function(t,e){var r=e.cx;var a=e.cy;var i=e.width/2;var n=e.height/2;t.moveTo(r,a-n);t.lineTo(r+i,a);t.lineTo(r,a+n);t.lineTo(r-i,a);t.closePath()}});var s=a.extendShape({type:"pin",shape:{x:0,y:0,width:0,height:0},buildPath:function(t,e){var r=e.x;var a=e.y;var i=e.width/5*3;var n=Math.max(i,e.height);var o=i/2;var s=o*o/(n-o);var l=a-n+o+s;var u=Math.asin(s/o);var h=Math.cos(u)*o;var c=Math.sin(u);var v=Math.cos(u);t.arc(r,l,o,Math.PI-u,Math.PI*2+u);var f=o*.6;var d=o*.7;t.bezierCurveTo(r+h-c*f,l+s+v*f,r,a-d,r,a);t.bezierCurveTo(r,a-d,r-h+c*f,l+s+v*f,r-h,l+s);t.closePath()}});var l=a.extendShape({type:"arrow",shape:{x:0,y:0,width:0,height:0},buildPath:function(t,e){var r=e.height;var a=e.width;var i=e.x;var n=e.y;var o=a/3*2;t.moveTo(i,n);t.lineTo(i+o,n+r);t.lineTo(i,n+r/4*3);t.lineTo(i-o,n+r);t.lineTo(i,n);t.closePath()}});var u={line:a.Line,rect:a.Rect,roundRect:a.Rect,square:a.Rect,circle:a.Circle,diamond:o,pin:s,arrow:l,triangle:n};var h={line:function(t,e,r,a,i){i.x1=t;i.y1=e+a/2;i.x2=t+r;i.y2=e+a/2},rect:function(t,e,r,a,i){i.x=t;i.y=e;i.width=r;i.height=a},roundRect:function(t,e,r,a,i){i.x=t;i.y=e;i.width=r;i.height=a;i.r=Math.min(r,a)/4},square:function(t,e,r,a,i){var n=Math.min(r,a);i.x=t;i.y=e;i.width=n;i.height=n},circle:function(t,e,r,a,i){i.cx=t+r/2;i.cy=e+a/2;i.r=Math.min(r,a)/2},diamond:function(t,e,r,a,i){i.cx=t+r/2;i.cy=e+a/2;i.width=r;i.height=a},pin:function(t,e,r,a,i){i.x=t+r/2;i.y=e+a/2;i.width=r;i.height=a},arrow:function(t,e,r,a,i){i.x=t+r/2;i.y=e+a/2;i.width=r;i.height=a},triangle:function(t,e,r,a,i){i.cx=t+r/2;i.cy=e+a/2;i.width=r;i.height=a}};var c={};for(var v in u){c[v]=new u[v]}var f=a.extendShape({type:"symbol",shape:{symbolType:"",x:0,y:0,width:0,height:0},beforeBrush:function(){var t=this.style;var e=this.shape;if(e.symbolType==="pin"&&t.textPosition==="inside"){t.textPosition=["50%","40%"];t.textAlign="center";t.textVerticalAlign="middle"}},buildPath:function(t,e){var r=e.symbolType;var a=c[r];if(e.symbolType!=="none"){if(!a){r="rect";a=c[r]}h[r](e.x,e.y,e.width,e.height,a.shape);a.buildPath(t,a.shape)}}});var d=function(t){if(this.type!=="image"){var e=this.style;var r=this.shape;if(r&&r.symbolType==="line"){e.stroke=t}else if(this.__isEmptyBrush){e.stroke=t;e.fill="#fff"}else{e.fill&&(e.fill=t);e.stroke&&(e.stroke=t)}this.dirty()}};var p={createSymbol:function(t,e,r,n,o,s){var l=t.indexOf("empty")===0;if(l){t=t.substr(5,1).toLowerCase()+t.substr(6)}var u;if(t.indexOf("image://")===0){u=new a.Image({style:{image:t.slice(8),x:e,y:r,width:n,height:o}})}else if(t.indexOf("path://")===0){u=a.makePath(t.slice(7),{},new i(e,r,n,o))}else{u=new f({shape:{symbolType:t,x:e,y:r,width:n,height:o}})}u.__isEmptyBrush=l;u.setColor=d;u.setColor(s);return u}};t.exports=p},function(t,e){function r(t){return t>=0?1:-1}function a(t,e,a){var i=t.getBaseAxis();var n=t.getOtherAxis(i);var o=i.onZero?0:n.scale.getExtent()[0];var s=n.dim;var l=s==="x"||s==="radius"?1:0;var u;var h=e.stackedOn;var c=e.get(s,a);while(h&&r(h.get(s,a))===r(c)){u=h;break}var v=[];v[l]=e.get(i.dim,a);v[1-l]=u?u.get(s,a,true):o;return t.dataToPoint(v)}function i(t,e){var r=[];e.diff(t).add(function(t){r.push({cmd:"+",idx:t})}).update(function(t,e){r.push({cmd:"=",idx:e,idx1:t})}).remove(function(t){r.push({cmd:"-",idx:t})}).execute();return r}t.exports=function(t,e,r,n,o,s){var l=i(t,e);var u=[];var h=[];var c=[];var v=[];var f=[];var d=[];var p=[];var g=s.dimensions;for(var m=0;m<l.length;m++){var y=l[m];var x=true;switch(y.cmd){case"=":var _=t.getItemLayout(y.idx);var w=e.getItemLayout(y.idx1);if(isNaN(_[0])||isNaN(_[1])){_=w.slice()}u.push(_);h.push(w);c.push(r[y.idx]);v.push(n[y.idx1]);p.push(e.getRawIndex(y.idx1));break;case"+":var b=y.idx;u.push(o.dataToPoint([e.get(g[0],b,true),e.get(g[1],b,true)]));h.push(e.getItemLayout(b).slice());c.push(a(o,e,b));v.push(n[b]);p.push(e.getRawIndex(b));break;case"-":var b=y.idx;var M=t.getRawIndex(b);if(M!==b){u.push(t.getItemLayout(b));h.push(s.dataToPoint([t.get(g[0],b,true),t.get(g[1],b,true)]));c.push(r[b]);v.push(a(s,t,b));p.push(M)}else{x=false}}if(x){f.push(y);d.push(d.length)}}d.sort(function(t,e){return p[t]-p[e]});var S=[];var I=[];var A=[];var T=[];var C=[];for(var m=0;m<d.length;m++){var b=d[m];S[m]=u[b];I[m]=h[b];A[m]=c[b];T[m]=v[b];C[m]=f[b]}return{current:S,next:I,stackedOnCurrent:A,stackedOnNext:T,status:C}}},function(t,e,r){var a=r(44);var i=r(16);var n=i.min;var o=i.max;var s=i.scaleAndAdd;var l=i.copy;var u=[];var h=[];var c=[];function v(t,e,r,a,v,f,d,p,g,m){var y=r;for(var x=0;x<v;x++){var _=e[y];if(y>=a||y<0||isNaN(_[0])||isNaN(_[1])){break}if(y===r){t[f>0?"moveTo":"lineTo"](_[0],_[1]);l(h,_)}else{if(g>0){var w=y-f;var b=y+f;var M=.5;var S=e[w];var I=e[b];if(f>0&&(y===v-1||isNaN(I[0])||isNaN(I[1]))||f<=0&&(y===0||isNaN(I[0])||isNaN(I[1]))){l(c,_)}else{if(isNaN(I[0])||isNaN(I[1])){I=_}i.sub(u,I,S);var A;var T;if(m==="x"||m==="y"){var C=m==="x"?0:1;A=Math.abs(_[C]-S[C]);T=Math.abs(_[C]-I[C])}else{A=i.dist(_,S);T=i.dist(_,I)}M=T/(T+A);s(c,_,u,-g*(1-M))}n(h,h,p);o(h,h,d);n(c,c,p);o(c,c,d);t.bezierCurveTo(h[0],h[1],c[0],c[1],_[0],_[1]);s(h,_,u,g*M)}else{t.lineTo(_[0],_[1])}}y+=f}return x}function f(t,e){var r=[Infinity,Infinity];var a=[-Infinity,-Infinity];if(e){for(var i=0;i<t.length;i++){var n=t[i];if(n[0]<r[0]){r[0]=n[0]}if(n[1]<r[1]){r[1]=n[1]}if(n[0]>a[0]){a[0]=n[0]}if(n[1]>a[1]){a[1]=n[1]}}}return{min:e?r:a,max:e?a:r}}t.exports={Polyline:a.extend({type:"ec-polyline",shape:{points:[],smooth:0,smoothConstraint:true,smoothMonotone:null},style:{fill:null,stroke:"#000"},buildPath:function(t,e){var r=e.points;var a=0;var i=r.length;var n=f(r,e.smoothConstraint);while(a<i){a+=v(t,r,a,i,i,1,n.min,n.max,e.smooth,e.smoothMonotone)+1}}}),Polygon:a.extend({type:"ec-polygon",shape:{points:[],stackedOnPoints:[],smooth:0,stackedOnSmooth:0,smoothConstraint:true,smoothMonotone:null},buildPath:function(t,e){var r=e.points;var a=e.stackedOnPoints;var i=0;var n=r.length;var o=e.smoothMonotone;var s=f(r,e.smoothConstraint);var l=f(a,e.smoothConstraint);while(i<n){var u=v(t,r,i,n,n,1,s.min,s.max,e.smooth,o);v(t,a,i+u-1,n,u,-1,l.min,l.max,e.stackedOnSmooth,o);i+=u+1;t.closePath()}}})}},function(t,e){t.exports=function(t,e,r,a,i){a.eachRawSeriesByType(t,function(t){var i=t.getData();var n=t.get("symbol")||e;var o=t.get("symbolSize");i.setVisual({legendSymbol:r||n,symbol:n,symbolSize:o});if(!a.isSeriesFiltered(t)){if(typeof o==="function"){i.each(function(e){var r=t.getRawValue(e);var a=t.getDataParams(e);i.setItemVisual(e,"symbolSize",o(r,a))})}i.each(function(t){var e=i.getItemModel(t);var r=e.get("symbol",true);var a=e.get("symbolSize",true);if(r!=null){i.setItemVisual(t,"symbol",r)}if(a!=null){i.setItemVisual(t,"symbolSize",a)}})}})}},function(t,e){t.exports=function(t,e,r){e.eachSeriesByType(t,function(t){var e=t.getData();var r=t.coordinateSystem;var a=r.dimensions;e.each(a,function(t,a,i){var n;if(!isNaN(t)&&!isNaN(a)){n=r.dataToPoint([t,a])}else{n=[NaN,NaN]}e.setItemLayout(i,n)},true)})}},function(t,e){var r={average:function(t){var e=0;var r=0;for(var a=0;a<t.length;a++){if(!isNaN(t[a])){e+=t[a];r++}}return r===0?NaN:e/r},sum:function(t){var e=0;for(var r=0;r<t.length;r++){e+=t[r]||0}return e},max:function(t){var e=-Infinity;for(var r=0;r<t.length;r++){t[r]>e&&(e=t[r])}return e},min:function(t){var e=Infinity;for(var r=0;r<t.length;r++){t[r]<e&&(e=t[r])}return e}};var a=function(t,e){return Math.round(t.length/2)};t.exports=function(t,e,i){e.eachSeriesByType(t,function(t){var e=t.getData();var i=t.get("sampling");var n=t.coordinateSystem;if(n.type==="cartesian2d"&&i){var o=n.getBaseAxis();var s=n.getOtherAxis(o);var l=o.getExtent();var u=l[1]-l[0];var h=Math.round(e.count()/u);if(h>1){var c;if(typeof i==="string"){c=r[i]}else if(typeof i==="function"){c=i}if(c){e=e.downSample(s.dim,1/h,c,a);t.setData(e)}}}},this)}},function(t,e,r){"use strict";var a=r(42);var i=r(3);r(107);r(124);r(1).extendComponentView({type:"grid",render:function(t,e){this.group.removeAll();if(t.get("show")){this.group.add(new a.Rect({shape:t.coordinateSystem.getRect(),style:i.defaults({fill:t.get("backgroundColor")},t.getItemStyle()),silent:true}))}}})},function(t,e,r){var a=e;var i=r(21);var n=r(108);var o=r(3);var s=r(114);var l=r(116);var u=o.each;var h=n.ifAxisCrossZero;var c=n.niceScaleExtent;r(119);function v(t,e,r){return r.getComponent("grid",t.get("gridIndex"))===e}function f(t){var e=t.model;var r=e.getFormattedLabels();var a;var i=1;var n=r.length;if(n>40){i=Math.ceil(n/40)}for(var o=0;o<n;o+=i){if(!t.isLabelIgnored(o)){var s=e.getTextRect(r[o]);a?a.union(s):a=s}}return a}function d(t,e,r){this._coordsMap={};this._coordsList=[];this._axesMap={};this._axesList=[];this._initCartesian(t,e,r);this._model=t}var p=d.prototype;p.type="grid";p.getRect=function(){return this._rect};p.update=function(t,e){var r=this._axesMap;this._updateScale(t,this._model);function a(t){var e=r[t];for(var a in e){var i=e[a];if(i&&(i.type==="category"||!h(i))){return true}}return false}u(r.x,function(t){c(t,t.model)});u(r.y,function(t){c(t,t.model)});u(r.x,function(t){if(a("y")){t.onZero=false}});u(r.y,function(t){if(a("x")){t.onZero=false}});this.resize(this._model,e)};p.resize=function(t,e){var r=i.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()});this._rect=r;var a=this._axesList;n();if(t.get("containLabel")){u(a,function(t){if(!t.model.get("axisLabel.inside")){var e=f(t);if(e){var a=t.isHorizontal()?"height":"width";var i=t.model.get("axisLabel.margin");r[a]-=e[a]+i;if(t.position==="top"){r.y+=e.height+i}else if(t.position==="left"){r.x+=e.width+i}}}});n()}function n(){u(a,function(t){var e=t.isHorizontal();var a=e?[0,r.width]:[0,r.height];var i=t.inverse?1:0;t.setExtent(a[i],a[1-i]);g(t,e?r.x:r.y)})}};p.getAxis=function(t,e){var r=this._axesMap[t];if(r!=null){if(e==null){for(var a in r){return r[a]}}return r[e]}};p.getCartesian=function(t,e){var r="x"+t+"y"+e;return this._coordsMap[r]};p._initCartesian=function(t,e,r){var a={left:false,right:false,top:false,bottom:false};var i={x:{},y:{}};var o={x:0,y:0};e.eachComponent("xAxis",h("x"),this);e.eachComponent("yAxis",h("y"),this);if(!o.x||!o.y){this._axesMap={};this._axesList=[];return}this._axesMap=i;u(i.x,function(t,e){u(i.y,function(r,a){var i="x"+e+"y"+a;var n=new s(i);n.grid=this;this._coordsMap[i]=n;this._coordsList.push(n);n.addAxis(t);n.addAxis(r)},this)},this);function h(r){return function(s,u){if(!v(s,t,e)){return}var h=s.get("position");if(r==="x"){if(h!=="top"&&h!=="bottom"){h="bottom"}if(a[h]){h=h==="top"?"bottom":"top"}}else{if(h!=="left"&&h!=="right"){h="left"}if(a[h]){h=h==="left"?"right":"left"}}a[h]=true;var c=new l(r,n.createScaleByModel(s),[0,0],s.get("type"),h);var f=c.type==="category";c.onBand=f&&s.get("boundaryGap");c.inverse=s.get("inverse");c.onZero=s.get("axisLine.onZero");s.axis=c;c.model=s;c.index=u;this._axesList.push(c);i[r][u]=c;o[r]++}}};p._updateScale=function(t,e){o.each(this._axesList,function(t){t.scale.setExtent(Infinity,-Infinity)});t.eachSeries(function(a){if(a.get("coordinateSystem")==="cartesian2d"){var i=a.get("xAxisIndex");var n=a.get("yAxisIndex");var o=t.getComponent("xAxis",i);var s=t.getComponent("yAxis",n);if(!v(o,e,t)||!v(s,e,t)){return}var l=this.getCartesian(i,n);var u=a.getData();var h=l.getAxis("x");var c=l.getAxis("y");if(u.type==="list"){r(u,h,a);r(u,c,a)}}},this);function r(t,e,r){u(r.coordDimToDataDim(e.dim),function(r){e.scale.unionExtent(t.getDataExtent(r,e.scale.type!=="ordinal"))})}};function g(t,e){var r=t.getExtent();var a=r[0]+r[1];t.toGlobalCoord=t.dim==="x"?function(t){return t+e}:function(t){return a-t+e};t.toLocalCoord=t.dim==="x"?function(t){return t-e}:function(t){return a-t+e}}d.create=function(t,e){var r=[];t.eachComponent("grid",function(a,i){var n=new d(a,t,e);n.name="grid_"+i;n.resize(a,e);a.coordinateSystem=n;r.push(n)});t.eachSeries(function(e){if(e.get("coordinateSystem")!=="cartesian2d"){return}var a=e.get("xAxisIndex");var i=t.getComponent("xAxis",a);var n=r[i.get("gridIndex")];e.coordinateSystem=n.getCartesian(a,e.get("yAxisIndex"))});return r};d.dimensions=s.prototype.dimensions;r(25).register("cartesian2d",d);t.exports=d},function(t,e,r){var a=r(109);var i=r(111);r(112);r(113);var n=r(110);var o=r(7);var s=r(3);var l=r(14);var u={};u.getScaleExtent=function(t,e){var r=t.scale;var a=r.getExtent();var i=a[1]-a[0];if(r.type==="ordinal"){if(!isFinite(i)){return[0,0]}else{return a}}var n=e.getMin?e.getMin():e.get("min");var l=e.getMax?e.getMax():e.get("max");var u=e.getNeedCrossZero?e.getNeedCrossZero():!e.get("scale");var h=e.get("boundaryGap");if(!s.isArray(h)){h=[h||0,h||0]}h[0]=o.parsePercent(h[0],1);h[1]=o.parsePercent(h[1],1);var c=true;var v=true;if(n==null){n=a[0]-h[0]*i;c=false}if(l==null){l=a[1]+h[1]*i;v=false}if(n==="dataMin"){n=a[0]}if(l==="dataMax"){l=a[1]}if(u){if(n>0&&l>0&&!c){n=0}if(n<0&&l<0&&!v){l=0}}return[n,l]};u.niceScaleExtent=function(t,e){var r=t.scale;var a=u.getScaleExtent(t,e);var i=(e.getMin?e.getMin():e.get("min"))!=null;var n=(e.getMax?e.getMax():e.get("max"))!=null;r.setExtent(a[0],a[1]);r.niceExtent(e.get("splitNumber"),i,n);var o=e.get("interval");if(o!=null){r.setInterval&&r.setInterval(o)}};u.createScaleByModel=function(t,e){e=e||t.get("type");if(e){switch(e){case"category":return new a(t.getCategories(),[Infinity,-Infinity]);case"value":return new i;default:return(n.getClass(e)||i).create(t)}}};u.ifAxisCrossZero=function(t){var e=t.scale.getExtent();var r=e[0];var a=e[1];return!(r>0&&a>0||r<0&&a<0)};u.getAxisLabelInterval=function(t,e,r,a){var i;var n=0;var o=0;var s=1;if(e.length>40){s=Math.round(e.length/40)}for(var u=0;u<t.length;u+=s){var h=t[u];var c=l.getBoundingRect(e[u],r,"center","top");c[a?"x":"y"]+=h;c[a?"width":"height"]*=1.5;if(!i){i=c.clone()}else if(i.intersect(c)){o++;n=Math.max(n,o)}else{i.union(c);o=0}}if(n===0&&s>1){return s}return n*s};u.getFormattedLabels=function(t,e){var r=t.scale;var a=r.getTicksLabels();var i=r.getTicks();if(typeof e==="string"){e=function(t){return function(e){return t.replace("{value}",e)}}(e);return s.map(a,e)}else if(typeof e==="function"){return s.map(i,function(a,i){return e(t.type==="category"?r.getLabel(a):a,i)},this)}else{return a}};t.exports=u},function(t,e,r){var a=r(3);var i=r(110);var n=i.prototype;var o=i.extend({type:"ordinal",init:function(t,e){this._data=t;this._extent=e||[0,t.length-1]},parse:function(t){return typeof t==="string"?a.indexOf(this._data,t):Math.round(t)},contain:function(t){t=this.parse(t);return n.contain.call(this,t)&&this._data[t]!=null},normalize:function(t){return n.normalize.call(this,this.parse(t))},scale:function(t){return Math.round(n.scale.call(this,t))},getTicks:function(){var t=[];var e=this._extent;var r=e[0];while(r<=e[1]){t.push(r);r++}return t},getLabel:function(t){return this._data[t]},count:function(){return this._extent[1]-this._extent[0]+1},niceTicks:a.noop,niceExtent:a.noop});o.create=function(){return new o};t.exports=o},function(t,e,r){var a=r(9);function i(){this._extent=[Infinity,-Infinity];this._interval=0;this.init&&this.init.apply(this,arguments)}var n=i.prototype;n.parse=function(t){return t};n.contain=function(t){var e=this._extent;return t>=e[0]&&t<=e[1]};n.normalize=function(t){var e=this._extent;if(e[1]===e[0]){return.5}return(t-e[0])/(e[1]-e[0])};n.scale=function(t){var e=this._extent;return t*(e[1]-e[0])+e[0]};n.unionExtent=function(t){var e=this._extent;t[0]<e[0]&&(e[0]=t[0]);t[1]>e[1]&&(e[1]=t[1])};n.getExtent=function(){return this._extent.slice()};n.setExtent=function(t,e){var r=this._extent;if(!isNaN(t)){r[0]=t}if(!isNaN(e)){r[1]=e}};n.getTicksLabels=function(){var t=[];var e=this.getTicks();for(var r=0;r<e.length;r++){t.push(this.getLabel(e[r]))}return t};a.enableClassExtend(i);a.enableClassManagement(i,{registerWhenExtend:true});t.exports=i},function(t,e,r){var a=r(7);var i=r(6);var n=r(110);var o=Math.floor;var s=Math.ceil;var l=n.extend({type:"interval",_interval:0,setExtent:function(t,e){var r=this._extent;if(!isNaN(t)){r[0]=parseFloat(t)}if(!isNaN(e)){r[1]=parseFloat(e)}},unionExtent:function(t){var e=this._extent;t[0]<e[0]&&(e[0]=t[0]);t[1]>e[1]&&(e[1]=t[1]);l.prototype.setExtent.call(this,e[0],e[1])},getInterval:function(){if(!this._interval){this.niceTicks()}return this._interval},setInterval:function(t){this._interval=t;this._niceExtent=this._extent.slice()},getTicks:function(){if(!this._interval){this.niceTicks()}var t=this._interval;var e=this._extent;var r=[];var i=1e4;if(t){var n=this._niceExtent;if(e[0]<n[0]){r.push(e[0])}var o=n[0];while(o<=n[1]){r.push(o);o=a.round(o+t);if(r.length>i){return[]}}if(e[1]>n[1]){r.push(e[1])}}return r},getTicksLabels:function(){var t=[];var e=this.getTicks();for(var r=0;r<e.length;r++){t.push(this.getLabel(e[r]))}return t},getLabel:function(t){return i.addCommas(t)},niceTicks:function(t){t=t||5;var e=this._extent;var r=e[1]-e[0];if(!isFinite(r)){return}if(r<0){r=-r;e.reverse()}var i=a.nice(r/t,true);var n=[a.round(s(e[0]/i)*i),a.round(o(e[1]/i)*i)];this._interval=i;this._niceExtent=n},niceExtent:function(t,e,r){var i=this._extent;if(i[0]===i[1]){if(i[0]!==0){var n=i[0]/2;i[0]-=n;i[1]+=n}else{i[1]=1}}var l=i[1]-i[0];if(!isFinite(l)){i[0]=0;i[1]=1}this.niceTicks(t);var u=this._interval;if(!e){i[0]=a.round(o(i[0]/u)*u)}if(!r){i[1]=a.round(s(i[1]/u)*u)}}});l.create=function(){return new l};t.exports=l},function(t,e,r){var a=r(3);var i=r(7);var n=r(6);var o=r(111);var s=o.prototype;var l=Math.ceil;var u=Math.floor;var h=36e5*24;var c=function(t,e,r,a){while(r<a){var i=r+a>>>1;if(t[i][2]<e){r=i+1}else{a=i}}return r};var v=o.extend({type:"time",getLabel:function(t){var e=this._stepLvl;var r=new Date(t);return n.formatTime(e[0],r)},niceExtent:function(t,e,r){var a=this._extent;if(a[0]===a[1]){a[0]-=h;a[1]+=h}if(a[1]===-Infinity&&a[0]===Infinity){var n=new Date;a[1]=new Date(n.getFullYear(),n.getMonth(),n.getDate());a[0]=a[1]-h}this.niceTicks(t,e,r);var o=this._interval;if(!e){a[0]=i.round(u(a[0]/o)*o)}if(!r){a[1]=i.round(l(a[1]/o)*o)}},niceTicks:function(t){t=t||10;var e=this._extent;var r=e[1]-e[0];var a=r/t;var n=f.length;var o=c(f,a,0,n);var s=f[Math.min(o,n-1)];var h=s[2];if(s[0]==="year"){var v=r/h;var d=i.nice(v/t,true);h*=d}var p=[l(e[0]/h)*h,u(e[1]/h)*h];this._stepLvl=s;this._interval=h;this._niceExtent=p},parse:function(t){return+i.parseDate(t)}});a.each(["contain","normalize"],function(t){v.prototype[t]=function(e){return s[t].call(this,this.parse(e))}});var f=[["hh:mm:ss",1,1e3],["hh:mm:ss",5,1e3*5],["hh:mm:ss",10,1e3*10],["hh:mm:ss",15,1e3*15],["hh:mm:ss",30,1e3*30],["hh:mm\nMM-dd",1,6e4],["hh:mm\nMM-dd",5,6e4*5],["hh:mm\nMM-dd",10,6e4*10],["hh:mm\nMM-dd",15,6e4*15],["hh:mm\nMM-dd",30,6e4*30],["hh:mm\nMM-dd",1,36e5],["hh:mm\nMM-dd",2,36e5*2],["hh:mm\nMM-dd",6,36e5*6],["hh:mm\nMM-dd",12,36e5*12],["MM-dd\nyyyy",1,h],["week",7,h*7],["month",1,h*31],["quarter",3,h*380/4],["half-year",6,h*380/2],["year",1,h*380]];v.create=function(){return new v};t.exports=v},function(t,e,r){var a=r(3);var i=r(110);var n=r(7);var o=r(111);var s=i.prototype;var l=o.prototype;var u=Math.floor;var h=Math.ceil;var c=Math.pow;var v=10;var f=Math.log;var d=i.extend({type:"log",getTicks:function(){return a.map(l.getTicks.call(this),function(t){return n.round(c(v,t))})},getLabel:l.getLabel,scale:function(t){t=s.scale.call(this,t);return c(v,t)},setExtent:function(t,e){t=f(t)/f(v);e=f(e)/f(v);l.setExtent.call(this,t,e)},getExtent:function(){var t=s.getExtent.call(this);t[0]=c(v,t[0]);t[1]=c(v,t[1]);return t},unionExtent:function(t){t[0]=f(t[0])/f(v);t[1]=f(t[1])/f(v);s.unionExtent.call(this,t)},niceTicks:function(t){t=t||10;var e=this._extent;var r=e[1]-e[0];if(r===Infinity||r<=0){return}var a=c(10,u(f(r/t)/Math.LN10));var i=t/r*a;if(i<=.5){a*=10}var o=[n.round(h(e[0]/a)*a),n.round(u(e[1]/a)*a)];this._interval=a;this._niceExtent=o},niceExtent:l.niceExtent});a.each(["contain","normalize"],function(t){d.prototype[t]=function(e){e=f(e)/f(v);return s[t].call(this,e)}});d.create=function(){return new d};t.exports=d},function(t,e,r){"use strict";var a=r(3);var i=r(115);function n(t){i.call(this,t)}n.prototype={constructor:n,type:"cartesian2d",dimensions:["x","y"],getBaseAxis:function(){return this.getAxesByScale("ordinal")[0]||this.getAxesByScale("time")[0]||this.getAxis("x")},containPoint:function(t){var e=this.getAxis("x");var r=this.getAxis("y");return e.contain(e.toLocalCoord(t[0]))&&r.contain(r.toLocalCoord(t[1]))},containData:function(t){return this.getAxis("x").containData(t[0])&&this.getAxis("y").containData(t[1])},dataToPoints:function(t,e){return t.mapArray(["x","y"],function(t,e){return this.dataToPoint([t,e])},e,this)},dataToPoint:function(t,e){var r=this.getAxis("x");var a=this.getAxis("y");return[r.toGlobalCoord(r.dataToCoord(t[0],e)),a.toGlobalCoord(a.dataToCoord(t[1],e))]},pointToData:function(t,e){var r=this.getAxis("x");var a=this.getAxis("y");return[r.coordToData(r.toLocalCoord(t[0]),e),a.coordToData(a.toLocalCoord(t[1]),e)]},getOtherAxis:function(t){return this.getAxis(t.dim==="x"?"y":"x")}};a.inherits(n,i);t.exports=n},function(t,e,r){"use strict";var a=r(3);function i(t){return this._axes[t]}var n=function(t){this._axes={};this._dimList=[];this.name=t||""};n.prototype={constructor:n,type:"cartesian",getAxis:function(t){return this._axes[t]},getAxes:function(){return a.map(this._dimList,i,this)},getAxesByScale:function(t){t=t.toLowerCase();return a.filter(this.getAxes(),function(e){return e.scale.type===t})},addAxis:function(t){var e=t.dim;this._axes[e]=t;this._dimList.push(e)},dataToCoord:function(t){return this._dataCoordConvert(t,"dataToCoord")},coordToData:function(t){return this._dataCoordConvert(t,"coordToData")},_dataCoordConvert:function(t,e){var r=this._dimList;var a=t instanceof Array?[]:{};for(var i=0;i<r.length;i++){var n=r[i];var o=this._axes[n];a[n]=o[e](t[n])}return a}};t.exports=n},function(t,e,r){var a=r(3);var i=r(117);var n=r(118);var o=function(t,e,r,a,n){i.call(this,t,e,r);this.type=a||"value";this.position=n||"bottom"};o.prototype={constructor:o,index:0,onZero:false,model:null,isHorizontal:function(){var t=this.position;return t==="top"||t==="bottom"},getGlobalExtent:function(){var t=this.getExtent();t[0]=this.toGlobalCoord(t[0]);t[1]=this.toGlobalCoord(t[1]);return t},getLabelInterval:function(){var t=this._labelInterval;if(!t){t=this._labelInterval=n(this)}return t},isLabelIgnored:function(t){if(this.type==="category"){var e=this.getLabelInterval();return typeof e==="function"&&!e(t,this.scale.getLabel(t))||t%(e+1)}},toLocalCoord:null,toGlobalCoord:null};a.inherits(o,i);t.exports=o},function(t,e,r){var a=r(7);var i=a.linearMap;var n=r(3);function o(t,e){var r=t[1]-t[0];var a=e;var i=r/a/2;t[0]+=i;t[1]-=i}var s=[0,1];var l=function(t,e,r){this.dim=t;this.scale=e;this._extent=r||[0,0];this.inverse=false;this.onBand=false};l.prototype={constructor:l,contain:function(t){var e=this._extent;var r=Math.min(e[0],e[1]);var a=Math.max(e[0],e[1]);return t>=r&&t<=a},containData:function(t){return this.contain(this.dataToCoord(t))},getExtent:function(){var t=this._extent.slice();return t},getPixelPrecision:function(t){return a.getPixelPrecision(t||this.scale.getExtent(),this._extent)},setExtent:function(t,e){var r=this._extent;r[0]=t;r[1]=e},dataToCoord:function(t,e){var r=this._extent;var a=this.scale;t=a.normalize(t);if(this.onBand&&a.type==="ordinal"){r=r.slice();o(r,a.count())}return i(t,s,r,e)},coordToData:function(t,e){var r=this._extent;var a=this.scale;if(this.onBand&&a.type==="ordinal"){r=r.slice();o(r,a.count())}var n=i(t,r,s,e);return this.scale.scale(n)},getTicksCoords:function(){if(this.onBand){var t=this.getBands();var e=[];for(var r=0;r<t.length;r++){e.push(t[r][0])}if(t[r-1]){e.push(t[r-1][1])}return e}else{return n.map(this.scale.getTicks(),this.dataToCoord,this)}},getLabelsCoords:function(){if(this.onBand){var t=this.getBands();var e=[];var r;for(var a=0;a<t.length;a++){r=t[a];e.push((r[0]+r[1])/2)}return e}else{return n.map(this.scale.getTicks(),this.dataToCoord,this)}},getBands:function(){var t=this.getExtent();var e=[];var r=this.scale.count();var a=t[0];var i=t[1];var n=i-a;for(var o=0;o<r;o++){e.push([n*o/r+a,n*(o+1)/r+a])}return e},getBandWidth:function(){var t=this._extent;var e=this.scale.getExtent();var r=e[1]-e[0]+(this.onBand?1:0);r===0&&(r=1);var a=Math.abs(t[1]-t[0]);return Math.abs(a)/r}};t.exports=l},function(t,e,r){"use strict";var a=r(3);var i=r(108);t.exports=function(t){var e=t.model;var r=e.getModel("axisLabel");var n=r.get("interval");if(!(t.type==="category"&&n==="auto")){return n==="auto"?0:n}return i.getAxisLabelInterval(a.map(t.scale.getTicks(),t.dataToCoord,t),e.getFormattedLabels(),r.getModel("textStyle").getFont(),t.isHorizontal())}},function(t,e,r){"use strict";r(120);var a=r(19);t.exports=a.extend({type:"grid",dependencies:["xAxis","yAxis"],layoutMode:"box",coordinateSystem:null,defaultOption:{show:false,zlevel:0,z:0,left:"10%",top:60,right:"10%",bottom:60,containLabel:false,backgroundColor:"rgba(0,0,0,0)",borderWidth:1,borderColor:"#ccc"}})},function(t,e,r){"use strict";var a=r(19);var i=r(3);var n=r(121);var o=a.extend({type:"cartesian2dAxis",axis:null,init:function(){o.superApply(this,"init",arguments);this._resetRange()},mergeOption:function(){o.superApply(this,"mergeOption",arguments);this._resetRange()},restoreData:function(){o.superApply(this,"restoreData",arguments);this._resetRange()},setRange:function(t,e){this.option.rangeStart=t;this.option.rangeEnd=e},getMin:function(){var t=this.option;return t.rangeStart!=null?t.rangeStart:t.min},getMax:function(){var t=this.option;return t.rangeEnd!=null?t.rangeEnd:t.max},getNeedCrossZero:function(){var t=this.option;return t.rangeStart!=null||t.rangeEnd!=null?false:!t.scale},_resetRange:function(){this.option.rangeStart=this.option.rangeEnd=null}});function s(t,e){return e.type||(e.data?"category":"value")}i.merge(o.prototype,r(123));var l={gridIndex:0};n("x",o,s,l);n("y",o,s,l);t.exports=o},function(t,e,r){var a=r(122);var i=r(3);var n=r(19);var o=r(21);var s=["value","category","time","log"];t.exports=function(t,e,r,l){i.each(s,function(n){e.extend({type:t+"Axis."+n,mergeDefaultAndTheme:function(e,a){var s=this.layoutMode;var l=s?o.getLayoutParams(e):{};var u=a.getTheme();i.merge(e,u.get(n+"Axis"));i.merge(e,this.getDefaultOption());e.type=r(t,e);if(s){o.mergeLayoutParam(e,l,s)}},defaultOption:i.mergeAll([{},a[n+"Axis"],l],true)})});n.registerSubTypeDefaulter(t+"Axis",i.curry(r,t))}},function(t,e,r){var a=r(3);var i={show:true,zlevel:0,z:0,inverse:false,name:"",nameLocation:"end",nameTextStyle:{},nameGap:15,axisLine:{show:true,onZero:true,lineStyle:{color:"#333",width:1,type:"solid"}},axisTick:{show:true,inside:false,length:5,lineStyle:{color:"#333",width:1}},axisLabel:{show:true,inside:false,rotate:0,margin:8,textStyle:{color:"#333",fontSize:12}},splitLine:{show:true,lineStyle:{color:["#ccc"],width:1,type:"solid"}},splitArea:{show:false,areaStyle:{color:["rgba(250,250,250,0.3)","rgba(200,200,200,0.3)"]}}};var n=a.merge({boundaryGap:true,axisTick:{interval:"auto"},axisLabel:{interval:"auto"}},i);var o=a.defaults({boundaryGap:[0,0],splitNumber:5},i);var s=a.defaults({scale:true,min:"dataMin",max:"dataMax"},o);var l=a.defaults({},o);l.scale=true;t.exports={categoryAxis:n,valueAxis:o,timeAxis:s,logAxis:l}},function(t,e,r){var a=r(3);var i=r(108);function n(t){if(a.isObject(t)&&t.value!=null){return t.value}else{return t}}function o(){return this.get("type")==="category"&&a.map(this.get("data"),n)}function s(){return i.getFormattedLabels(this.axis,this.get("axisLabel.formatter"))}t.exports={getFormattedLabels:s,getCategories:o}},function(t,e,r){"use strict";r(120);r(125)},function(t,e,r){var a=r(3);var i=r(42);var n=r(126);var o=n.ifIgnoreOnTick;var s=n.getInterval;var l=["axisLine","axisLabel","axisTick","axisName"];var u=["splitLine","splitArea"];var h=r(1).extendComponentView({type:"axis",render:function(t,e){this.group.removeAll();if(!t.get("show")){return}var r=e.getComponent("grid",t.get("gridIndex"));var i=c(r,t);var o=new n(t,i);a.each(l,o.add,o);this.group.add(o.getGroup());a.each(u,function(e){if(t.get(e+".show")){this["_"+e](t,r,i.labelInterval)}},this)},_splitLine:function(t,e,r){var n=t.axis;var l=t.getModel("splitLine");var u=l.getModel("lineStyle")
;var h=u.get("width");var c=u.get("color");var v=s(l,r);c=a.isArray(c)?c:[c];var f=e.coordinateSystem.getRect();var d=n.isHorizontal();var p=[];var g=0;var m=n.getTicksCoords();var y=[];var x=[];for(var _=0;_<m.length;_++){if(o(n,_,v)){continue}var w=n.toGlobalCoord(m[_]);if(d){y[0]=w;y[1]=f.y;x[0]=w;x[1]=f.y+f.height}else{y[0]=f.x;y[1]=w;x[0]=f.x+f.width;x[1]=w}var b=g++%c.length;p[b]=p[b]||[];p[b].push(new i.Line(i.subPixelOptimizeLine({shape:{x1:y[0],y1:y[1],x2:x[0],y2:x[1]},style:{lineWidth:h},silent:true})))}var M=u.getLineStyle();for(var _=0;_<p.length;_++){this.group.add(i.mergePath(p[_],{style:a.defaults({stroke:c[_%c.length]},M),silent:true}))}},_splitArea:function(t,e,r){var n=t.axis;var l=t.getModel("splitArea");var u=l.getModel("areaStyle");var h=u.get("color");var c=e.coordinateSystem.getRect();var v=n.getTicksCoords();var f=n.toGlobalCoord(v[0]);var d=n.toGlobalCoord(v[0]);var p=[];var g=0;var m=s(l,r);h=a.isArray(h)?h:[h];for(var y=1;y<v.length;y++){if(o(n,y,m)){continue}var x=n.toGlobalCoord(v[y]);var _;var w;var b;var M;if(n.isHorizontal()){_=f;w=c.y;b=x-_;M=c.height}else{_=c.x;w=d;b=c.width;M=x-w}var S=g++%h.length;p[S]=p[S]||[];p[S].push(new i.Rect({shape:{x:_,y:w,width:b,height:M},silent:true}));f=_+b;d=w+M}var I=u.getAreaStyle();for(var y=0;y<p.length;y++){this.group.add(i.mergePath(p[y],{style:a.defaults({fill:h[y%h.length]},I),silent:true}))}}});h.extend({type:"xAxis"});h.extend({type:"yAxis"});function c(t,e){var r=t.coordinateSystem;var a=e.axis;var i={};var n=a.position;var o=a.onZero?"onZero":n;var s=a.dim;var l=r.getRect();var u=[l.x,l.x+l.width,l.y,l.y+l.height];var h={x:{top:u[2],bottom:u[3]},y:{left:u[0],right:u[1]}};h.x.onZero=Math.max(Math.min(c("y"),h.x.bottom),h.x.top);h.y.onZero=Math.max(Math.min(c("x"),h.y.right),h.y.left);function c(t,e){var a=r.getAxis(t);return a.toGlobalCoord(a.dataToCoord(0))}i.position=[s==="y"?h.y[o]:u[0],s==="x"?h.x[o]:u[3]];var v={x:0,y:1};i.rotation=Math.PI/2*v[s];var f={top:-1,bottom:1,left:-1,right:1};i.labelDirection=i.tickDirection=i.nameDirection=f[n];if(a.onZero){i.labelOffset=h[s][n]-h[s].onZero}if(e.getModel("axisTick").get("inside")){i.tickDirection=-i.tickDirection}if(e.getModel("axisLabel").get("inside")){i.labelDirection=-i.labelDirection}var d=e.getModel("axisLabel").get("rotate");i.labelRotation=o==="top"?-d:d;i.labelInterval=a.getLabelInterval();i.z2=1;return i}},function(t,e,r){var a=r(3);var i=r(42);var n=r(8);var o=r(7);var s=o.remRadian;var l=o.isRadianAroundZero;var u=Math.PI;var h=function(t,e){this.opt=e;this.axisModel=t;a.defaults(e,{labelOffset:0,nameDirection:1,tickDirection:1,labelDirection:1,silent:true});this.group=new i.Group({position:e.position.slice(),rotation:e.rotation})};h.prototype={constructor:h,hasBuilder:function(t){return!!c[t]},add:function(t){c[t].call(this)},getGroup:function(){return this.group}};var c={axisLine:function(){var t=this.opt;var e=this.axisModel;if(!e.get("axisLine.show")){return}var r=this.axisModel.axis.getExtent();this.group.add(new i.Line({shape:{x1:r[0],y1:0,x2:r[1],y2:0},style:a.extend({lineCap:"round"},e.getModel("axisLine.lineStyle").getLineStyle()),strokeContainThreshold:t.strokeContainThreshold,silent:!!t.silent,z2:1}))},axisTick:function(){var t=this.axisModel;if(!t.get("axisTick.show")){return}var e=t.axis;var r=t.getModel("axisTick");var a=this.opt;var n=r.getModel("lineStyle");var o=r.get("length");var s=p(r,a.labelInterval);var l=e.getTicksCoords();var u=[];for(var h=0;h<l.length;h++){if(d(e,h,s)){continue}var c=l[h];u.push(new i.Line(i.subPixelOptimizeLine({shape:{x1:c,y1:0,x2:c,y2:a.tickDirection*o},style:{lineWidth:n.get("width")},silent:true})))}this.group.add(i.mergePath(u,{style:n.getLineStyle(),z2:2,silent:true}))},axisLabel:function(){var t=this.axisModel;if(!t.get("axisLabel.show")){return}var e=this.opt;var r=t.axis;var a=t.getModel("axisLabel");var o=a.getModel("textStyle");var s=a.get("margin");var l=r.scale.getTicks();var h=t.getFormattedLabels();var c=e.labelRotation;if(c==null){c=a.get("rotate")||0}c=c*u/180;var f=v(e,c,e.labelDirection);var p=t.get("data");var g=[];for(var m=0;m<l.length;m++){if(d(r,m,e.labelInterval)){continue}var y=o;if(p&&p[m]&&p[m].textStyle){y=new n(p[m].textStyle,o,t.ecModel)}var x=r.dataToCoord(l[m]);var _=[x,e.labelOffset+e.labelDirection*s];var w=new i.Text({style:{text:h[m],textAlign:y.get("align",true)||f.textAlign,textVerticalAlign:y.get("baseline",true)||f.verticalAlign,textFont:y.getFont(),fill:y.getTextColor()},position:_,rotation:f.rotation,silent:true,z2:10});g.push(w);this.group.add(w)}function b(t,e){var r=t&&t.getBoundingRect().clone();var a=e&&e.getBoundingRect().clone();if(r&&a){r.applyTransform(t.getLocalTransform());a.applyTransform(e.getLocalTransform());return r.intersect(a)}}if(r.type!=="category"){if(t.getMin?t.getMin():t.get("min")){var M=g[0];var S=g[1];if(b(M,S)){M.ignore=true}}if(t.getMax?t.getMax():t.get("max")){var I=g[g.length-1];var A=g[g.length-2];if(b(A,I)){I.ignore=true}}}},axisName:function(){var t=this.opt;var e=this.axisModel;var r=this.opt.axisName;if(r==null){r=e.get("name")}if(!r){return}var a=e.get("nameLocation");var n=t.nameDirection;var o=e.getModel("nameTextStyle");var s=e.get("nameGap")||0;var l=this.axisModel.axis.getExtent();var u=l[0]>l[1]?-1:1;var h=[a==="start"?l[0]-u*s:a==="end"?l[1]+u*s:(l[0]+l[1])/2,a==="middle"?t.labelOffset+n*s:0];var c;if(a==="middle"){c=v(t,t.rotation,n)}else{c=f(t,a,l)}this.group.add(new i.Text({style:{text:r,textFont:o.getFont(),fill:o.getTextColor()||e.get("axisLine.lineStyle.color"),textAlign:c.textAlign,textVerticalAlign:c.verticalAlign},position:h,rotation:c.rotation,silent:true,z2:1}))}};function v(t,e,r){var a=s(e-t.rotation);var i;var n;if(l(a)){n=r>0?"top":"bottom";i="center"}else if(l(a-u)){n=r>0?"bottom":"top";i="center"}else{n="middle";if(a>0&&a<u){i=r>0?"right":"left"}else{i=r>0?"left":"right"}}return{rotation:a,textAlign:i,verticalAlign:n}}function f(t,e,r){var a=s(-t.rotation);var i;var n;var o=r[0]>r[1];var h=e==="start"&&!o||e!=="start"&&o;if(l(a-u/2)){n=h?"bottom":"top";i="center"}else if(l(a-u*1.5)){n=h?"top":"bottom";i="center"}else{n="middle";if(a<u*1.5&&a>u/2){i=h?"left":"right"}else{i=h?"right":"left"}}return{rotation:a,textAlign:i,verticalAlign:n}}var d=h.ifIgnoreOnTick=function(t,e,r){var a;var i=t.scale;return i.type==="ordinal"&&(typeof r==="function"?(a=i.getTicks()[e],!r(a,i.getLabel(a))):e%(r+1))};var p=h.getInterval=function(t,e){var r=t.get("interval");if(r==null||r=="auto"){r=e}return r};t.exports=h},function(t,e,r){var a=r(3);r(107);r(128);r(129);var i=r(131);var n=r(1);n.registerLayout(a.curry(i,"bar"));n.registerVisualCoding("chart",function(t){t.eachSeriesByType("bar",function(t){var e=t.getData();e.setVisual("legendSymbol","roundRect")})});r(106)},function(t,e,r){"use strict";var a=r(27);var i=r(93);t.exports=a.extend({type:"series.bar",dependencies:["grid","polar"],getInitialData:function(t,e){return i(t.data,this,e)},getMarkerPosition:function(t){var e=this.coordinateSystem;if(e){var r=e.dataToPoint(t);var a=this.getData();var i=a.getLayout("offset");var n=a.getLayout("size");var o=e.getBaseAxis().isHorizontal()?0:1;r[o]+=i+n/2;return r}return[NaN,NaN]},defaultOption:{zlevel:0,z:2,coordinateSystem:"cartesian2d",legendHoverLink:true,xAxisIndex:0,yAxisIndex:0,barMinHeight:0,itemStyle:{normal:{barBorderColor:"#fff",barBorderWidth:0},emphasis:{barBorderColor:"#fff",barBorderWidth:0}}}})},function(t,e,r){"use strict";var a=r(3);var i=r(42);a.extend(r(8).prototype,r(130));function n(t,e){var r=t.width>0?1:-1;var a=t.height>0?1:-1;e=Math.min(e,Math.abs(t.width),Math.abs(t.height));t.x+=r*e/2;t.y+=a*e/2;t.width-=r*e;t.height-=a*e}t.exports=r(1).extendChartView({type:"bar",render:function(t,e,r){var a=t.get("coordinateSystem");if(a==="cartesian2d"){this._renderOnCartesian(t,e,r)}return this.group},_renderOnCartesian:function(t,e,r){var o=this.group;var s=t.getData();var l=this._data;var u=t.coordinateSystem;var h=u.getBaseAxis();var c=h.isHorizontal();var v=t.get("animation");var f=["itemStyle","normal","barBorderWidth"];function d(e,r){var o=s.getItemLayout(e);var l=s.getItemModel(e).get(f)||0;n(o,l);var u=new i.Rect({shape:a.extend({},o)});if(v){var h=u.shape;var d=c?"height":"width";var p={};h[d]=0;p[d]=o[d];i[r?"updateProps":"initProps"](u,{shape:p},t)}return u}s.diff(l).add(function(t){if(!s.hasValue(t)){return}var e=d(t);s.setItemGraphicEl(t,e);o.add(e)}).update(function(e,r){var a=l.getItemGraphicEl(r);if(!s.hasValue(e)){o.remove(a);return}if(!a){a=d(e,true)}var u=s.getItemLayout(e);var h=s.getItemModel(e).get(f)||0;n(u,h);i.updateProps(a,{shape:u},t);s.setItemGraphicEl(e,a);o.add(a)}).remove(function(e){var r=l.getItemGraphicEl(e);if(r){r.style.text="";i.updateProps(r,{shape:{width:0}},t,function(){o.remove(r)})}}).execute();this._updateStyle(t,s,c);this._data=s},_updateStyle:function(t,e,r){function n(t,e,r,a,n){i.setText(t,e,r);t.text=a;if(t.textPosition==="outside"){t.textPosition=n}}e.eachItemGraphicEl(function(o,s){var l=e.getItemModel(s);var u=e.getItemVisual(s,"color");var h=e.getItemLayout(s);var c=l.getModel("itemStyle.normal");var v=l.getModel("itemStyle.emphasis").getBarItemStyle();o.setShape("r",c.get("barBorderRadius")||0);o.setStyle(a.defaults({fill:u},c.getBarItemStyle()));var f=r?h.height>0?"bottom":"top":h.width>0?"left":"right";var d=l.getModel("label.normal");var p=l.getModel("label.emphasis");var g=o.style;if(d.get("show")){n(g,d,u,a.retrieve(t.getFormattedLabel(s,"normal"),t.getRawValue(s)),f)}else{g.text=""}if(p.get("show")){n(v,p,u,a.retrieve(t.getFormattedLabel(s,"emphasis"),t.getRawValue(s)),f)}else{v.text=""}i.setHoverStyle(o,v)})},remove:function(t,e){var r=this.group;if(t.get("animation")){if(this._data){this._data.eachItemGraphicEl(function(e){e.style.text="";i.updateProps(e,{shape:{width:0}},t,function(){r.remove(e)})})}}else{r.removeAll()}}})},function(t,e,r){t.exports={getBarItemStyle:r(11)([["fill","color"],["stroke","borderColor"],["lineWidth","borderWidth"],["stroke","barBorderColor"],["lineWidth","barBorderWidth"],["opacity"],["shadowBlur"],["shadowOffsetX"],["shadowOffsetY"],["shadowColor"]])}},function(t,e,r){"use strict";var a=r(3);var i=r(7);var n=i.parsePercent;function o(t){return t.get("stack")||"__ec_stack_"+t.seriesIndex}function s(t,e){var r={};a.each(t,function(t,e){var a=t.coordinateSystem;var i=a.getBaseAxis();var n=r[i.index]||{remainedWidth:i.getBandWidth(),autoWidthCount:0,categoryGap:"20%",gap:"30%",axis:i,stacks:{}};var s=n.stacks;r[i.index]=n;var l=o(t);if(!s[l]){n.autoWidthCount++}s[l]=s[l]||{width:0,maxWidth:0};var u=t.get("barWidth");var h=t.get("barMaxWidth");var c=t.get("barGap");var v=t.get("barCategoryGap");if(u&&!s[l].width){u=Math.min(n.remainedWidth,u);s[l].width=u;n.remainedWidth-=u}h&&(s[l].maxWidth=h);c!=null&&(n.gap=c);v!=null&&(n.categoryGap=v)});var i={};a.each(r,function(t,e){i[e]={};var r=t.stacks;var o=t.axis;var s=o.getBandWidth();var l=n(t.categoryGap,s);var u=n(t.gap,1);var h=t.remainedWidth;var c=t.autoWidthCount;var v=(h-l)/(c+(c-1)*u);v=Math.max(v,0);a.each(r,function(t,e){var r=t.maxWidth;if(!t.width&&r&&r<v){r=Math.min(r,h);h-=r;t.width=r;c--}});v=(h-l)/(c+(c-1)*u);v=Math.max(v,0);var f=0;var d;a.each(r,function(t,e){if(!t.width){t.width=v}d=t;f+=t.width*(1+u)});if(d){f-=d.width*u}var p=-f/2;a.each(r,function(t,r){i[e][r]=i[e][r]||{offset:p,width:t.width};p+=t.width*(1+u)})});return i}function l(t,e,r){var i=s(a.filter(e.getSeriesByType(t),function(t){return!e.isSeriesFiltered(t)&&t.coordinateSystem&&t.coordinateSystem.type==="cartesian2d"}));var n={};e.eachSeriesByType(t,function(t){var e=t.getData();var r=t.coordinateSystem;var a=r.getBaseAxis();var s=o(t);var l=i[a.index][s];var u=l.offset;var h=l.width;var c=r.getOtherAxis(a);var v=t.get("barMinHeight")||0;var f=a.onZero?c.toGlobalCoord(c.dataToCoord(0)):c.getGlobalExtent()[0];var d=r.dataToPoints(e,true);n[s]=n[s]||[];e.setLayout({offset:u,size:h});e.each(c.dim,function(t,r){if(isNaN(t)){return}if(!n[s][r]){n[s][r]={p:f,n:f}}var a=t>=0?"p":"n";var i=d[r];var o=n[s][r][a];var l,p,g,m;if(c.isHorizontal()){l=o;p=i[1]+u;g=i[0]-o;m=h;if(Math.abs(g)<v){g=(g<0?-1:1)*v}n[s][r][a]+=g}else{l=i[0]+u;p=o;g=h;m=i[1]-o;if(Math.abs(m)<v){m=(m<=0?-1:1)*v}n[s][r][a]+=m}e.setItemLayout(r,{x:l,y:p,width:g,height:m})},true)},this)}t.exports=l},function(t,e,r){var a=r(3);var i=r(1);r(133);r(135);r(136)("pie",[{type:"pieToggleSelect",event:"pieselectchanged",method:"toggleSelected"},{type:"pieSelect",event:"pieselected",method:"select"},{type:"pieUnSelect",event:"pieunselected",method:"unSelect"}]);i.registerVisualCoding("chart",a.curry(r(137),"pie"));i.registerLayout(a.curry(r(138),"pie"));i.registerProcessor("filter",a.curry(r(140),"pie"))},function(t,e,r){"use strict";var a=r(94);var i=r(3);var n=r(5);var o=r(96);var s=r(134);var l=r(1).extendSeriesModel({type:"series.pie",init:function(t){l.superApply(this,"init",arguments);this.legendDataProvider=function(){return this._dataBeforeProcessed};this.updateSelectedMap();this._defaultLabelLine(t)},mergeOption:function(t){l.superCall(this,"mergeOption",t);this.updateSelectedMap()},getInitialData:function(t,e){var r=o(["value"],t.data);var i=new a(r,this);i.initData(t.data);return i},getDataParams:function(t){var e=this._data;var r=l.superCall(this,"getDataParams",t);var a=e.getSum("value");r.percent=!a?0:+(e.get("value",t)/a*100).toFixed(2);r.$vars.push("percent");return r},_defaultLabelLine:function(t){n.defaultEmphasis(t.labelLine,["show"]);var e=t.labelLine.normal;var r=t.labelLine.emphasis;e.show=e.show&&t.label.normal.show;r.show=r.show&&t.label.emphasis.show},defaultOption:{zlevel:0,z:2,legendHoverLink:true,hoverAnimation:true,center:["50%","50%"],radius:[0,"75%"],clockwise:true,startAngle:90,minAngle:0,selectedOffset:10,avoidLabelOverlap:true,label:{normal:{rotate:false,show:true,position:"outer"},emphasis:{}},labelLine:{normal:{show:true,length:15,length2:15,smooth:false,lineStyle:{width:1,type:"solid"}}},itemStyle:{normal:{borderColor:"rgba(0,0,0,0)",borderWidth:1},emphasis:{borderColor:"rgba(0,0,0,0)",borderWidth:1}},animationEasing:"cubicOut",data:[]}});i.mixin(l,s);t.exports=l},function(t,e,r){var a=r(3);t.exports={updateSelectedMap:function(){var t=this.option;this._dataOptMap=a.reduce(t.data,function(t,e){t[e.name]=e;return t},{})},select:function(t){var e=this._dataOptMap;var r=e[t];var i=this.get("selectedMode");if(i==="single"){a.each(e,function(t){t.selected=false})}r&&(r.selected=true)},unSelect:function(t){var e=this._dataOptMap[t];e&&(e.selected=false)},toggleSelected:function(t){var e=this._dataOptMap[t];if(e!=null){this[e.selected?"unSelect":"select"](t);return e.selected}},isSelected:function(t){var e=this._dataOptMap[t];return e&&e.selected}}},function(t,e,r){var a=r(42);var i=r(3);function n(t,e,r,a){var i=e.getData();var n=this.dataIndex;var s=i.getName(n);var l=e.get("selectedOffset");a.dispatchAction({type:"pieToggleSelect",from:t,name:s,seriesId:e.id});i.each(function(t){o(i.getItemGraphicEl(t),i.getItemLayout(t),e.isSelected(i.getName(t)),l,r)})}function o(t,e,r,a,i){var n=(e.startAngle+e.endAngle)/2;var o=Math.cos(n);var s=Math.sin(n);var l=r?a:0;var u=[o*l,s*l];i?t.animate().when(200,{position:u}).start("bounceOut"):t.attr("position",u)}function s(t,e){a.Group.call(this);var r=new a.Sector({z2:2});var i=new a.Polyline;var n=new a.Text;this.add(r);this.add(i);this.add(n);this.updateData(t,e,true);function o(){i.ignore=i.hoverIgnore;n.ignore=n.hoverIgnore}function s(){i.ignore=i.normalIgnore;n.ignore=n.normalIgnore}this.on("emphasis",o).on("normal",s).on("mouseover",o).on("mouseout",s)}var l=s.prototype;function u(t,e,r,a,n){var o=a.getModel("textStyle");var s=n==="inside"||n==="inner";return{fill:o.getTextColor()||(s?"#fff":t.getItemVisual(e,"color")),textFont:o.getFont(),text:i.retrieve(t.hostModel.getFormattedLabel(e,r),t.getName(e))}}l.updateData=function(t,e,r){var n=this.childAt(0);var s=t.hostModel;var l=t.getItemModel(e);var u=t.getItemLayout(e);var h=i.extend({},u);h.label=null;if(r){n.setShape(h);n.shape.endAngle=u.startAngle;a.updateProps(n,{shape:{endAngle:u.endAngle}},s)}else{a.updateProps(n,{shape:h},s)}var c=l.getModel("itemStyle");var v=t.getItemVisual(e,"color");n.setStyle(i.defaults({fill:v},c.getModel("normal").getItemStyle()));n.hoverStyle=c.getModel("emphasis").getItemStyle();o(this,t.getItemLayout(e),l.get("selected"),s.get("selectedOffset"),s.get("animation"));function f(){n.stopAnimation(true);n.animateTo({shape:{r:u.r+10}},300,"elasticOut")}function d(){n.stopAnimation(true);n.animateTo({shape:{r:u.r}},300,"elasticOut")}n.off("mouseover").off("mouseout").off("emphasis").off("normal");if(l.get("hoverAnimation")){n.on("mouseover",f).on("mouseout",d).on("emphasis",f).on("normal",d)}this._updateLabel(t,e);a.setHoverStyle(this)};l._updateLabel=function(t,e){var r=this.childAt(1);var i=this.childAt(2);var n=t.hostModel;var o=t.getItemModel(e);var s=t.getItemLayout(e);var l=s.label;var h=t.getItemVisual(e,"color");a.updateProps(r,{shape:{points:l.linePoints||[[l.x,l.y],[l.x,l.y],[l.x,l.y]]}},n);a.updateProps(i,{style:{x:l.x,y:l.y}},n);i.attr({style:{textVerticalAlign:l.verticalAlign,textAlign:l.textAlign,textFont:l.font},rotation:l.rotation,origin:[l.x,l.y],z2:10});var c=o.getModel("label.normal");var v=o.getModel("label.emphasis");var f=o.getModel("labelLine.normal");var d=o.getModel("labelLine.emphasis");var p=c.get("position")||v.get("position");i.setStyle(u(t,e,"normal",c,p));i.ignore=i.normalIgnore=!c.get("show");i.hoverIgnore=!v.get("show");r.ignore=r.normalIgnore=!f.get("show");r.hoverIgnore=!d.get("show");r.setStyle({stroke:h});r.setStyle(f.getModel("lineStyle").getLineStyle());i.hoverStyle=u(t,e,"emphasis",v,p);r.hoverStyle=d.getModel("lineStyle").getLineStyle();var g=f.get("smooth");if(g&&g===true){g=.4}r.setShape({smooth:g})};i.inherits(s,a.Group);var h=r(41).extend({type:"pie",init:function(){var t=new a.Group;this._sectorGroup=t},render:function(t,e,r,a){if(a&&a.from===this.uid){return}var o=t.getData();var l=this._data;var u=this.group;var h=e.get("animation");var c=!l;var v=i.curry(n,this.uid,t,h,r);var f=t.get("selectedMode");o.diff(l).add(function(t){var e=new s(o,t);if(c){e.eachChild(function(t){t.stopAnimation(true)})}f&&e.on("click",v);o.setItemGraphicEl(t,e);u.add(e)}).update(function(t,e){var r=l.getItemGraphicEl(e);r.updateData(o,t);r.off("click");f&&r.on("click",v);u.add(r);o.setItemGraphicEl(t,r)}).remove(function(t){var e=l.getItemGraphicEl(t);u.remove(e)}).execute();if(h&&c&&o.count()>0){var d=o.getItemLayout(0);var p=Math.max(r.getWidth(),r.getHeight())/2;var g=i.bind(u.removeClipPath,u);u.setClipPath(this._createClipPath(d.cx,d.cy,p,d.startAngle,d.clockwise,g,t))}this._data=o},_createClipPath:function(t,e,r,i,n,o,s){var l=new a.Sector({shape:{cx:t,cy:e,r0:0,r:r,startAngle:i,endAngle:i,clockwise:n}});a.initProps(l,{shape:{endAngle:i+(n?1:-1)*Math.PI*2}},s,o);return l}});t.exports=h},function(t,e,r){var a=r(1);var i=r(3);t.exports=function(t,e){i.each(e,function(e){e.update="updateView";a.registerAction(e,function(r,a){var i={};a.eachComponent({mainType:"series",subType:t,query:r},function(t){if(t[e.method]){t[e.method](r.name)}var a=t.getData();a.each(function(e){var r=a.getName(e);i[r]=t.isSelected(r)||false})});return{name:r.name,selected:i}})})}},function(t,e){t.exports=function(t,e){var r=e.get("color");var a=0;e.eachRawSeriesByType(t,function(t){var i=t.get("color",true);var n=t.getRawData();if(!e.isSeriesFiltered(t)){var o=t.getData();o.each(function(t){var e=o.getItemModel(t);var s=o.getRawIndex(t);var l=o.getItemVisual(t,"color",true);if(!l){var u=i?i[s%i.length]:r[(s+a)%r.length];var h=e.get("itemStyle.normal.color")||u;n.setItemVisual(s,"color",h);o.setItemVisual(t,"color",h)}else{n.setItemVisual(s,"color",l)}})}a+=n.count()})}},function(t,e,r){var a=r(7);var i=a.parsePercent;var n=r(139);var o=r(3);var s=Math.PI*2;var l=Math.PI/180;t.exports=function(t,e,r){e.eachSeriesByType(t,function(t){var e=t.get("center");var u=t.get("radius");if(!o.isArray(u)){u=[0,u]}if(!o.isArray(e)){e=[e,e]}var h=r.getWidth();var c=r.getHeight();var v=Math.min(h,c);var f=i(e[0],h);var d=i(e[1],c);var p=i(u[0],v/2);var g=i(u[1],v/2);var m=t.getData();var y=-t.get("startAngle")*l;var x=t.get("minAngle")*l;var _=m.getSum("value");var w=Math.PI/(_||m.count())*2;var b=t.get("clockwise");var M=t.get("roseType");var S=m.getDataExtent("value");S[0]=0;var I=s;var A=0;var T=y;var C=b?1:-1;m.each("value",function(t,e){var r;if(M!=="area"){r=_===0?w:t*w}else{r=s/(m.count()||1)}if(r<x){r=x;I-=x}else{A+=t}var i=T+C*r;m.setItemLayout(e,{angle:r,startAngle:T,endAngle:i,clockwise:b,cx:f,cy:d,r0:p,r:M?a.linearMap(t,S,[p,g]):g});T=i},true);if(I<s){if(I<=.001){var L=s/m.count();m.each(function(t){var e=m.getItemLayout(t);e.startAngle=y+C*t*L;e.endAngle=y+C*(t+1)*L})}else{w=I/A;T=y;m.each("value",function(t,e){var r=m.getItemLayout(e);var a=r.angle===x?x:t*w;r.startAngle=T;r.endAngle=T+C*a;T+=a})}}n(t,g,h,c)})}},function(t,e,r){"use strict";var a=r(14);function i(t,e,r,a,i,n,o){t.sort(function(t,e){return t.y-e.y});function s(e,r,a,i){for(var n=e;n<r;n++){t[n].y+=a;if(n>e&&n+1<r&&t[n+1].y>t[n].y+t[n].height){l(n,a/2);return}}l(r-1,a/2)}function l(e,r){for(var a=e;a>=0;a--){t[a].y-=r;if(a>0&&t[a].y>t[a-1].y+t[a-1].height){break}}}function u(t,e,r,a,i,n){var o=n>0?e?Number.MAX_VALUE:0:e?Number.MAX_VALUE:0;for(var s=0,l=t.length;s<l;s++){if(t[s].position==="center"){continue}var u=Math.abs(t[s].y-a);var h=t[s].len;var c=t[s].len2;var v=u<i+h?Math.sqrt((i+h+c)*(i+h+c)-u*u):Math.abs(t[s].x-r);if(e&&v>=o){v=o-10}if(!e&&v<=o){v=o+10}t[s].x=r+v*n;o=v}}var h=0;var c;var v=t.length;var f=[];var d=[];for(var p=0;p<v;p++){c=t[p].y-h;if(c<0){s(p,v,-c,i)}h=t[p].y+t[p].height}if(o-h<0){l(v-1,h-o)}for(var p=0;p<v;p++){if(t[p].y>=r){d.push(t[p])}else{f.push(t[p])}}u(f,false,e,r,a,i);u(d,true,e,r,a,i)}function n(t,e,r,a,n,o){var s=[];var l=[];for(var u=0;u<t.length;u++){if(t[u].x<e){s.push(t[u])}else{l.push(t[u])}}i(l,e,r,a,1,n,o);i(s,e,r,a,-1,n,o);for(var u=0;u<t.length;u++){var h=t[u].linePoints;if(h){var c=h[1][0]-h[2][0];if(t[u].x<e){h[2][0]=t[u].x+3}else{h[2][0]=t[u].x-3}h[1][1]=h[2][1]=t[u].y;h[1][0]=h[2][0]+c}}}t.exports=function(t,e,r,i){var o=t.getData();var s=[];var l;var u;var h=false;o.each(function(r){var i=o.getItemLayout(r);var n=o.getItemModel(r);var c=n.getModel("label.normal");var v=c.get("position")||n.get("label.emphasis.position");var f=n.getModel("labelLine.normal");var d=f.get("length");var p=f.get("length2");var g=(i.startAngle+i.endAngle)/2;var m=Math.cos(g);var y=Math.sin(g);var x;var _;var w;var b;l=i.cx;u=i.cy;var M=v==="inside"||v==="inner";if(v==="center"){x=i.cx;_=i.cy;b="center"}else{var S=(M?(i.r+i.r0)/2*m:i.r*m)+l;var I=(M?(i.r+i.r0)/2*y:i.r*y)+u;x=S+m*3;_=I+y*3;if(!M){var A=S+m*(d+e-i.r);var T=I+y*(d+e-i.r);var C=A+(m<0?-1:1)*p;var L=T;x=C+(m<0?-5:5);_=L;w=[[S,I],[A,T],[C,L]]}b=M?"center":m>0?"left":"right"}var D=c.getModel("textStyle").getFont();var k=c.get("rotate")?m<0?-g+Math.PI:-g:0;var P=t.getFormattedLabel(r,"normal")||o.getName(r);var z=a.getBoundingRect(P,D,b,"top");h=!!k;i.label={x:x,y:_,position:v,height:z.height,len:d,len2:p,linePoints:w,textAlign:b,verticalAlign:"middle",font:D,rotation:k};if(!M){s.push(i.label)}});if(!h&&t.get("avoidLabelOverlap")){n(s,l,u,e,r,i)}}},function(t,e){t.exports=function(t,e){var r=e.findComponents({mainType:"legend"});if(!r||!r.length){return}e.eachSeriesByType(t,function(t){var e=t.getData();e.filterSelf(function(t){var a=e.getName(t);for(var i=0;i<r.length;i++){if(!r[i].isSelected(a)){return false}}return true},this)},this)}},function(t,e,r){var a=r(3);var i=r(1);r(142);r(143);i.registerVisualCoding("chart",a.curry(r(103),"scatter","circle",null));i.registerLayout(a.curry(r(104),"scatter"));r(106)},function(t,e,r){"use strict";var a=r(93);var i=r(27);t.exports=i.extend({type:"series.scatter",dependencies:["grid","polar"],getInitialData:function(t,e){var r=a(t.data,this,e);return r},defaultOption:{coordinateSystem:"cartesian2d",zlevel:0,z:2,legendHoverLink:true,hoverAnimation:true,xAxisIndex:0,yAxisIndex:0,polarIndex:0,geoIndex:0,symbolSize:10,large:false,largeThreshold:2e3,itemStyle:{normal:{opacity:.8}}}})},function(t,e,r){var a=r(98);var i=r(144);r(1).extendChartView({type:"scatter",init:function(){this._normalSymbolDraw=new a;this._largeSymbolDraw=new i},render:function(t,e,r){var a=t.getData();var i=this._largeSymbolDraw;var n=this._normalSymbolDraw;var o=this.group;var s=t.get("large")&&a.count()>t.get("largeThreshold")?i:n;this._symbolDraw=s;s.updateData(a);o.add(s.group);o.remove(s===i?n.group:i.group)},updateLayout:function(t){this._symbolDraw.updateLayout(t)},remove:function(t,e){this._symbolDraw&&this._symbolDraw.remove(e,true)}})},function(t,e,r){var a=r(42);var i=r(100);var n=r(3);var o=a.extendShape({shape:{points:null,sizes:null},symbolProxy:null,buildPath:function(t,e){var r=e.points;var a=e.sizes;var i=this.symbolProxy;var n=i.shape;for(var o=0;o<r.length;o++){var s=r[o];var l=a[o];if(l[0]<4){t.rect(s[0]-l[0]/2,s[1]-l[1]/2,l[0],l[1])}else{n.x=s[0]-l[0]/2;n.y=s[1]-l[1]/2;n.width=l[0];n.height=l[1];i.buildPath(t,n)}}}});function s(){this.group=new a.Group;this._symbolEl=new o({silent:true})}var l=s.prototype;l.updateData=function(t){this.group.removeAll();var e=this._symbolEl;var r=t.hostModel;e.setShape({points:t.mapArray(t.getItemLayout),sizes:t.mapArray(function(e){var r=t.getItemVisual(e,"symbolSize");if(!n.isArray(r)){r=[r,r]}return r})});e.symbolProxy=i.createSymbol(t.getVisual("symbol"),0,0,0,0);e.setColor=e.symbolProxy.setColor;e.setStyle(r.getModel("itemStyle.normal").getItemStyle(["color"]));var a=t.getVisual("color");if(a){e.setColor(a)}this.group.add(this._symbolEl)};l.updateLayout=function(t){var e=t.getData();this._symbolEl.setShape({points:e.mapArray(e.getItemLayout)})};l.remove=function(){this.group.removeAll()};t.exports=s},function(t,e,r){var a=r(3);var i=r(1);r(146);r(151);r(152);i.registerVisualCoding("chart",a.curry(r(137),"radar"));i.registerVisualCoding("chart",a.curry(r(103),"radar","circle",null));i.registerLayout(r(153));i.registerProcessor("filter",a.curry(r(140),"radar"));i.registerPreprocessor(r(154))},function(t,e,r){r(147);r(149);r(150)},function(t,e,r){var a=r(3);var i=r(148);var n=r(111);var o=r(7);var s=r(108);function l(t,e,r){this._model=t;this.dimensions=[];this._indicatorAxes=a.map(t.getIndicatorModels(),function(t,e){var r="indicator_"+e;var a=new i(r,new n);a.name=t.get("name");a.model=t;t.axis=a;this.dimensions.push(r);return a},this);this.resize(t,r);this.cx;this.cy;this.r;this.startAngle}l.prototype.getIndicatorAxes=function(){return this._indicatorAxes};l.prototype.dataToPoint=function(t,e){var r=this._indicatorAxes[e];return this.coordToPoint(r.dataToCoord(t),e)};l.prototype.coordToPoint=function(t,e){var r=this._indicatorAxes[e];var a=r.angle;var i=this.cx+t*Math.cos(a);var n=this.cy-t*Math.sin(a);return[i,n]};l.prototype.pointToData=function(t){var e=t[0]-this.cx;var r=t[1]-this.cy;var a=Math.sqrt(e*e+r*r);e/=a;r/=a;var i=Math.atan2(-r,e);var n=Infinity;var o;var s=-1;for(var l=0;l<this._indicatorAxes.length;l++){var u=this._indicatorAxes[l];var h=Math.abs(i-u.angle);if(h<n){o=u;s=l;n=h}}return[s,+(o&&o.coodToData(a))]};l.prototype.resize=function(t,e){var r=t.get("center");var i=e.getWidth();var n=e.getHeight();var s=Math.min(i,n)/2;this.cx=o.parsePercent(r[0],i);this.cy=o.parsePercent(r[1],n);this.startAngle=t.get("startAngle")*Math.PI/180;this.r=o.parsePercent(t.get("radius"),s);a.each(this._indicatorAxes,function(t,e){t.setExtent(0,this.r);var r=this.startAngle+e*Math.PI*2/this._indicatorAxes.length;r=Math.atan2(Math.sin(r),Math.cos(r));t.angle=r},this)};l.prototype.update=function(t,e){var r=this._indicatorAxes;var i=this._model;a.each(r,function(t){t.scale.setExtent(Infinity,-Infinity)});t.eachSeriesByType("radar",function(e,n){if(e.get("coordinateSystem")!=="radar"||t.getComponent("radar",e.get("radarIndex"))!==i){return}var o=e.getData();a.each(r,function(t){t.scale.unionExtent(o.getDataExtent(t.dim))})},this);var n=i.get("splitNumber");function l(t){var e=Math.pow(10,Math.floor(Math.log(t)/Math.LN10));var r=t/e;if(r===2){r=5}else{r*=2}return r*e}a.each(r,function(t,e){var r=s.getScaleExtent(t,t.model);s.niceScaleExtent(t,t.model);var a=t.model;var i=t.scale;var u=a.get("min");var h=a.get("max");var c=i.getInterval();if(u!=null&&h!=null){i.setInterval((h-u)/n)}else if(u!=null){var v;do{v=u+c*n;i.setExtent(+u,v);i.setInterval(c);c=l(c)}while(v<r[1]&&isFinite(v)&&isFinite(r[1]))}else if(h!=null){var f;do{f=h-c*n;i.setExtent(f,+h);i.setInterval(c);c=l(c)}while(f>r[0]&&isFinite(f)&&isFinite(r[0]))}else{var d=i.getTicks().length-1;if(d>n){c=l(c)}var p=Math.round((r[0]+r[1])/2/c)*c;var g=Math.round(n/2);i.setExtent(o.round(p-g*c),o.round(p+(n-g)*c));i.setInterval(c)}})};l.dimensions=[];l.create=function(t,e){var r=[];t.eachComponent("radar",function(a){var i=new l(a,t,e);r.push(i);a.coordinateSystem=i});t.eachSeriesByType("radar",function(t){if(t.get("coordinateSystem")==="radar"){t.coordinateSystem=r[t.get("radarIndex")||0]}});return r};r(25).register("radar",l);t.exports=l},function(t,e,r){var a=r(3);var i=r(117);function n(t,e,r){i.call(this,t,e,r);this.type="value";this.angle=0;this.name="";this.model}a.inherits(n,i);t.exports=n},function(t,e,r){var a=r(122);var i=a.valueAxis;var n=r(8);var o=r(3);var s=r(123);function l(t,e){return o.defaults({show:e},t)}var u=r(1).extendComponentModel({type:"radar",optionUpdated:function(){var t=this.get("boundaryGap");var e=this.get("splitNumber");var r=this.get("scale");var a=this.get("axisLine");var i=this.get("axisTick");var l=this.get("axisLabel");var u=this.get("name.textStyle");var h=this.get("name.show");var c=this.get("name.formatter");var v=this.get("nameGap");var f=o.map(this.get("indicator")||[],function(f){if(f.max!=null&&f.max>0){f.min=0}else if(f.min!=null&&f.min<0){f.max=0}f=o.merge(o.clone(f),{boundaryGap:t,splitNumber:e,scale:r,axisLine:a,axisTick:i,axisLabel:l,name:f.text,nameLocation:"end",nameGap:v,nameTextStyle:u},false);if(!h){f.name=""}if(typeof c==="string"){f.name=c.replace("{value}",f.name)}else if(typeof c==="function"){f.name=c(f.name,f)}return o.extend(new n(f,null,this.ecModel),s)},this);this.getIndicatorModels=function(){return f}},defaultOption:{zlevel:0,z:0,center:["50%","50%"],radius:"75%",startAngle:90,name:{show:true},boundaryGap:[0,0],splitNumber:5,nameGap:15,scale:false,shape:"polygon",axisLine:o.merge({lineStyle:{color:"#bbb"}},i.axisLine),axisLabel:l(i.axisLabel,false),axisTick:l(i.axisTick,false),splitLine:l(i.splitLine,true),splitArea:l(i.splitArea,true),indicator:[]}});t.exports=u},function(t,e,r){var a=r(126);var i=r(3);var n=r(42);var o=["axisLine","axisLabel","axisTick","axisName"];t.exports=r(1).extendComponentView({type:"radar",render:function(t,e,r){var a=this.group;a.removeAll();this._buildAxes(t);this._buildSplitLineAndArea(t)},_buildAxes:function(t){var e=t.coordinateSystem;var r=e.getIndicatorAxes();var n=i.map(r,function(t){var r=new a(t.model,{position:[e.cx,e.cy],rotation:t.angle,labelDirection:-1,tickDirection:-1,nameDirection:1});return r});i.each(n,function(t){i.each(o,t.add,t);this.group.add(t.getGroup())},this)},_buildSplitLineAndArea:function(t){var e=t.coordinateSystem;var r=t.get("splitNumber");var a=e.getIndicatorAxes();if(!a.length){return}var o=t.get("shape");var s=t.getModel("splitLine");var l=t.getModel("splitArea");var u=s.getModel("lineStyle");var h=l.getModel("areaStyle");var c=s.get("show");var v=l.get("show");var f=u.get("color");var d=h.get("color");f=i.isArray(f)?f:[f];d=i.isArray(d)?d:[d];var p=[];var g=[];function m(t,e,r){var a=r%e.length;t[a]=t[a]||[];return a}if(o==="circle"){var y=a[0].getTicksCoords();var x=e.cx;var _=e.cy;for(var w=0;w<y.length;w++){if(c){var b=m(p,f,w);p[b].push(new n.Circle({shape:{cx:x,cy:_,r:y[w]}}))}if(v&&w<y.length-1){var b=m(g,d,w);g[b].push(new n.Ring({shape:{cx:x,cy:_,r0:y[w],r:y[w+1]}}))}}}else{var M=i.map(a,function(t,r){var a=t.getTicksCoords();return i.map(a,function(t){return e.coordToPoint(t,r)})});var S=[]
;for(var w=0;w<=r;w++){var I=[];for(var A=0;A<a.length;A++){I.push(M[A][w])}I.push(I[0].slice());if(c){var b=m(p,f,w);p[b].push(new n.Polyline({shape:{points:I}}))}if(v&&S){var b=m(g,d,w-1);g[b].push(new n.Polygon({shape:{points:I.concat(S)}}))}S=I.slice().reverse()}}var T=u.getLineStyle();var C=h.getAreaStyle();i.each(g,function(t,e){this.group.add(n.mergePath(t,{style:i.defaults({stroke:"none",fill:d[e%d.length]},C),silent:true}))},this);i.each(p,function(t,e){this.group.add(n.mergePath(t,{style:i.defaults({fill:"none",stroke:f[e%f.length]},T),silent:true}))},this)}})},function(t,e,r){"use strict";var a=r(27);var i=r(94);var n=r(96);var o=r(3);var s=r(6);var l=a.extend({type:"series.radar",dependencies:["radar"],init:function(t){l.superApply(this,"init",arguments);this.legendDataProvider=function(){return this._dataBeforeProcessed}},getInitialData:function(t,e){var r=t.data||[];var a=n([],r,[],"indicator_");var o=new i(a,this);o.initData(r);return o},formatTooltip:function(t){var e=this.getRawValue(t);var r=this.coordinateSystem;var a=r.getIndicatorAxes();return this._data.getName(t)+"<br />"+o.map(a,function(t,r){return t.name+" : "+e[r]}).join("<br />")},getFormattedLabel:function(t,e,r,a){e=e||"normal";var i=this.getData();var n=i.getItemModel(t);var o=this.getDataParams(t);if(r==null){r=n.get(["label",e,"formatter"])}o.value=o.value[a||0];if(typeof r==="function"){o.status=e;return r(o)}else if(typeof r==="string"){return s.formatTpl(r,o)}},defaultOption:{zlevel:0,z:2,coordinateSystem:"radar",legendHoverLink:true,radarIndex:0,lineStyle:{normal:{width:2,type:"solid"}},label:{normal:{position:"top"}},symbol:"emptyCircle",symbolSize:4}});t.exports=l},function(t,e,r){var a=r(42);var i=r(3);var n=r(100);function o(t){if(!i.isArray(t)){t=[+t,+t]}return t}t.exports=r(1).extendChartView({type:"radar",render:function(t,e,r){var s=t.coordinateSystem;var l=this.group;var u=t.getData();var h=this._data;function c(t,e){var r=t.getItemVisual(e,"symbol")||"circle";var a=t.getItemVisual(e,"color");if(r==="none"){return}var i=n.createSymbol(r,-.5,-.5,1,1,a);i.attr({style:{strokeNoScale:true},z2:100,scale:o(t.getItemVisual(e,"symbolSize"))});return i}function v(e,r,i,n,o,s){i.removeAll();for(var l=0;l<r.length-1;l++){var u=c(n,o);if(u){u.__dimIdx=l;if(e[l]){u.attr("position",e[l]);a[s?"initProps":"updateProps"](u,{position:r[l]},t)}else{u.attr("position",r[l])}i.add(u)}}}function f(t){return i.map(t,function(t){return[s.cx,s.cy]})}u.diff(h).add(function(e){var r=u.getItemLayout(e);if(!r){return}var i=new a.Polygon;var n=new a.Polyline;var o={shape:{points:r}};i.shape.points=f(r);n.shape.points=f(r);a.initProps(i,o,t);a.initProps(n,o,t);var s=new a.Group;var l=new a.Group;s.add(n);s.add(i);s.add(l);v(n.shape.points,r,l,u,e,true);u.setItemGraphicEl(e,s)}).update(function(e,r){var i=h.getItemGraphicEl(r);var n=i.childAt(0);var o=i.childAt(1);var s=i.childAt(2);var l={shape:{points:u.getItemLayout(e)}};if(!l.shape.points){return}v(n.shape.points,l.shape.points,s,u,e,false);a.updateProps(n,l,t);a.updateProps(o,l,t);u.setItemGraphicEl(e,i)}).remove(function(t){l.remove(h.getItemGraphicEl(t))}).execute();u.eachItemGraphicEl(function(e,r){var n=u.getItemModel(r);var o=e.childAt(0);var s=e.childAt(1);var h=e.childAt(2);var c=u.getItemVisual(r,"color");l.add(e);o.setStyle(i.extend(n.getModel("lineStyle.normal").getLineStyle(),{stroke:c}));o.hoverStyle=n.getModel("lineStyle.emphasis").getLineStyle();var v=n.getModel("areaStyle.normal");var f=n.getModel("areaStyle.emphasis");var d=v.isEmpty()&&v.parentModel.isEmpty();var p=f.isEmpty()&&f.parentModel.isEmpty();p=p&&d;s.ignore=d;s.setStyle(i.defaults(v.getAreaStyle(),{fill:c,opacity:.7}));s.hoverStyle=f.getAreaStyle();var g=n.getModel("itemStyle.normal").getItemStyle(["color"]);var m=n.getModel("itemStyle.emphasis").getItemStyle();var y=n.getModel("label.normal");var x=n.getModel("label.emphasis");h.eachChild(function(e){e.setStyle(g);e.hoverStyle=i.clone(m);var n=u.get(u.dimensions[e.__dimIdx],r);a.setText(e.style,y,c);e.setStyle({text:y.get("show")?i.retrieve(t.getFormattedLabel(r,"normal",null,e.__dimIdx),n):""});a.setText(e.hoverStyle,x,c);e.hoverStyle.text=x.get("show")?i.retrieve(t.getFormattedLabel(r,"emphasis",null,e.__dimIdx),n):""});function _(){s.attr("ignore",p)}function w(){s.attr("ignore",d)}e.off("mouseover").off("mouseout").off("normal").off("emphasis");e.on("emphasis",_).on("mouseover",_).on("normal",w).on("mouseout",w);a.setHoverStyle(e)});this._data=u},remove:function(){this.group.removeAll();this._data=null}})},function(t,e){t.exports=function(t,e){t.eachSeriesByType("radar",function(t){var e=t.getData();var r=[];var a=t.coordinateSystem;if(!a){return}function i(t,e){r[e]=r[e]||[];r[e][n]=a.dataToPoint(t,n)}for(var n=0;n<a.getIndicatorAxes().length;n++){var o=e.dimensions[n];e.each(o,i)}e.each(function(t){r[t][0]&&r[t].push(r[t][0].slice());e.setItemLayout(t,r[t])})})}},function(t,e,r){var a=r(3);t.exports=function(t){var e=t.polar;if(e){if(!a.isArray(e)){e=[e]}var r=[];a.each(e,function(e,i){if(e.indicator){if(e.type&&!e.shape){e.shape=e.type}t.radar=t.radar||[];if(!a.isArray(t.radar)){t.radar=[t.radar]}t.radar.push(e)}else{r.push(e)}});t.polar=r}a.each(t.series,function(t){if(t.type==="radar"&&t.polarIndex){t.radarIndex=t.polarIndex}})}},function(t,e,r){var a=r(1);r(156);r(157);r(161);r(163);a.registerLayout(r(173));a.registerVisualCoding("chart",r(174));a.registerProcessor("statistic",r(175));a.registerPreprocessor(r(176));r(136)("map",[{type:"mapToggleSelect",event:"mapselectchanged",method:"toggleSelected"},{type:"mapSelect",event:"mapselected",method:"select"},{type:"mapUnSelect",event:"mapunselected",method:"unSelect"}])},function(t,e,r){var a=r(94);var i=r(1);var n=r(27);var o=r(3);var s=r(96);var l=r(6);var u=l.encodeHTML;var h=l.addCommas;var c=r(134);function v(t,e){var r={};var a=e.features;for(var i=0;i<t.length;i++){r[t[i].name]=t[i]}for(var i=0;i<a.length;i++){var n=a[i].properties.name;if(!r[n]){t.push({value:NaN,name:n})}}return t}var f=n.extend({type:"series.map",needsDrawMap:false,seriesGroup:[],init:function(t){t=this._fillOption(t);this.option=t;f.superApply(this,"init",arguments);this.updateSelectedMap()},getInitialData:function(t){var e=s(["value"],t.data||[]);var r=new a(e,this);r.initData(t.data);return r},mergeOption:function(t){t=this._fillOption(t);f.superCall(this,"mergeOption",t);this.updateSelectedMap()},_fillOption:function(t){t=o.extend({},t);var e=i.getMap(t.mapType);var r=e&&e.geoJson;r&&t.data&&(t.data=v(t.data,r));return t},setRoamZoom:function(t){var e=this.option.roamDetail;e&&(e.zoom=t)},setRoamPan:function(t,e){var r=this.option.roamDetail;if(r){r.x=t;r.y=e}},getRawValue:function(t){return this._data.get("value",t)},formatTooltip:function(t){var e=this._data;var r=h(this.getRawValue(t));var a=e.getName(t);var i=this.seriesGroup;var n=[];for(var o=0;o<i.length;o++){if(!isNaN(i[o].getRawValue(t))){n.push(u(i[o].name))}}return n.join(", ")+"<br />"+a+" : "+r},defaultOption:{zlevel:0,z:2,coordinateSystem:"geo",map:"china",left:"center",top:"center",showLegendSymbol:true,dataRangeHoverLink:true,roamDetail:{x:0,y:0,zoom:1},scaleLimit:null,label:{normal:{show:false,textStyle:{color:"#000"}},emphasis:{show:false,textStyle:{color:"#000"}}},itemStyle:{normal:{borderWidth:.5,borderColor:"#444",areaColor:"#eee"},emphasis:{areaColor:"rgba(255,215, 0, 0.8)"}}}});o.mixin(f,c);t.exports=f},function(t,e,r){var a=r(42);var i=r(158);r(1).extendChartView({type:"map",render:function(t,e,r,a){if(a&&a.type==="mapToggleSelect"&&a.from===this.uid){return}var n=this.group;n.removeAll();if(!(a&&a.type==="geoRoam"&&a.component==="series"&&a.name===t.name)){if(t.needsDrawMap){var o=this._mapDraw||new i(r,true);n.add(o.group);o.draw(t,e,r,this);this._mapDraw=o}else{this._mapDraw&&this._mapDraw.remove();this._mapDraw=null}}else{var o=this._mapDraw;o&&n.add(o.group)}t.get("showLegendSymbol")&&e.getComponent("legend")&&this._renderSymbols(t,e,r)},remove:function(){this._mapDraw&&this._mapDraw.remove();this._mapDraw=null;this.group.removeAll()},_renderSymbols:function(t,e,r){var i=t.getData();var n=this.group;i.each("value",function(t,e){if(isNaN(t)){return}var r=i.getItemLayout(e);if(!r||!r.point){return}var o=r.point;var s=r.offset;var l=new a.Circle({style:{fill:i.getVisual("color")},shape:{cx:o[0]+s*9,cy:o[1],r:3},silent:true,z2:10});if(!s){var u=i.getName(e);var h=i.getItemModel(e);var c=h.getModel("label.normal");var v=h.getModel("label.emphasis");var f=c.getModel("textStyle");var d=v.getModel("textStyle");var p=i.getItemGraphicEl(e);l.setStyle({textPosition:"bottom"});var g=function(){l.setStyle({text:v.get("show")?u:"",textFill:d.getTextColor(),textFont:d.getFont()})};var m=function(){l.setStyle({text:c.get("show")?u:"",textFill:f.getTextColor(),textFont:f.getFont()})};p.on("mouseover",g).on("mouseout",m).on("emphasis",g).on("normal",m);m()}n.add(l)})}})},function(t,e,r){var a=r(159);var i=r(42);var n=r(3);function o(t,e){var r=t.getItemStyle();var a=t.get("areaColor");if(a){r.fill=a}return r}function s(t,e,r,a,i){r.off("click");t.get("selectedMode")&&r.on("click",function(r){var n=r.target.dataIndex;if(n!=null){var o=e.getName(n);a.dispatchAction({type:"mapToggleSelect",seriesIndex:t.seriesIndex,name:o,from:i.uid});l(t,e,a)}})}function l(t,e){e.eachItemGraphicEl(function(r,a){var i=e.getName(a);r.trigger(t.isSelected(i)?"emphasis":"normal")})}function u(t,e){var r=new i.Group;this._controller=new a(t.getZr(),e?r:null,null);this.group=r;this._updateGroup=e}u.prototype={constructor:u,draw:function(t,e,r,a){var u=t.getData&&t.getData();var h=t.coordinateSystem;var c=this.group;c.removeAll();var v=h.scale;c.position=h.position.slice();c.scale=v.slice();var f;var d;var p;var g;var m;var y;var x=["itemStyle","normal"];var _=["itemStyle","emphasis"];var w=["label","normal"];var b=["label","emphasis"];if(!u){f=t.getModel(x);d=t.getModel(_);p=o(f,v);g=o(d,v);m=t.getModel(w);y=t.getModel(b)}n.each(h.regions,function(e){var r=new i.Group;var a;if(u){a=u.indexOfName(e.name);var s=u.getItemModel(a);var l=u.getItemVisual(a,"color",true);f=s.getModel(x);d=s.getModel(_);p=o(f,v);g=o(d,v);m=s.getModel(w);y=s.getModel(b);if(l){p.fill=l}}var h=m.getModel("textStyle");var M=y.getModel("textStyle");n.each(e.contours,function(t){var e=new i.Polygon({shape:{points:t},style:{strokeNoScale:true},culling:true});e.setStyle(p);r.add(e)});var S=m.get("show");var I=y.get("show");var A=u&&isNaN(u.get("value",a));var T=u&&u.getItemLayout(a);if(!u||A&&(S||I)||T&&T.showLabel){var C=u?a:e.name;var L=t.getFormattedLabel(C,"normal");var D=t.getFormattedLabel(C,"emphasis");var k=new i.Text({style:{text:S?L||e.name:"",fill:h.getTextColor(),textFont:h.getFont(),textAlign:"center",textVerticalAlign:"middle"},hoverStyle:{text:I?D||e.name:"",fill:M.getTextColor(),textFont:M.getFont()},position:e.center.slice(),scale:[1/v[0],1/v[1]],z2:10,silent:true});r.add(k)}u&&u.setItemGraphicEl(a,r);i.setHoverStyle(r,g);c.add(r)});this._updateController(t,e,r);u&&s(t,u,c,r,a);u&&l(t,u)},remove:function(){this.group.removeAll();this._controller.dispose()},_updateController:function(t,e,r){var a=t.coordinateSystem;var i=this._controller;i.zoomLimit=t.get("scaleLimit");i.zoom=t.get("roamDetail.zoom");i.enable(t.get("roam")||false);var n=t.type.split(".")[0];i.off("pan").on("pan",function(e,a){r.dispatchAction({type:"geoRoam",component:n,name:t.name,dx:e,dy:a})});i.off("zoom").on("zoom",function(e,a,i){r.dispatchAction({type:"geoRoam",component:n,name:t.name,zoom:e,originX:a,originY:i});if(this._updateGroup){var o=this.group;var s=o.scale;o.traverse(function(t){if(t.type==="text"){t.attr("scale",[1/s[0],1/s[1]])}})}},this);i.rect=a.getViewRect()}};t.exports=u},function(t,e,r){var a=r(32);var i=r(3);var n=r(80);var o=r(160);function s(t){if(t.target&&t.target.draggable){return}var e=t.offsetX;var r=t.offsetY;var a=this.rect;if(a&&a.contain(e,r)){this._x=e;this._y=r;this._dragging=true}}function l(t){if(!this._dragging){return}n.stop(t.event);if(t.gestureEvent!=="pinch"){if(o.isTaken("globalPan",this._zr)){return}var e=t.offsetX;var r=t.offsetY;var a=e-this._x;var i=r-this._y;this._x=e;this._y=r;var s=this.target;if(s){var l=s.position;l[0]+=a;l[1]+=i;s.dirty()}n.stop(t.event);this.trigger("pan",a,i)}}function u(t){this._dragging=false}function h(t){n.stop(t.event);var e=t.wheelDelta>0?1.1:1/1.1;v.call(this,t,e,t.offsetX,t.offsetY)}function c(t){if(o.isTaken("globalPan",this._zr)){return}n.stop(t.event);var e=t.pinchScale>1?1.1:1/1.1;v.call(this,t,e,t.pinchX,t.pinchY)}function v(t,e,r,a){var i=this.rect;if(i&&i.contain(r,a)){var n=this.target;var o=this.zoomLimit;if(n){var s=n.position;var l=n.scale;var u=this.zoom=this.zoom||1;u*=e;if(o){u=Math.max(Math.min(o.max,u),o.min)}var h=u/this.zoom;this.zoom=u;s[0]-=(r-s[0])*(h-1);s[1]-=(a-s[1])*(h-1);l[0]*=h;l[1]*=h;n.dirty()}this.trigger("zoom",e,r,a)}}function f(t,e,r){this.target=e;this.rect=r;this.zoomLimit;this.zoom;this._zr=t;var n=i.bind;var o=n(s,this);var v=n(l,this);var f=n(u,this);var d=n(h,this);var p=n(c,this);a.call(this);this.enable=function(e){this.disable();if(e==null){e=true}if(e===true||(e==="move"||e==="pan")){t.on("mousedown",o);t.on("mousemove",v);t.on("mouseup",f)}if(e===true||(e==="scale"||e==="zoom")){t.on("mousewheel",d);t.on("pinch",p)}};this.disable=function(){t.off("mousedown",o);t.off("mousemove",v);t.off("mouseup",f);t.off("mousewheel",d);t.off("pinch",p)};this.dispose=this.disable;this.isDragging=function(){return this._dragging};this.isPinching=function(){return this._pinching}}i.mixin(f,a);t.exports=f},function(t,e){var r="\0_ec_interaction_mutex";var a={take:function(t,e){i(e)[t]=true},release:function(t,e){i(e)[t]=false},isTaken:function(t,e){return!!i(e)[t]}};function i(t){return t[r]||(t[r]={})}t.exports=a},function(t,e,r){var a=r(3);var i=r(162);var n=r(1);var o={type:"geoRoam",event:"geoRoam",update:"updateLayout"};n.registerAction(o,function(t,e){var r=t.component||"series";e.eachComponent(r,function(e){if(e.name===t.name){var n=e.coordinateSystem;if(n.type!=="geo"){return}var o=e.getModel("roamDetail");var s=i.calcPanAndZoom(o,t,e.get("scaleLimit"));e.setRoamPan&&e.setRoamPan(s.x,s.y);e.setRoamZoom&&e.setRoamZoom(s.zoom);n&&n.setPan(s.x,s.y);n&&n.setZoom(s.zoom);if(r==="series"){a.each(e.seriesGroup,function(t){t.setRoamPan(s.x,s.y);t.setRoamZoom(s.zoom)})}}})})},function(t,e){var r={};r.calcPanAndZoom=function(t,e,r){var a=e.dx;var i=e.dy;var n=e.zoom;var o=t.get("x")||0;var s=t.get("y")||0;var l=t.get("zoom")||1;if(a!=null&&i!=null){o+=a;s+=i}if(n!=null){if(r){n=Math.max(Math.min(l*n,r.max),r.min)/l}var u=(e.originX-o)*(n-1);var h=(e.originY-s)*(n-1);o-=u;s-=h}return{x:o,y:s,zoom:(n||1)*l}};t.exports=r},function(t,e,r){r(164);var a=r(165);var i=r(21);var n=r(3);var o={};function s(t,e){var r=this.getBoundingRect();var a=t.getBoxLayoutParams();a.aspect=r.width/r.height*.75;var n=i.getLayoutRect(a,{width:e.getWidth(),height:e.getHeight()});this.setViewRect(n.x,n.y,n.width,n.height);var o=t.getModel("roamDetail");var s=o.get("x")||0;var l=o.get("y")||0;var u=o.get("zoom")||1;this.setPan(s,l);this.setZoom(u)}function l(t,e){n.each(e.get("geoCoord"),function(e,r){t.addGeoCoord(r,e)})}function u(t){console.error("Map "+t+" not exists")}var h={dimensions:a.prototype.dimensions,create:function(t,e){var r=[];t.eachComponent("geo",function(t,i){var n=t.get("map");var h=o[n];if(!h){u(n)}var c=new a(n+i,n,h&&h.geoJson,h&&h.specialAreas,t.get("nameMap"));c.zoomLimit=t.get("scaleLimit");r.push(c);l(c,t);t.coordinateSystem=c;c.model=t;c.resize=s;c.resize(t,e)});t.eachSeries(function(t){var e=t.get("coordinateSystem");if(e==="geo"){var a=t.get("geoIndex")||0;t.coordinateSystem=r[a]}});var i={};t.eachSeriesByType("map",function(t){var e=t.get("map");i[e]=i[e]||[];i[e].push(t)});n.each(i,function(t,i){var h=o[i];if(!h){u(name)}var c=n.map(t,function(t){return t.get("nameMap")});var v=new a(i,i,h&&h.geoJson,h&&h.specialAreas,n.mergeAll(c));v.zoomLimit=n.retrieve.apply(null,n.map(t,function(t){return t.get("scaleLimit")}));r.push(v);v.resize=s;v.resize(t[0],e);n.each(t,function(t){t.coordinateSystem=v;l(v,t)})});return r},registerMap:function(t,e,r){if(e.geoJson&&!e.features){r=e.specialAreas;e=e.geoJson}if(typeof e==="string"){e=typeof JSON!=="undefined"&&JSON.parse?JSON.parse(e):new Function("return ("+e+");")()}o[t]={geoJson:e,specialAreas:r}},getMap:function(t){return o[t]}};var c=r(1);c.registerMap=h.registerMap;c.getMap=h.getMap;c.loadMap=function(){};c.registerCoordinateSystem("geo",h)},function(t,e,r){"use strict";var a=r(5);var i=r(19);i.extend({type:"geo",coordinateSystem:null,init:function(t){i.prototype.init.apply(this,arguments);a.defaultEmphasis(t.label,["position","show","textStyle","distance","formatter"])},defaultOption:{zlevel:0,z:0,show:true,left:"center",top:"center",map:"",roamDetail:{x:0,y:0,zoom:1},scaleLimit:null,label:{normal:{show:false,textStyle:{color:"#000"}},emphasis:{show:true,textStyle:{color:"rgb(100,0,0)"}}},itemStyle:{normal:{borderWidth:.5,borderColor:"#444",color:"#eee"},emphasis:{color:"rgba(255,215,0,0.8)"}}},getFormattedLabel:function(t,e){var r=this.get("label."+e+".formatter");var a={name:t};if(typeof r==="function"){a.status=e;return r(a)}else if(typeof r==="string"){return r.replace("{a}",a.seriesName)}},setRoamZoom:function(t){var e=this.option.roamDetail;e&&(e.zoom=t)},setRoamPan:function(t,e){var r=this.option.roamDetail;if(r){r.x=t;r.y=e}}})},function(t,e,r){var a=r(166);var i=r(3);var n=r(15);var o=r(169);var s=[r(170),r(171),r(172)];function l(t,e,r,a,i){o.call(this,t);this.map=e;this._nameCoordMap={};this.loadGeoJson(r,a,i)}l.prototype={constructor:l,type:"geo",dimensions:["lng","lat"],loadGeoJson:function(t,e,r){try{this.regions=t?a(t):[]}catch(t){throw"Invalid geoJson format\n"+t}e=e||{};r=r||{};var n=this.regions;var o={};for(var l=0;l<n.length;l++){var u=n[l].name;u=r[u]||u;n[l].name=u;o[u]=n[l];this.addGeoCoord(u,n[l].center);var h=e[u];if(h){n[l].transformTo(h.left,h.top,h.width,h.height)}}this._regionsMap=o;this._rect=null;i.each(s,function(t){t(this)},this)},transformTo:function(t,e,r,a){var i=this.getBoundingRect();i=i.clone();i.y=-i.y-i.height;var o=this._viewTransform;o.transform=i.calculateTransform(new n(t,e,r,a));o.decomposeTransform();var s=o.scale;s[1]=-s[1];o.updateTransform();this._updateTransform()},getRegion:function(t){return this._regionsMap[t]},addGeoCoord:function(t,e){this._nameCoordMap[t]=e},getGeoCoord:function(t){return this._nameCoordMap[t]},getBoundingRect:function(){if(this._rect){return this._rect}var t;var e=this.regions;for(var r=0;r<e.length;r++){var a=e[r].getBoundingRect();t=t||a.clone();t.union(a)}return this._rect=t||new n(0,0,0,0)},dataToPoints:function(t){var e=[];return t.mapArray(["lng","lat"],function(t,r){e[0]=t;e[1]=r;return this.dataToPoint(e)},this)},dataToPoint:function(t){if(typeof t==="string"){t=this.getGeoCoord(t)}if(t){return o.prototype.dataToPoint.call(this,t)}}};i.mixin(l,o);t.exports=l},function(t,e,r){var a=r(3);var i=r(167);function n(t){if(!t.UTF8Encoding){return t}var e=t.features;for(var r=0;r<e.length;r++){var a=e[r];var i=a.geometry;var n=i.coordinates;var s=i.encodeOffsets;for(var l=0;l<n.length;l++){var u=n[l];if(i.type==="Polygon"){n[l]=o(u,s[l])}else if(i.type==="MultiPolygon"){for(var h=0;h<u.length;h++){var c=u[h];u[h]=o(c,s[l][h])}}}}t.UTF8Encoding=false;return t}function o(t,e){var r=[];var a=e[0];var i=e[1];for(var n=0;n<t.length;n+=2){var o=t.charCodeAt(n)-64;var s=t.charCodeAt(n+1)-64;o=o>>1^-(o&1);s=s>>1^-(s&1);o+=a;s+=i;a=o;i=s;r.push([o/1024,s/1024])}return r}function s(t){var e=[];for(var r=0;r<t.length;r++){for(var a=0;a<t[r].length;a++){e.push(t[r][a])}}return e}t.exports=function(t){n(t);return a.map(a.filter(t.features,function(t){return t.geometry&&t.properties}),function(t){var e=t.properties;var r=t.geometry;var a=r.coordinates;if(r.type==="MultiPolygon"){a=s(a)}return new i(e.name,a,e.cp)})}},function(t,e,r){var a=r(168);var i=r(15);var n=r(50);var o=r(16);function s(t,e,r){this.name=t;this.contours=e;if(!r){var a=this.getBoundingRect();r=[a.x+a.width/2,a.y+a.height/2]}else{r=[r[0],r[1]]}this.center=r}s.prototype={constructor:s,getBoundingRect:function(){var t=this._rect;if(t){return t}var e=Number.MAX_VALUE;var r=[e,e];var a=[-e,-e];var s=[];var l=[];var u=this.contours;for(var h=0;h<u.length;h++){n.fromPoints(u[h],s,l);o.min(r,r,s);o.max(a,a,l)}if(h===0){r[0]=r[1]=a[0]=a[1]=0}return this._rect=new i(r[0],r[1],a[0]-r[0],a[1]-r[1])},contain:function(t){var e=this.getBoundingRect();var r=this.contours;if(e.contain(t[0],t[1])){for(var i=0,n=r.length;i<n;i++){if(a.contain(r[i],t[0],t[1])){return true}}}return false},transformTo:function(t,e,r,a){var n=this.getBoundingRect();var s=n.width/n.height;if(!r){r=s*a}else if(!a){a=r/s}var l=new i(t,e,r,a);var u=n.calculateTransform(l);var h=this.contours;for(var c=0;c<h.length;c++){for(var v=0;v<h[c].length;v++){o.applyTransform(h[c][v],h[c][v],u)}}n=this._rect;n.copy(l);this.center=[n.x+n.width/2,n.y+n.height/2]}};t.exports=s},function(t,e,r){var a=r(57);var i=1e-8;function n(t,e){return Math.abs(t-e)<i}function o(t,e,r){var i=0;var o=t[0];if(!o){return false}for(var s=1;s<t.length;s++){var l=t[s];i+=a(o[0],o[1],l[0],l[1],e,r);o=l}var u=t[0];if(!n(o[0],u[0])||!n(o[1],u[1])){i+=a(o[0],o[1],u[0],u[1],e,r)}return i!==0}t.exports={contain:o}},function(t,e,r){var a=r(16);var i=r(17);var n=r(33);var o=r(3);var s=r(15);var l=a.applyTransform;function u(){n.call(this)}o.mixin(u,n);function h(t){this.name=t;this.zoomLimit;n.call(this);this._roamTransform=new u;this._viewTransform=new u}h.prototype={constructor:h,type:"view",dimensions:["x","y"],setBoundingRect:function(t,e,r,a){this._rect=new s(t,e,r,a);return this._rect},getBoundingRect:function(){return this._rect},setViewRect:function(t,e,r,a){this.transformTo(t,e,r,a);this._viewRect=new s(t,e,r,a)},transformTo:function(t,e,r,a){var i=this.getBoundingRect();var n=this._viewTransform;n.transform=i.calculateTransform(new s(t,e,r,a));n.decomposeTransform();this._updateTransform()},setPan:function(t,e){this._roamTransform.position=[t,e];this._updateTransform()},setZoom:function(t){var e=this.zoomLimit;if(e){t=Math.max(Math.min(t,e.max),e.min)}this._roamTransform.scale=[t,t];this._updateTransform()},getRoamTransform:function(){return this._roamTransform.transform},_updateTransform:function(){var t=this._roamTransform;var e=this._viewTransform;e.parent=t;t.updateTransform();e.updateTransform();e.transform&&i.copy(this.transform||(this.transform=[]),e.transform);this.decomposeTransform()},getViewRect:function(){return this._viewRect},dataToPoint:function(t){var e=this.transform;return e?l([],t,e):[t[0],t[1]]},pointToData:function(t){var e=this.invTransform;return e?l([],t,e):[t[0],t[1]]}};o.mixin(h,n);t.exports=h},function(t,e,r){var a=r(167);var i=[126,25];var n=[[[0,3.5],[7,11.2],[15,11.9],[30,7],[42,.7],[52,.7],[56,7.7],[59,.7],[64,.7],[64,0],[5,0],[0,3.5]],[[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],[[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],[[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],[[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],[[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],[[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],[[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],[[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],[[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],[[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],[[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],[1,92.4],[1,3.5],[0,3.5]]];for(var o=0;o<n.length;o++){for(var s=0;s<n[o].length;s++){n[o][s][0]/=10.5;n[o][s][1]/=-10.5/.75;n[o][s][0]+=i[0];n[o][s][1]+=i[1]}}t.exports=function(t){if(t.map==="china"){t.regions.push(new a("南海诸岛",n,i))}}},function(t,e,r){var a=r(3);var i={"南海诸岛":[32,80],"广东":[0,-10],"香港":[10,5],"澳门":[-10,10],"天津":[5,5]};t.exports=function(t){a.each(t.regions,function(t){var e=i[t.name];if(e){var r=t.center;r[0]+=e[0]/10.5;r[1]+=-e[1]/(10.5/.75)}})}},function(t,e,r){var a=r(3);var i={Russia:[100,60],"United States of America":[-99,38]};t.exports=function(t){a.each(t.regions,function(t){var e=i[t.name];if(e){var r=t.center;r[0]=e[0];r[1]=e[1]}})}},function(t,e,r){var a=r(3);t.exports=function(t){var e={};t.eachSeriesByType("map",function(r){var i=r.get("mapType");if(e[i]){return}var n={};a.each(r.seriesGroup,function(e){var r=e.coordinateSystem;var a=e.getData();if(e.get("showLegendSymbol")&&t.getComponent("legend")){a.each("value",function(t,e){var i=a.getName(e);var o=r.getRegion(i);if(!o||isNaN(t)){return}var s=n[i]||0;var l=r.dataToPoint(o.center);n[i]=s+1;a.setItemLayout(e,{point:l,offset:s})})}});var o=r.getData();o.each(function(t){var e=o.getName(t);var r=o.getItemLayout(t)||{};r.showLabel=!n[e];o.setItemLayout(t,r)});e[i]=true})}},function(t,e){t.exports=function(t){t.eachSeriesByType("map",function(t){var e=t.get("color");var r=t.getModel("itemStyle.normal");var a=r.get("areaColor");var i=r.get("color")||e[t.seriesIndex%e.length];t.getData().setVisual({areaColor:a,color:i})})}},function(t,e,r){var a=r(3);function i(t,e){var r={};var a=["value"];for(var i=0;i<t.length;i++){t[i].each(a,function(e,a){var n=t[i].getName(a);r[n]=r[n]||[];if(!isNaN(e)){r[n].push(e)}})}return t[0].map(a,function(a,i){var n=t[0].getName(i);var o=0;var s=Infinity;var l=-Infinity;var u=r[n].length;for(var h=0;h<u;h++){s=Math.min(s,r[n][h]);l=Math.max(l,r[n][h]);o+=r[n][h]}var c;if(e==="min"){c=s}else if(e==="max"){c=l}else if(e==="average"){c=o/u}else{c=o}return u===0?NaN:c})}t.exports=function(t){var e={};t.eachSeriesByType("map",function(t){var r=t.get("map");e[r]=e[r]||[];e[r].push(t)});a.each(e,function(t,e){var r=i(a.map(t,function(t){return t.getData()}),t[0].get("mapValueCalculation"));t[0].seriesGroup=[];t[0].setData(r);for(var n=0;n<t.length;n++){t[n].seriesGroup=t;t[n].needsDrawMap=n===0}})}},function(t,e,r){var a=r(3);var i=["x","y","x2","y2","width","height","map","roam","roamDetail","label","itemStyle"];var n={};function o(t){var e={};a.each(i,function(r){if(t[r]!=null){e[r]=t[r]}});return e}t.exports=function(t){var e=[];a.each(t.series,function(t){if(t.type==="map"){e.push(t)}a.extend(n,t.geoCoord)});var r={};a.each(e,function(e){e.map=e.map||e.mapType;a.defaults(e,e.mapLocation);if(e.markPoint){var i=e.markPoint;i.data=a.map(i.data,function(t){if(!a.isArray(t.value)){var e;if(t.geoCoord){e=t.geoCoord}else if(t.name){e=n[t.name]}var r=e?[e[0],e[1]]:[NaN,NaN];if(t.value!=null){r.push(t.value)}t.value=r}return t});if(!(e.data&&e.data.length)){if(!t.geo){t.geo=[]}var s=r[e.map];if(!s){s=r[e.map]=o(e);t.geo.push(s)}var l=e.markPoint;l.type=t.effect&&t.effect.show?"effectScatter":"scatter";l.coordinateSystem="geo";l.geoIndex=a.indexOf(t.geo,s);l.name=e.name;t.series.splice(a.indexOf(t.series,e),1,l)}}})}},function(t,e,r){var a=r(1);r(178);r(182);r(185);a.registerVisualCoding("chart",r(186));a.registerLayout(r(188))},function(t,e,r){var a=r(27);var i=r(179);var n=r(3);var o=r(8);var s=r(6);var l=r(181);var u=s.encodeHTML;var h=s.addCommas;t.exports=a.extend({type:"series.treemap",dependencies:["grid","polar"],_viewRoot:null,defaultOption:{left:"center",top:"middle",right:null,bottom:null,width:"80%",height:"80%",sort:true,clipWindow:"origin",squareRatio:.5*(1+Math.sqrt(5)),leafDepth:null,visualDimension:0,zoomToNodeRatio:.32*.32,roam:true,nodeClick:"zoomToNode",animation:true,animationDurationUpdate:900,animationEasing:"quinticInOut",breadcrumb:{show:true,height:22,left:"center",top:"bottom",emptyItemWidth:25,itemStyle:{normal:{color:"rgba(0,0,0,0.7)",borderColor:"rgba(255,255,255,0.7)",borderWidth:1,shadowColor:"rgba(150,150,150,1)",shadowBlur:3,shadowOffsetX:0,shadowOffsetY:0,textStyle:{color:"#fff"}},emphasis:{textStyle:{}}}},label:{normal:{show:true,position:["50%","50%"],textStyle:{align:"center",baseline:"middle",color:"#fff",ellipsis:true}}},itemStyle:{normal:{color:null,colorAlpha:null,colorSaturation:null,borderWidth:0,gapWidth:0,borderColor:"#fff",borderColorSaturation:null},emphasis:{}},color:"none",colorAlpha:null,colorSaturation:null,colorMappingBy:"index",visibleMin:10,childrenVisibleMin:null,levels:[]},getInitialData:function(t,e){var r=t.data||[];var a=t.name;a==null&&(a=t.name);var o={name:a,children:t.data};var s=(r[0]||{}).value;c(o,n.isArray(s)?s.length:-1);var l=t.levels||[];l=t.levels=v(l,e);return i.createTree(o,this,l).data},optionUpdated:function(){this.resetViewRoot()},formatTooltip:function(t){var e=this.getData();var r=this.getRawValue(t);var a=n.isArray(r)?h(r[0]):h(r);var i=e.getName(t);return u(i)+": "+a},getDataParams:function(t){var e=a.prototype.getDataParams.apply(this,arguments);var r=this.getData();var i=r.tree.getNodeByDataIndex(t);var n=e.treePathInfo=[];while(i){var o=i.dataIndex;n.push({name:i.name,dataIndex:o,value:this.getRawValue(o)});i=i.parentNode}n.reverse();return e},setLayoutInfo:function(t){this.layoutInfo=this.layoutInfo||{};n.extend(this.layoutInfo,t)},mapIdToIndex:function(t){var e=this._idIndexMap;if(!e){e=this._idIndexMap={};this._idIndexMapCount=0}var r=e[t];if(r==null){e[t]=r=this._idIndexMapCount++}return r},getViewRoot:function(){return this._viewRoot},resetViewRoot:function(t){t?this._viewRoot=t:t=this._viewRoot;var e=this.getData().tree.root;if(!t||t!==e&&!e.contains(t)){this._viewRoot=e}}});function c(t,e){var r=0;n.each(t.children,function(t){c(t,e);var a=t.value;n.isArray(a)&&(a=a[0]);r+=a});var a=t.value;if(e>=0){if(!n.isArray(a)){t.value=new Array(e)}else{a=a[0]}}if(a==null||isNaN(a)){a=r}if(a<0){a=0}e>=0?t.value[0]=a:t.value=a}function v(t,e){var r=e.get("color");if(!r){return}t=t||[];var a;n.each(t,function(t){var e=new o(t);var r=e.get("color");if(e.get("itemStyle.normal.color")||r&&r!=="none"){a=true}});if(!a){var i=t[0]||(t[0]={});i.color=r.slice()}return t}},function(t,e,r){var a=r(3);var i=r(8);var n=r(94);var o=r(180);var s=r(96);var l=function(t,e,r){this.name=t||"";this.depth=0;this.height=0;this.parentNode=null;this.dataIndex=e==null?-1:e;this.children=[];this.viewChildren=[];this.hostTree=r};l.prototype={constructor:l,isRemoved:function(){return this.dataIndex<0},eachNode:function(t,e,r){if(typeof t==="function"){r=e;e=t;t=null}t=t||{};if(a.isString(t)){t={order:t}}var i=t.order||"preorder";var n=this[t.attr||"children"];var o;i==="preorder"&&(o=e.call(r,this));for(var s=0;!o&&s<n.length;s++){n[s].eachNode(t,e,r)}i==="postorder"&&e.call(r,this)},updateDepthAndHeight:function(t){var e=0;this.depth=t;for(var r=0;r<this.children.length;r++){var a=this.children[r];a.updateDepthAndHeight(t+1);if(a.height>e){e=a.height}}this.height=e+1},getNodeById:function(t){if(this.getId()===t){return this}for(var e=0,r=this.children,a=r.length;e<a;e++){var i=r[e].getNodeById(t);if(i){return i}}},contains:function(t){if(t===this){return true}for(var e=0,r=this.children,a=r.length;e<a;e++){var i=r[e].contains(t);if(i){return i}}},getAncestors:function(t){var e=[];var r=t?this:this.parentNode;while(r){e.push(r);r=r.parentNode}e.reverse();return e},getValue:function(t){var e=this.hostTree.data;return e.get(e.getDimension(t||"value"),this.dataIndex)},setLayout:function(t,e){this.dataIndex>=0&&this.hostTree.data.setItemLayout(this.dataIndex,t,e)},getLayout:function(){return this.hostTree.data.getItemLayout(this.dataIndex)},getModel:function(t){if(this.dataIndex<0){return}var e=this.hostTree;var r=e.data.getItemModel(this.dataIndex);var a=this.getLevelModel();return r.getModel(t,(a||e.hostModel).getModel(t))},getLevelModel:function(){return(this.hostTree.levelModels||[])[this.depth]},setVisual:function(t,e){this.dataIndex>=0&&this.hostTree.data.setItemVisual(this.dataIndex,t,e)},getVisual:function(t,e){return this.hostTree.data.getItemVisual(this.dataIndex,t,e)},getRawIndex:function(){return this.hostTree.data.getRawIndex(this.dataIndex)},getId:function(){return this.hostTree.data.getId(this.dataIndex)}};function u(t,e){this.root;this.data;this._nodes=[];this.hostModel=t;this.levelModels=a.map(e||[],function(e){return new i(e,t,t.ecModel)})}u.prototype={constructor:u,type:"tree",eachNode:function(t,e,r){this.root.eachNode(t,e,r)},
getNodeByDataIndex:function(t){var e=this.data.getRawIndex(t);return this._nodes[e]},getNodeByName:function(t){return this.root.getNodeByName(t)},update:function(){var t=this.data;var e=this._nodes;for(var r=0,a=e.length;r<a;r++){e[r].dataIndex=-1}for(var r=0,a=t.count();r<a;r++){e[t.getRawIndex(r)].dataIndex=r}}};u.createTree=function(t,e,r){var a=new u(e,r);var i=[];c(t);function c(t,e){i.push(t);var r=new l(t.name,i.length-1,a);e?h(r,e):a.root=r;var n=t.children;if(n){for(var o=0;o<n.length;o++){c(n[o],r)}}}a.root.updateDepthAndHeight(0);var v=s([{name:"value"}],i);var f=new n(v,e);f.initData(i);o.linkToTree(f,a);return a};function h(t,e){var r=e.children;if(t.parentNode===e){return}r.push(t);t.parentNode=e;e.hostTree._nodes.push(t)}t.exports=u},function(t,e,r){var a=r(3);var i=Array.prototype.slice;function n(t,e,r){a.each(o,function(i,n){var o=t[n];t[n]=a.curry(i,o,e,r)});t[r]=e;e.data=t;return t}var o={cloneShallow:function(t,e,r){var a=t.apply(this,i.call(arguments,3));return n(a,e,r)},map:function(t,e,r){var a=t.apply(this,i.call(arguments,3));return n(a,e,r)},filterSelf:function(t,e,r){var a=t.apply(this,i.call(arguments,3));e.update();return a}};t.exports={linkToGraph:function(t,e){n(t,e,"graph")},linkToTree:function(t,e){n(t,e,"tree")}}},function(t,e,r){var a=r(3);var i={retrieveTargetInfo:function(t,e){if(t&&(t.type==="treemapZoomToNode"||t.type==="treemapRootToNode")){var r=e.getData().tree.root;var a=t.targetNode;if(a&&r.contains(a)){return{node:a}}var i=t.targetNodeId;if(i!=null&&(a=r.getNodeById(i))){return{node:a}}}},getPathToRoot:function(t){var e=[];while(t){e.push(t);t=t.parentNode}return e.reverse()},aboveViewRoot:function(t,e){var r=i.getPathToRoot(t);return i.aboveViewRootByViewPath(r,e)},aboveViewRootByViewPath:function(t,e){var r=a.indexOf(t,e);return r>=0&&r!==t.length-1}};t.exports=i},function(t,e,r){var a=r(3);var i=r(42);var n=r(95);var o=r(181);var s=r(183);var l=r(159);var u=r(15);var h=r(17);var c=r(184);var v=a.bind;var f=i.Group;var d=i.Rect;var p=a.each;var g=3;t.exports=r(1).extendChartView({type:"treemap",init:function(t,e){this._containerGroup;this._storage=m();this._oldTree;this._breadcrumb;this._controller;this._state="ready";this._mayClick},render:function(t,e,r,i){var n=e.findComponents({mainType:"series",subType:"treemap",query:i});if(a.indexOf(n,t)<0){return}this.seriesModel=t;this.api=r;this.ecModel=e;var s=o.retrieveTargetInfo(i,t);var l=i&&i.type;var u=t.layoutInfo;var h=!this._oldTree;var c=this._storage;var v=l==="treemapRootToNode"&&s&&c?{rootNodeGroup:c.nodeGroup[s.node.getRawIndex()],direction:i.direction}:null;var f=this._giveContainerGroup(u);var d=this._doRender(f,t,v);!h&&(!l||l==="treemapZoomToNode"||l==="treemapRootToNode")?this._doAnimation(f,d,t,v):d.renderFinally();this._resetController(r);this._renderBreadcrumb(t,r,s)},_giveContainerGroup:function(t){var e=this._containerGroup;if(!e){e=this._containerGroup=new f;this._initEvents(e);this.group.add(e)}e.position=[t.x,t.y];return e},_doRender:function(t,e,r){var i=e.getData().tree;var s=this._oldTree;var l=m();var u=m();var h=this._storage;var c=[];var f=[];var d=[];var g=v(this._renderNode,this,u,h,r,l,c,f);var y=e.getViewRoot();var x=o.getPathToRoot(y);_(i.root?[i.root]:[],s&&s.root?[s.root]:[],t,i===s||!s,0);var d=w(h);this._oldTree=i;this._storage=u;return{lastsForAnimation:l,willDeleteEls:d,renderFinally:b};function _(t,e,r,i,o){if(i){e=t;p(t,function(t,e){!t.isRemoved()&&l(e,e)})}else{new n(e,t,s,s).add(l).update(l).remove(a.curry(l,null)).execute()}function s(t){return t.getId()}function l(a,n){var s=a!=null?t[a]:null;var l=n!=null?e[n]:null;if(!s||isNaN(o)||o<x.length&&x[o]!==s){return}var u=g(s,l,r);u&&_(s&&s.viewChildren||[],l&&l.viewChildren||[],u,i,o+1)}}function w(t){var e=m();t&&p(t,function(t,r){var a=e[r];p(t,function(t){t&&(a.push(t),t.__tmWillDelete=r)})});return e}function b(){p(d,function(t){p(t,function(t){t.parent&&t.parent.remove(t)})});p(c,function(t){t.invisible=true;t.dirty()});p(f,function(t){t.invisible=false;t.__tmWillVisible=false;t.dirty()})}},_renderNode:function(t,e,r,n,o,s,l,u,h){var c=l&&l.getRawIndex();var v=u&&u.getRawIndex();var p=l.getLayout();var g=p.width;var m=p.height;var y=p.invisible;var x=P("nodeGroup",f);if(!x){return}h.add(x);x.position=[p.x,p.y];x.__tmNodeWidth=g;x.__tmNodeHeight=m;var _=P("background",d,0);if(_){_.setShape({x:0,y:0,width:g,height:m});E(_,{fill:l.getVisual("borderColor",true)});x.add(_)}var w=l.viewChildren;if(!w||!w.length){var b=p.borderWidth;var M=P("content",d,3);if(M){var S=Math.max(g-2*b,0);var I=Math.max(m-2*b,0);var A=l.getModel("label.normal");var T=l.getModel("label.normal.textStyle");var C=l.getModel("itemStyle.emphasis").getItemStyle();var L=l.getModel().get("name");var D=T.getTextRect(L);var k=A.get("show");if(!k||D.height>I){L=""}else if(D.width>S){L=T.get("ellipsis")?T.ellipsis(L,S):""}i.setHoverStyle(M,C);M.dataIndex=l.dataIndex;M.seriesIndex=this.seriesModel.seriesIndex;M.culling=true;M.setShape({x:b,y:b,width:S,height:I});E(M,{fill:l.getVisual("color",true),text:L,textPosition:A.get("position"),textFill:T.getTextColor(),textAlign:T.get("align"),textVerticalAlign:T.get("baseline"),textFont:T.getFont()});x.add(M)}}return x;function P(r,a,i){var o=v!=null&&e[r][v];var s=n[r];if(o){e[r][v]=null;z(s,o,r)}else if(!y){o=new a({z:i});R(s,o,r)}return t[r][c]=o}function z(t,e,r){var i=t[c]={};i.old=r==="nodeGroup"?e.position.slice():a.extend({},e.shape)}function R(t,e,a){if(a==="background"){e.invisible=true;e.__tmWillVisible=true;s.push(e)}else{var i=t[c]={};var o=l.parentNode;if(o&&(!r||r.direction==="drilldown")){var u=0;var h=0;var v=n.background[o.getRawIndex()];if(v&&v.old){u=v.old.width/2;h=v.old.height/2}i.old=a==="nodeGroup"?[u,h]:{x:u,y:h,width:0,height:0}}i.fadein=a!=="nodeGroup"}}function E(t,e){if(!y){t.setStyle(e);if(!t.__tmWillVisible){t.invisible=false}}else{!t.invisible&&o.push(t)}}},_doAnimation:function(t,e,r,i){if(!r.get("animation")){return}var n=r.get("animationDurationUpdate");var o=r.get("animationEasing");var s=c.createWrap();p(e.willDeleteEls,function(t,e){p(t,function(t,e){var r;if(t.invisible||!(r=t.__tmWillDelete)){return}var a=t.parent;var l;if(i&&i.direction==="drilldown"){if(a===i.rootNodeGroup){l={shape:{x:0,y:0,width:a.__tmNodeWidth,height:a.__tmNodeHeight}};t.z=2}else{l={style:{opacity:0}};t.z=1}}else{var u=0;var h=0;if(!a.__tmWillDelete){u=a.__tmNodeWidth/2;h=a.__tmNodeHeight/2}l=r==="nodeGroup"?{position:[u,h],style:{opacity:0}}:{shape:{x:u,y:h,width:0,height:0},style:{opacity:0}}}l&&s.add(t,l,n,o)})});p(this._storage,function(t,r){p(t,function(t,i){var l=e.lastsForAnimation[r][i];var u={};if(!l){return}if(r==="nodeGroup"){if(l.old){u.position=t.position.slice();t.position=l.old}}else{if(l.old){u.shape=a.extend({},t.shape);t.setShape(l.old)}if(l.fadein){t.setStyle("opacity",0);u.style={opacity:1}}else if(t.style.opacity!==1){u.style={opacity:1}}}s.add(t,u,n,o)})},this);this._state="animating";s.done(v(function(){this._state="ready";e.renderFinally()},this)).start()},_resetController:function(t){var e=this._controller;if(!e){e=this._controller=new l(t.getZr());e.enable(this.seriesModel.get("roam"));e.on("pan",v(this._onPan,this));e.on("zoom",v(this._onZoom,this))}e.rect=new u(0,0,t.getWidth(),t.getHeight())},_clearController:function(){var t=this._controller;if(t){t.off("pan").off("zoom");t=null}},_onPan:function(t,e){this._mayClick=false;if(this._state!=="animating"&&(Math.abs(t)>g||Math.abs(e)>g)){var r=this.seriesModel.getViewRoot();if(!r){return}var a=r.getLayout();if(!a){return}this.api.dispatchAction({type:"treemapMove",from:this.uid,seriesId:this.seriesModel.id,rootRect:{x:a.x+t,y:a.y+e,width:a.width,height:a.height}})}},_onZoom:function(t,e,r){this._mayClick=false;if(this._state!=="animating"){var a=this.seriesModel.getViewRoot();if(!a){return}var i=a.getLayout();if(!i){return}var n=new u(i.x,i.y,i.width,i.height);var o=this.seriesModel.layoutInfo;e-=o.x;r-=o.y;var s=h.create();h.translate(s,s,[-e,-r]);h.scale(s,s,[t,t]);h.translate(s,s,[e,r]);n.applyTransform(s);this.api.dispatchAction({type:"treemapRender",from:this.uid,seriesId:this.seriesModel.id,rootRect:{x:n.x,y:n.y,width:n.width,height:n.height}})}},_initEvents:function(t){t.on("mousedown",function(t){this._state==="ready"&&(this._mayClick=true)},this);t.on("mouseup",function(t){if(this._mayClick){this._mayClick=false;this._state==="ready"&&e.call(this,t)}},this);function e(t){var e=this.seriesModel.get("nodeClick",true);if(!e){return}var r=this.findTarget(t.offsetX,t.offsetY);if(!r){return}var a=r.node;if(a.getLayout().isLeafRoot){this._rootToNode(r)}else{if(e==="zoomToNode"){this._zoomToNode(r)}else if(e==="link"){var i=a.hostTree.data.getItemModel(a.dataIndex);var n=i.get("link",true);var o=i.get("target",true)||"blank";n&&window.open(n,o)}}}},_renderBreadcrumb:function(t,e,r){if(!r){r=this.findTarget(e.getWidth()/2,e.getHeight()/2);if(!r){r={node:t.getData().tree.root}}}(this._breadcrumb||(this._breadcrumb=new s(this.group,v(a,this)))).render(t,e,r.node);function a(e){if(this._state!=="animating"){o.aboveViewRoot(t.getViewRoot(),e)?this._rootToNode({node:e}):this._zoomToNode({node:e})}}},remove:function(){this._clearController();this._containerGroup&&this._containerGroup.removeAll();this._storage=m();this._state="ready";this._breadcrumb&&this._breadcrumb.remove()},dispose:function(){this._clearController()},_zoomToNode:function(t){this.api.dispatchAction({type:"treemapZoomToNode",from:this.uid,seriesId:this.seriesModel.id,targetNode:t.node})},_rootToNode:function(t){this.api.dispatchAction({type:"treemapRootToNode",from:this.uid,seriesId:this.seriesModel.id,targetNode:t.node})},findTarget:function(t,e){var r;var a=this.seriesModel.getViewRoot();a.eachNode({attr:"viewChildren",order:"preorder"},function(a){var i=this._storage.background[a.getRawIndex()];if(i){var n=i.transformCoordToLocal(t,e);var o=i.shape;if(o.x<=n[0]&&n[0]<=o.x+o.width&&o.y<=n[1]&&n[1]<=o.y+o.height){r={node:a,offsetX:n[0],offsetY:n[1]}}else{return false}}},this);return r}});function m(){return{nodeGroup:[],background:[],content:[]}}},function(t,e,r){var a=r(42);var i=r(21);var n=r(3);var o=8;var s=8;var l=5;function u(t,e){this.group=new a.Group;t.add(this.group);this._onSelect=e||n.noop}u.prototype={constructor:u,render:function(t,e,r){var a=t.getModel("breadcrumb");var n=this.group;n.removeAll();if(!a.get("show")||!r){return}var o=a.getModel("itemStyle.normal");var s=o.getModel("textStyle");var l={pos:{left:a.get("left"),right:a.get("right"),top:a.get("top"),bottom:a.get("bottom")},box:{width:e.getWidth(),height:e.getHeight()},emptyItemWidth:a.get("emptyItemWidth"),totalWidth:0,renderList:[]};this._prepare(a,r,l,s);this._renderContent(a,r,l,o,s);i.positionGroup(n,l.pos,l.box)},_prepare:function(t,e,r,a){for(var i=e;i;i=i.parentNode){var n=i.getModel().get("name");var l=a.getTextRect(n);var u=Math.max(l.width+o*2,r.emptyItemWidth);r.totalWidth+=u+s;r.renderList.push({node:i,text:n,width:u})}},_renderContent:function(t,e,r,o,l){var u=0;var c=r.emptyItemWidth;var v=t.get("height");var f=i.getAvailableSize(r.pos,r.box);var d=r.totalWidth;var p=r.renderList;for(var g=p.length-1;g>=0;g--){var m=p[g];var y=m.width;var x=m.text;if(d>f.width){d-=y-c;y=c;x=""}this.group.add(new a.Polygon({shape:{points:h(u,0,y,v,g===p.length-1,g===0)},style:n.defaults(o.getItemStyle(),{lineJoin:"bevel",text:x,textFill:l.getTextColor(),textFont:l.getFont()}),z:10,onclick:n.bind(this._onSelect,this,m.node)}));u+=y+s}},remove:function(){this.group.removeAll()}};function h(t,e,r,a,i,n){var o=[[i?t:t-l,e],[t+r,e],[t+r,e+a],[i?t:t-l,e+a]];!n&&o.splice(2,0,[t+r+l,e+a/2]);!i&&o.push([t,e+a/2]);return o}t.exports=u},function(t,e,r){var a=r(3);function i(){var t=[];var e={};var r;return{add:function(r,i,n,o,s){if(a.isString(o)){s=o;o=0}if(e[r.id]){return false}e[r.id]=1;t.push({el:r,target:i,time:n,delay:o,easing:s});return true},done:function(t){r=t;return this},start:function(){var a=t.length;for(var i=0,n=t.length;i<n;i++){var o=t[i];o.el.animateTo(o.target,o.time,o.delay,o.easing,s)}return this;function s(){a--;if(!a){t.length=0;e={};r&&r()}}}}}t.exports={createWrap:i}},function(t,e,r){var a=r(1);var i=r(181);var n=function(){};var o=["treemapZoomToNode","treemapRender","treemapMove"];for(var s=0;s<o.length;s++){a.registerAction({type:o[s],update:"updateView"},n)}a.registerAction({type:"treemapRootToNode",update:"updateView"},function(t,e){e.eachComponent({mainType:"series",subType:"treemap",query:t},function(e,r){var a=i.retrieveTargetInfo(t,e);if(a){var n=e.getViewRoot();if(n){t.direction=i.aboveViewRoot(n,a.node)?"rollup":"drilldown"}e.resetViewRoot(a.node)}})})},function(t,e,r){var a=r(187);var i=r(38);var n=r(3);var o=n.isArray;var s="itemStyle.normal";t.exports=function(t,e){var r={mainType:"series",subType:"treemap",query:e};t.eachComponent(r,function(t){var e=t.getData().tree;var r=e.root;var a=t.getModel(s);if(r.isRemoved()){return}var i=n.map(e.levelModels,function(t){return t?t.get(s):null});l(r,{},i,a,t.getViewRoot().getAncestors(),t)})};function l(t,e,r,a,i,o){var v=t.getModel();var d=t.getLayout();if(d.invisible){return}var g=t.getModel(s);var m=r[t.depth];var y=u(g,e,m,a);var x=g.get("borderColor");var _=g.get("borderColorSaturation");var w;if(_!=null){w=h(y,t);x=c(_,w)}t.setVisual("borderColor",x);var b=t.viewChildren;if(!b||!b.length){w=h(y,t);t.setVisual("color",w)}else{var M=f(t,v,d,g,y,b);n.each(b,function(t,e){if(t.depth>=i.length||t===i[t.depth]){var n=p(v,y,t,e,M,o);l(t,n,r,a,i,o)}})}}function u(t,e,r,a){var i=n.extend({},e);n.each(["color","colorAlpha","colorSaturation"],function(n){var o=t.get(n,true);o==null&&r&&(o=r[n]);o==null&&(o=e[n]);o==null&&(o=a.get(n));o!=null&&(i[n]=o)});return i}function h(t){var e=v(t,"color");if(e){var r=v(t,"colorAlpha");var a=v(t,"colorSaturation");if(a){e=i.modifyHSL(e,null,null,a)}if(r){e=i.modifyAlpha(e,r)}return e}}function c(t,e){return e!=null?i.modifyHSL(e,null,null,t):null}function v(t,e){var r=t[e];if(r!=null&&r!=="none"){return r}}function f(t,e,r,i,n,o){if(!o||!o.length){return}var s=d(e,"color")||n.color!=null&&n.color!=="none"&&(d(e,"colorAlpha")||d(e,"colorSaturation"));if(!s){return}var l=e.get("colorMappingBy");var u={type:s.name,dataExtent:r.dataExtent,visual:s.range};if(u.type==="color"&&(l==="index"||l==="id")){u.mappingMethod="category";u.loop=true}else{u.mappingMethod="linear"}var h=new a(u);h.__drColorMappingBy=l;return h}function d(t,e){var r=t.get(e);return o(r)&&r.length?{name:e,range:r}:null}function p(t,e,r,a,i,o){var s=n.extend({},e);if(i){var l=i.type;var u=l==="color"&&i.__drColorMappingBy;var h=u==="index"?a:u==="id"?o.mapIdToIndex(r.getId()):r.getValue(t.get("visualDimension"));s[l]=i.mapValueToVisual(h)}return s}},function(t,e,r){var a=r(3);var i=r(38);var n=r(7).linearMap;var o=a.each;var s=a.isObject;var l=-1;function u(t,e,r,i){if(a.isArray(t)){return a.map(t,function(t){return n(t,e,r,i)})}return n(t,e,r,i)}var h=function(t){var e=t.mappingMethod;var r=t.type;this.type=r;this.mappingMethod=e;var i=this.option=a.clone(t);this._normalizeData=x[e];this._getSpecifiedVisual=a.bind(_[e],this,r);a.extend(this,c[r]);if(e==="piecewise"){v(i)}if(e==="category"){f(i)}};h.prototype={constructor:h,applyVisual:null,isValueActive:null,mapValueToVisual:null,getNormalizer:function(){return a.bind(this._normalizeData,this)}};var c=h.visualHandlers={color:{applyVisual:g,getColorMapper:function(){var t=y(this)?this.option.visual:a.map(this.option.visual,i.parse);return a.bind(y(this)?function(e,r){!r&&(e=this._normalizeData(e));return m(this,t,e)}:function(e,r,n){var o=!!n;!r&&(e=this._normalizeData(e));n=i.fastMapToColor(e,t,n);return o?n:a.stringify(n,"rgba")},this)},mapValueToVisual:function(t){var e=this.option.visual;if(a.isArray(t)){t=[this._normalizeData(t[0]),this._normalizeData(t[1])];return i.mapIntervalToColor(t,e)}else{var r=this._normalizeData(t);var n=this._getSpecifiedVisual(t);if(n==null){n=y(this)?m(this,e,r):i.mapToColor(r,e)}return n}}},colorHue:d(function(t,e){return i.modifyHSL(t,e)}),colorSaturation:d(function(t,e){return i.modifyHSL(t,null,e)}),colorLightness:d(function(t,e){return i.modifyHSL(t,null,null,e)}),colorAlpha:d(function(t,e){return i.modifyAlpha(t,e)}),symbol:{applyVisual:function(t,e,r){var i=this.mapValueToVisual(t);if(a.isString(i)){r("symbol",i)}else if(s(i)){for(var n in i){if(i.hasOwnProperty(n)){r(n,i[n])}}}},mapValueToVisual:function(t){var e=this._normalizeData(t);var r=this._getSpecifiedVisual(t);var a=this.option.visual;if(r==null){r=y(this)?m(this,a,e):p(a,e)||{}}return r}},symbolSize:{applyVisual:function(t,e,r){r("symbolSize",this.mapValueToVisual(t))},mapValueToVisual:function(t){var e=this._normalizeData(t);var r=this._getSpecifiedVisual(t);var a=this.option.visual;if(r==null){r=y(this)?m(this,a,e):u(e,[0,1],a,true)}return r}}};function v(t){var e=t.pieceList;t.hasSpecialVisual=false;a.each(e,function(e,r){e.originIndex=r;if(e.visual){t.hasSpecialVisual=true}})}function f(t){var e=t.categories;var r=t.visual;var i=a.isArray(r);if(!e){if(!i){throw new Error}else{return}}var n=t.categoryMap={};o(e,function(t,e){n[t]=e});if(!i){var s=[];if(a.isObject(r)){o(r,function(t,e){var r=n[e];s[r!=null?r:l]=t})}else{s[l]=r}r=t.visual=s}for(var u=e.length-1;u>=0;u--){if(r[u]==null){delete n[e[u]];e.pop()}}}function d(t){return{applyVisual:function(e,r,i){var n=r("color");var o=a.isArray(e);e=o?[this.mapValueToVisual(e[0]),this.mapValueToVisual(e[1])]:this.mapValueToVisual(e);if(a.isArray(n)){for(var s=0,l=n.length;s<l;s++){n[s].color=t(n[s].color,o?e[s]:e)}}else{i("color",t(n,e))}},mapValueToVisual:function(t){var e=this._normalizeData(t);var r=this._getSpecifiedVisual(t);var a=this.option.visual;if(r==null){r=y(this)?m(this,a,e):u(e,[0,1],a,true)}return r}}}function p(t,e){return t[Math.round(u(e,[0,1],[0,t.length-1],true))]}function g(t,e,r){r("color",this.mapValueToVisual(t))}function m(t,e,r){return e[t.option.loop&&r!==l?r%e.length:r]}function y(t){return t.option.mappingMethod==="category"}var x={linear:function(t){return u(t,this.option.dataExtent,[0,1],true)},piecewise:function(t){var e=this.option.pieceList;var r=h.findPieceIndex(t,e);if(r!=null){return u(r,[0,e.length-1],[0,1],true)}},category:function(t){var e=this.option.categories?this.option.categoryMap[t]:t;return e==null?l:e}};var _={linear:a.noop,piecewise:function(t,e){var r=this.option;var a=r.pieceList;if(r.hasSpecialVisual){var i=h.findPieceIndex(e,a);var n=a[i];if(n&&n.visual){return n.visual[t]}}},category:a.noop};h.addVisualHandler=function(t,e){c[t]=e};h.isValidType=function(t){return c.hasOwnProperty(t)};h.eachVisual=function(t,e,r){if(a.isObject(t)){a.each(t,e,r)}else{e.call(r,t)}};h.mapVisual=function(t,e,r){var i;var n=a.isArray(t)?[]:a.isObject(t)?{}:(i=true,null);h.eachVisual(t,function(t,a){var o=e.call(r,t,a);i?n=o:n[a]=o});return n};h.isInVisualCluster=function(t,e){return e==="color"?!!(t&&t.indexOf(e)===0):t===e};h.retrieveVisuals=function(t){var e={};var r;t&&o(c,function(a,i){if(t.hasOwnProperty(i)){e[i]=t[i];r=true}});return r?e:null};h.prepareVisualTypes=function(t){if(s(t)){var e=[];o(t,function(t,r){e.push(r)});t=e}else if(a.isArray(t)){t=t.slice()}else{return[]}t.sort(function(t,e){return e==="color"&&t!=="color"&&t.indexOf("color")===0?1:-1});return t};h.findPieceIndex=function(t,e){for(var r=0,a=e.length;r<a;r++){var i=e[r];if(i.value!=null&&i.value===t){return r}}for(var r=0,a=e.length;r<a;r++){var i=e[r];var n=i.interval;if(n){if(n[0]===-Infinity){if(t<n[1]){return r}}else if(n[1]===Infinity){if(n[0]<t){return r}}else if(i.interval[0]<=t&&t<=i.interval[1]){return r}}}};t.exports=h},function(t,e,r){var a=Math.max;var i=Math.min;var n=r(3);var o=r(7);var s=r(21);var l=r(181);var u=o.parsePercent;var h=n.retrieve;var c=r(15);var l=r(181);function v(t,e,r){var a={mainType:"series",subType:"treemap",query:r};t.eachComponent(a,function(t){var a=e.getWidth();var i=e.getHeight();var n=t.option;var o=n.size||[];var v=u(h(n.width,o[0]),a);var d=u(h(n.height,o[1]),i);var p=s.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()});var g=r&&r.type;var m=l.retrieveTargetInfo(r,t);var y=g==="treemapRender"||g==="treemapMove"?r.rootRect:null;var x=t.getViewRoot();if(g!=="treemapMove"){var M=g==="treemapZoomToNode"?_(t,m,x,v,d):y?[y.width,y.height]:[v,d];var S=n.sort;if(S&&S!=="asc"&&S!=="desc"){S="desc"}var I={squareRatio:n.squareRatio,sort:S,leafDepth:n.leafDepth};x.setLayout({x:0,y:0,width:M[0],height:M[1],area:M[0]*M[1]});f(x,I,false,0)}x.setLayout(w(p,y,m),true);t.setLayoutInfo(p);b(t.getData().tree.root,new c(-p.x,-p.y,a,i),l.getPathToRoot(x))})}function f(t,e,r,n){var o;var s;if(t.isRemoved()){return}var l=t.getLayout();o=l.width;s=l.height;var u=t.getModel("itemStyle.normal");var h=u.get("borderWidth");var c=u.get("gapWidth")/2;var v=h-c;var p=t.getModel();t.setLayout({borderWidth:h},true);o=a(o-2*v,0);s=a(s-2*v,0);var g=o*s;var m=d(t,p,g,e,r,n);if(!m.length){return}var _={x:v,y:v,width:o,height:s};var w=i(o,s);var b=Infinity;var M=[];M.area=0;for(var S=0,I=m.length;S<I;){var A=m[S];M.push(A);M.area+=A.getLayout().area;var T=y(M,w,e.squareRatio);if(T<=b){S++;b=T}else{M.area-=M.pop().getLayout().area;x(M,w,_,c,false);w=i(_.width,_.height);M.length=M.area=0;b=Infinity}}if(M.length){x(M,w,_,c,true)}if(!r){var C=p.get("childrenVisibleMin");if(C!=null&&g<C){r=true}}for(var S=0,I=m.length;S<I;S++){f(m[S],e,r,n+1)}}function d(t,e,r,a,i,o){var s=t.children||[];var l=a.sort;l!=="asc"&&l!=="desc"&&(l=null);var u=a.leafDepth!=null&&a.leafDepth<=o;if(i&&!u){return t.viewChildren=[]}s=n.filter(s,function(t){return!t.isRemoved()});g(s,l);var h=m(e,s,l);if(h.sum===0){return t.viewChildren=[]}h.sum=p(e,r,h.sum,l,s);if(h.sum===0){return t.viewChildren=[]}for(var c=0,v=s.length;c<v;c++){var f=s[c].getValue()/h.sum*r;s[c].setLayout({area:f})}if(u){s.length&&t.setLayout({isLeafRoot:true},true);s.length=0}t.viewChildren=s;t.setLayout({dataExtent:h.dataExtent},true);return s}function p(t,e,r,a,i){if(!a){return r}var n=t.get("visibleMin");var o=i.length;var s=o;for(var l=o-1;l>=0;l--){var u=i[a==="asc"?o-l-1:l].getValue();if(u/r*e<n){s=l;r-=u}}a==="asc"?i.splice(0,o-s):i.splice(s,o-s);return r}function g(t,e){if(e){t.sort(function(t,r){return e==="asc"?t.getValue()-r.getValue():r.getValue()-t.getValue()})}return t}function m(t,e,r){var a=0;for(var i=0,o=e.length;i<o;i++){a+=e[i].getValue()}var s=t.get("visualDimension");var l;if(!e||!e.length){l=[NaN,NaN]}else if(s==="value"&&r){l=[e[e.length-1].getValue(),e[0].getValue()];r==="asc"&&l.reverse()}else{var l=[Infinity,-Infinity];n.each(e,function(t){var e=t.getValue(s);e<l[0]&&(l[0]=e);e>l[1]&&(l[1]=e)})}return{sum:a,dataExtent:l}}function y(t,e,r){var i=0;var n=Infinity;for(var o=0,s,l=t.length;o<l;o++){s=t[o].getLayout().area;if(s){s<n&&(n=s);s>i&&(i=s)}}var u=t.area*t.area;var h=e*e*r;return u?a(h*i/u,u/(h*n)):Infinity}function x(t,e,r,n,o){var s=e===r.width?0:1;var l=1-s;var u=["x","y"];var h=["width","height"];var c=r[u[s]];var v=e?t.area/e:0;if(o||v>r[h[l]]){v=r[h[l]]}for(var f=0,d=t.length;f<d;f++){var p=t[f];var g={};var m=v?p.getLayout().area/v:0;var y=g[h[l]]=a(v-2*n,0);var x=r[u[s]]+r[h[s]]-c;var _=f===d-1||x<m?x:m;var w=g[h[s]]=a(_-2*n,0);g[u[l]]=r[u[l]]+i(n,y/2);g[u[s]]=c+i(n,w/2);c+=_;p.setLayout(g,true)}r[u[l]]+=v;r[h[l]]-=v}function _(t,e,r,a,i){var n=(e||{}).node;var s=[a,i];if(!n||n===r){return s}var l;var u=a*i;var h=u*t.option.zoomToNodeRatio;while(l=n.parentNode){var c=0;var v=l.children;for(var f=0,d=v.length;f<d;f++){c+=v[f].getValue()}var p=n.getValue();if(p===0){return s}h*=c/p;var g=l.getModel("itemStyle.normal").get("borderWidth");if(isFinite(g)){h+=4*g*g+4*g*Math.pow(h,.5)}h>o.MAX_SAFE_INTEGER&&(h=o.MAX_SAFE_INTEGER);n=l}h<u&&(h=u);var m=Math.pow(h/u,.5);return[a*m,i*m]}function w(t,e,r){if(e){return{x:e.x,y:e.y}}var a={x:0,y:0};if(!r){return a}var i=r.node;var n=i.getLayout();if(!n){return a}var o=[n.width/2,n.height/2];var s=i;while(s){var l=s.getLayout();o[0]+=l.x;o[1]+=l.y;s=s.parentNode}return{x:t.width/2-o[0],y:t.height/2-o[1]}}function b(t,e,r){var a=t.getLayout();t.setLayout({invisible:a?!e.intersect(a):!l.aboveViewRootByViewPath(r,t)},true);var i=t.viewChildren||[];for(var n=0,o=i.length;n<o;n++){var s=new c(e.x-a.x,e.y-a.y,e.width,e.height);b(i[n],s,r)}}t.exports=v},function(t,e,r){var a=r(1);var i=r(3);r(190);r(193);r(197);a.registerProcessor("filter",r(198));a.registerVisualCoding("chart",i.curry(r(103),"graph","circle",null));a.registerVisualCoding("chart",r(199));a.registerLayout(r(200));a.registerLayout(r(202));a.registerLayout(r(204));a.registerCoordinateSystem("graphView",{create:r(206)})},function(t,e,r){"use strict";var a=r(94);var i=r(3);var n=r(191);var o=r(1).extendSeriesModel({type:"series.graph",init:function(t){o.superApply(this,"init",arguments);this.legendDataProvider=function(){return this._categoriesData};this._updateCategoriesData()},mergeOption:function(t){o.superApply(this,"mergeOption",arguments);this._updateCategoriesData()},getInitialData:function(t,e){var r=t.edges||t.links;var a=t.data||t.nodes;if(a&&r){var i=n(a,r,this,true);var o=i.data;var s=this;o.wrapMethod("getItemModel",function(t){var e=s._categoriesModels;var r=t.getShallow("category");var a=e[r];if(a){a.parentModel=t.parentModel;t.parentModel=a}return t});return o}},restoreData:function(){o.superApply(this,"restoreData",arguments);this.getGraph().restoreData()},getGraph:function(){return this.getData().graph},getEdgeData:function(){return this.getGraph().edgeData},getCategoriesData:function(){return this._categoriesData},_updateCategoriesData:function(){var t=i.map(this.option.categories||[],function(t){return t.value!=null?t:i.extend({value:0},t)});var e=new a(["value"],this);e.initData(t);this._categoriesData=e;this._categoriesModels=e.mapArray(function(t){return e.getItemModel(t,true)})},setRoamZoom:function(t){var e=this.option.roamDetail;e&&(e.zoom=t)},setRoamPan:function(t,e){var r=this.option.roamDetail;if(r){r.x=t;r.y=e}},defaultOption:{zlevel:0,z:2,color:["#61a0a8","#d14a61","#fd9c35","#675bba","#fec42c","#dd4444","#fd9c35","#cd4870"],coordinateSystem:"view",legendHoverLink:true,hoverAnimation:true,layout:null,force:{initLayout:null,repulsion:50,gravity:.1,edgeLength:30,layoutAnimation:true},left:"center",top:"center",symbol:"circle",symbolSize:10,draggable:false,roam:false,roamDetail:{x:0,y:0,zoom:1},nodeScaleRatio:.6,label:{normal:{show:false},emphasis:{show:true}},itemStyle:{normal:{},emphasis:{}},lineStyle:{normal:{color:"#aaa",width:1,curveness:0,opacity:.5},emphasis:{}}}});t.exports=o},function(t,e,r){var a=r(94);var i=r(192);var n=r(180);var o=r(96);var s=r(3);t.exports=function(t,e,r,l){var u=new i(l);for(var h=0;h<t.length;h++){u.addNode(s.retrieve(t[h].id,t[h].name,h),h)}var c=[];var v=[];for(var h=0;h<e.length;h++){var f=e[h];if(u.addEdge(f.source,f.target,h)){v.push(f);c.push(s.retrieve(f.id,f.source+" - "+f.target))}}var d=o(["value"],t);var p=new a(d,r);var g=new a(["value"],r);p.initData(t);g.initData(v,c);u.setEdgeData(g);n.linkToGraph(p,u);u.update();return u}},function(t,e,r){"use strict";var a=r(3);var i=function(t){this._directed=t||false;this.nodes=[];this.edges=[];this._nodesMap={};this._edgesMap={};this.data;this.edgeData};var n=i.prototype;n.type="graph";n.isDirected=function(){return this._directed};n.addNode=function(t,e){var r=this._nodesMap;if(r[t]){return}var a=new o(t,e);a.hostGraph=this;this.nodes.push(a);r[t]=a;return a};n.getNodeByIndex=function(t){var e=this.data.getRawIndex(t);return this.nodes[e]};n.getNodeById=function(t){return this._nodesMap[t]};n.addEdge=function(t,e,r){var a=this._nodesMap;var i=this._edgesMap;if(!(t instanceof o)){t=a[t]}if(!(e instanceof o)){e=a[e]}if(!t||!e){return}var n=t.id+"-"+e.id;if(i[n]){return}var l=new s(t,e,r);l.hostGraph=this;if(this._directed){t.outEdges.push(l);e.inEdges.push(l)}t.edges.push(l);if(t!==e){e.edges.push(l)}this.edges.push(l);i[n]=l;return l};n.getEdgeByIndex=function(t){var e=this.edgeData.getRawIndex(t);return this.edges[e]};n.getEdge=function(t,e){if(t instanceof o){t=t.id}if(e instanceof o){e=e.id}var r=this._edgesMap;if(this._directed){return r[t+"-"+e]}else{return r[t+"-"+e]||r[e+"-"+t]}};n.eachNode=function(t,e){var r=this.nodes;var a=r.length;for(var i=0;i<a;i++){if(r[i].dataIndex>=0){t.call(e,r[i],i)}}};n.eachEdge=function(t,e){var r=this.edges;var a=r.length;for(var i=0;i<a;i++){if(r[i].dataIndex>=0&&r[i].node1.dataIndex>=0&&r[i].node2.dataIndex>=0){t.call(e,r[i],i)}}};n.breadthFirstTraverse=function(t,e,r,a){if(!(e instanceof o)){e=this._nodesMap[e]}if(!e){return}var i=r==="out"?"outEdges":r==="in"?"inEdges":"edges";for(var n=0;n<this.nodes.length;n++){this.nodes[n].__visited=false}if(t.call(a,e,null)){return}var s=[e];while(s.length){var l=s.shift();var u=l[i];for(var n=0;n<u.length;n++){var h=u[n];var c=h.node1===l?h.node2:h.node1;if(!c.__visited){if(t.call(c,c,l)){return}s.push(c);c.__visited=true}}}};n.update=function(){var t=this.data;var e=this.edgeData;var r=this.nodes;var a=this.edges;for(var i=0,n=r.length;i<n;i++){r[i].dataIndex=-1}for(var i=0,n=t.count();i<n;i++){r[t.getRawIndex(i)].dataIndex=i}e.filterSelf(function(t){var r=a[e.getRawIndex(t)];return r.node1.dataIndex>=0&&r.node2.dataIndex>=0});for(var i=0,n=a.length;i<n;i++){a[i].dataIndex=-1}for(var i=0,n=e.count();i<n;i++){a[e.getRawIndex(i)].dataIndex=i}};n.setEdgeData=function(t){this.edgeData=t;this._edgeDataSaved=t.cloneShallow()};n.restoreData=function(){this.edgeData=this._edgeDataSaved.cloneShallow()};n.clone=function(){var t=new i(this._directed);var e=this.nodes;var r=this.edges;for(var a=0;a<e.length;a++){t.addNode(e[a].id,e[a].dataIndex)}for(var a=0;a<r.length;a++){var n=r[a];t.addEdge(n.node1.id,n.node2.id,n.dataIndex)}return t};function o(t,e){this.id=t==null?"":t;this.inEdges=[];this.outEdges=[];this.edges=[];this.hostGraph;this.dataIndex=e==null?-1:e}o.prototype={constructor:o,degree:function(){return this.edges.length},inDegree:function(){return this.inEdges.length},outDegree:function(){return this.outEdges.length},getModel:function(t){if(this.dataIndex<0){return}var e=this.hostGraph;var r=e.data.getItemModel(this.dataIndex);return r.getModel(t)}};function s(t,e,r){this.node1=t;this.node2=e;this.dataIndex=r==null?-1:r}s.prototype.getModel=function(t){if(this.dataIndex<0){return}var e=this.hostGraph;var r=e.edgeData.getItemModel(this.dataIndex);return r.getModel(t)};var l=function(t,e){return{getValue:function(r){var a=this[t][e];return a.get(a.getDimension(r||"value"),this.dataIndex)},setVisual:function(r,a){this.dataIndex>=0&&this[t][e].setItemVisual(this.dataIndex,r,a)},getVisual:function(r,a){return this[t][e].getItemVisual(this.dataIndex,r,a)},setLayout:function(r,a){this.dataIndex>=0&&this[t][e].setItemLayout(this.dataIndex,r,a)},getLayout:function(){return this[t][e].getItemLayout(this.dataIndex)},getGraphicEl:function(){return this[t][e].getItemGraphicEl(this.dataIndex)},getRawIndex:function(){return this[t][e].getRawIndex(this.dataIndex)}}};a.mixin(o,l("hostGraph","data"));a.mixin(s,l("hostGraph","edgeData"));i.Node=o;i.Edge=s;t.exports=i},function(t,e,r){var a=r(98);var i=r(194);var n=r(159);var o=r(5);var s=r(42);r(1).extendChartView({type:"graph",init:function(t,e){var r=new a;var o=new i;var s=this.group;var l=new n(e.getZr(),s);s.add(r.group);s.add(o.group);this._symbolDraw=r;this._lineDraw=o;this._controller=l;this._firstRender=true},render:function(t,e,r){var a=t.coordinateSystem;if(a.type!=="geo"&&a.type!=="view"){return}var i=t.getData();this._model=t;var n=this._symbolDraw;var l=this._lineDraw;n.updateData(i);var u=i.graph.edgeData;var h=t.option;var c=o.createDataFormatModel(t,u,h.edges||h.links);c.formatTooltip=function(t){var e=this.getDataParams(t);var r=i.graph.getEdgeByIndex(t);var a=i.getName(r.node1.dataIndex);var n=i.getName(r.node2.dataIndex);var o=a+" > "+n;if(e.value){o+=" : "+e.value}return o};l.updateData(u,null,null);u.eachItemGraphicEl(function(t){t.traverse(function(t){t.dataModel=c})});var v=this.group;var f={position:a.position,scale:a.scale};if(this._firstRender){
v.attr(f)}else{s.updateProps(v,f,t)}this._nodeScaleRatio=t.get("nodeScaleRatio");this._updateNodeAndLinkScale();this._updateController(t,a,r);clearTimeout(this._layoutTimeout);var d=t.forceLayout;var p=t.get("force.layoutAnimation");if(d){this._startForceLayoutIteration(d,p)}i.eachItemGraphicEl(function(t,e){var r=i.getItemModel(e).get("draggable");if(r&&d){t.on("drag",function(){d.warmUp();!this._layouting&&this._startForceLayoutIteration(d,p);d.setFixed(e);i.setItemLayout(e,t.position)},this).on("dragend",function(){d.setUnfixed(e)},this)}else{t.off("drag")}t.setDraggable(r)},this);this._firstRender=false},_startForceLayoutIteration:function(t,e){var r=this;(function a(){t.step(function(t){r.updateLayout();(r._layouting=!t)&&(e?r._layoutTimeout=setTimeout(a,16):a())})})()},_updateController:function(t,e,r){var a=this._controller;a.rect=e.getViewRect();a.enable(t.get("roam"));a.off("pan").off("zoom").on("pan",function(e,a){r.dispatchAction({seriesId:t.id,type:"graphRoam",dx:e,dy:a})}).on("zoom",function(e,a,i){r.dispatchAction({seriesId:t.id,type:"graphRoam",zoom:e,originX:a,originY:i})}).on("zoom",this._updateNodeAndLinkScale,this)},_updateNodeAndLinkScale:function(){var t=this._model;var e=t.getData();var r=this.group;var a=this._nodeScaleRatio;var i=r.scale[0];var n=(i-1)*a+1;var o=[n/i,n/i];e.eachItemGraphicEl(function(t,e){t.attr("scale",o)})},updateLayout:function(t,e){this._symbolDraw.updateLayout();this._lineDraw.updateLayout()},remove:function(t,e){this._symbolDraw&&this._symbolDraw.remove();this._lineDraw&&this._lineDraw.remove()}})},function(t,e,r){var a=r(42);var i=r(195);function n(t){this._ctor=t||i;this.group=new a.Group}var o=n.prototype;o.updateData=function(t,e,r){var a=this._lineData;var i=this.group;var n=this._ctor;t.diff(a).add(function(a){var o=new n(t,e,r,a);t.setItemGraphicEl(a,o);i.add(o)}).update(function(n,o){var s=a.getItemGraphicEl(o);s.updateData(t,e,r,n);t.setItemGraphicEl(n,s);i.add(s)}).remove(function(t){i.remove(a.getItemGraphicEl(t))}).execute();this._lineData=t;this._fromData=e;this._toData=r};o.updateLayout=function(){var t=this._lineData;t.eachItemGraphicEl(function(e,r){e.updateLayout(t,this._fromData,this._toData,r)},this)};o.remove=function(){this.group.removeAll()};t.exports=n},function(t,e,r){var a=r(100);var i=r(16);var n=r(196);var o=r(42);var s=r(3);var l=r(7);function u(t,e,r){var i=e.getItemVisual(r,"color");var n=e.getItemVisual(r,"symbol");var o=e.getItemVisual(r,"symbolSize");if(n==="none"){return}if(!s.isArray(o)){o=[o,o]}var l=a.createSymbol(n,-o[0]/2,-o[1]/2,o[0],o[1],i);l.name=t;return l}function h(t){var e=new n({name:"line",style:{strokeNoScale:true}});c(e.shape,t);return e}function c(t,e){var r=e[0];var a=e[1];var i=e[2];t.x1=r[0];t.y1=r[1];t.x2=a[0];t.y2=a[1];t.percent=1;if(i){t.cpx1=i[0];t.cpy1=i[1]}}function v(t){return t.type==="symbol"&&t.shape.symbolType==="arrow"}function f(){var t=this;var e=t.childOfName("line");if(!this.__dirty&&!e.__dirty){return}var r=t.childOfName("fromSymbol");var a=t.childOfName("toSymbol");var n=t.childOfName("label");var o=e.pointAt(0);var s=e.pointAt(e.shape.percent);var l=i.sub([],s,o);i.normalize(l,l);if(r){r.attr("position",o);if(v(r)){r.attr("rotation",d(s,o))}}if(a){a.attr("position",s);if(v(a)){a.attr("rotation",d(o,s))}}n.attr("position",s);var u;var h;var c;if(n.__position==="end"){u=[l[0]*5+s[0],l[1]*5+s[1]];h=l[0]>.8?"left":l[0]<-.8?"right":"center";c=l[1]>.8?"top":l[1]<-.8?"bottom":"middle"}else{u=[-l[0]*5+o[0],-l[1]*5+o[1]];h=l[0]>.8?"right":l[0]<-.8?"left":"center";c=l[1]>.8?"bottom":l[1]<-.8?"top":"middle"}n.attr({style:{textVerticalAlign:n.__verticalAlign||c,textAlign:n.__textAlign||h},position:u})}function d(t,e){return-Math.PI/2-Math.atan2(e[1]-t[1],e[0]-t[0])}function p(t,e,r,a){o.Group.call(this);this._createLine(t,e,r,a)}var g=p.prototype;g.beforeUpdate=f;g._createLine=function(t,e,r,a){var i=t.hostModel;var n=t.getItemLayout(a);var s=h(n);s.shape.percent=0;o.initProps(s,{shape:{percent:1}},i);this.add(s);var l=new o.Text({name:"label"});this.add(l);if(e){var c=u("fromSymbol",e,a);this.add(c);this._fromSymbolType=e.getItemVisual(a,"symbol")}if(r){var v=u("toSymbol",r,a);this.add(v);this._toSymbolType=r.getItemVisual(a,"symbol")}this._updateCommonStl(t,e,r,a)};g.updateData=function(t,e,r,a){var i=t.hostModel;var n=this.childOfName("line");var s=t.getItemLayout(a);var l={shape:{}};c(l.shape,s);o.updateProps(n,l,i);if(e){var h=e.getItemVisual(a,"symbol");if(this._fromSymbolType!==h){var v=u("fromSymbol",e,a);this.remove(this.childOfName("fromSymbol"));this.add(v)}this._fromSymbolType=h}if(r){var f=r.getItemVisual(a,"symbol");if(f!==this._toSymbolType){var d=u("toSymbol",r,a);this.remove(this.childOfName("toSymbol"));this.add(d)}this._toSymbolType=f}this._updateCommonStl(t,e,r,a)};g._updateCommonStl=function(t,e,r,a){var i=t.hostModel;var n=this.childOfName("line");var u=t.getItemModel(a);var h=u.getModel("label.normal");var c=h.getModel("textStyle");var v=u.getModel("label.emphasis");var f=v.getModel("textStyle");var d=l.round(i.getRawValue(a));if(isNaN(d)){d=t.getName(a)}n.setStyle(s.extend({stroke:t.getItemVisual(a,"color")},u.getModel("lineStyle.normal").getLineStyle()));var p=this.childOfName("label");p.setStyle({text:h.get("show")?s.retrieve(i.getFormattedLabel(a,"normal"),d):"",textFont:c.getFont(),fill:c.getTextColor()||t.getItemVisual(a,"color")});p.hoverStyle={text:v.get("show")?s.retrieve(i.getFormattedLabel(a,"emphasis"),d):"",textFont:f.getFont(),fill:f.getTextColor()};p.__textAlign=c.get("align");p.__verticalAlign=c.get("baseline");p.__position=h.get("position");o.setHoverStyle(this,u.getModel("lineStyle.emphasis").getLineStyle())};g.updateLayout=function(t,e,r,a){var i=t.getItemLayout(a);var n=this.childOfName("line");c(n.shape,i);n.dirty(true)};s.inherits(p,o.Group);t.exports=p},function(t,e,r){var a=r(42);var i=a.Line.prototype;var n=a.BezierCurve.prototype;t.exports=a.extendShape({type:"ec-line",style:{stroke:"#000",fill:null},shape:{x1:0,y1:0,x2:0,y2:0,percent:1,cpx1:null,cpy1:null},buildPath:function(t,e){(e.cpx1==null||e.cpy1==null?i:n).buildPath(t,e)},pointAt:function(t){var e=this.shape;return e.cpx1==null||e.cpy1==null?i.pointAt.call(this,t):n.pointAt.call(this,t)}})},function(t,e,r){var a=r(1);var i=r(162);var n={type:"graphRoam",event:"graphRoam",update:"none"};a.registerAction(n,function(t,e){e.eachComponent({mainType:"series",query:t},function(e){var r=e.coordinateSystem;var a=e.getModel("roamDetail");var n=i.calcPanAndZoom(a,t);e.setRoamPan&&e.setRoamPan(n.x,n.y);e.setRoamZoom&&e.setRoamZoom(n.zoom);r&&r.setPan(n.x,n.y);r&&r.setZoom(n.zoom)})})},function(t,e){t.exports=function(t){var e=t.findComponents({mainType:"legend"});if(!e||!e.length){return}t.eachSeriesByType("graph",function(t){var r=t.getCategoriesData();var a=t.getGraph();var i=a.data;var n=r.mapArray(r.getName);i.filterSelf(function(t){var r=i.getItemModel(t);var a=r.getShallow("category");if(a!=null){if(typeof a==="number"){a=n[a]}for(var o=0;o<e.length;o++){if(!e[o].isSelected(a)){return false}}}return true})},this)}},function(t,e){t.exports=function(t){t.eachSeriesByType("graph",function(t){var e=t.get("color");var r=t.getCategoriesData();var a=t.getData();var i={};r.each(function(t){i[r.getName(t)]=t;var a=r.getItemModel(t);var n=r.getRawIndex(t);var o=a.get("itemStyle.normal.color")||e[n%e.length];r.setItemVisual(t,"color",o)});if(r.count()){a.each(function(t){var e=a.getItemModel(t);var n=e.getShallow("category");if(n!=null){if(typeof n==="string"){n=i[n]}a.setItemVisual(t,"color",r.getItemVisual(n,"color"))}})}})}},function(t,e,r){var a=r(201);t.exports=function(t,e){t.eachSeriesByType("graph",function(t){var e=t.get("layout");if(!e||e==="none"){a(t)}})}},function(t,e){t.exports=function(t){var e=t.coordinateSystem;if(e&&e.type!=="view"){return}var r=t.getGraph();r.eachNode(function(t){var e=t.getModel();t.setLayout([+e.get("x"),+e.get("y")])});r.eachEdge(function(t){var e=t.getModel().get("lineStyle.normal.curveness")||0;var r=t.node1.getLayout();var a=t.node2.getLayout();var i;if(e>0){i=[(r[0]+a[0])/2-(r[1]-a[1])*e,(r[1]+a[1])/2-(a[0]-r[0])*e]}t.setLayout([r,a,i])})}},function(t,e,r){var a=r(203);t.exports=function(t,e){t.eachSeriesByType("graph",function(t){if(t.get("layout")==="circular"){a(t)}})}},function(t,e){t.exports=function(t){var e=t.coordinateSystem;if(e&&e.type!=="view"){return}var r=e.getBoundingRect();var a=t.getData();var i=a.graph;var n=0;var o=a.getSum("value");var s=Math.PI*2/(o||a.count());var l=r.width/2+r.x;var u=r.height/2+r.y;var h=Math.min(r.width,r.height)/2;i.eachNode(function(t){var e=t.getValue("value");n+=s*(o?e:2)/2;t.setLayout([h*Math.cos(n)+l,h*Math.sin(n)+u]);n+=s*(o?e:2)/2});i.eachEdge(function(t){var e=t.getModel().get("lineStyle.normal.curveness")||0;var r=t.node1.getLayout();var a=t.node2.getLayout();var i;if(e>0){i=[l,u]}t.setLayout([r,a,i])})}},function(t,e,r){var a=r(205);var i=r(7);var n=r(201);var o=r(203);var s=r(16);t.exports=function(t,e){t.eachSeriesByType("graph",function(t){if(t.get("layout")==="force"){var e=t.preservedPoints||{};var r=t.getGraph();var l=r.data;var u=r.edgeData;var h=t.getModel("force");var c=h.get("initLayout");if(t.preservedPoints){l.each(function(t){var r=l.getId(t);l.setItemLayout(t,e[r]||[NaN,NaN])})}else if(!c||c==="none"){n(t)}else if(c==="circular"){o(t)}var v=l.getDataExtent("value");var f=h.get("repulsion");var d=h.get("edgeLength");var p=l.mapArray("value",function(t,e){var r=l.getItemLayout(e);var a=i.linearMap(t,v,[0,f])||f/2;return{w:a,rep:a,p:!r||isNaN(r[0])||isNaN(r[1])?null:r}});var g=u.mapArray("value",function(t,e){var a=r.getEdgeByIndex(e);return{n1:p[a.node1.dataIndex],n2:p[a.node2.dataIndex],d:d,curveness:a.getModel().get("lineStyle.normal.curveness")||0}});var m=t.coordinateSystem;var y=m.getBoundingRect();var x=a(p,g,{rect:y,gravity:h.get("gravity")});var _=x.step;x.step=function(t){for(var a=0,i=p.length;a<i;a++){if(p[a].fixed){s.copy(p[a].p,r.getNodeByIndex(a).getLayout())}}_(function(a,i,n){for(var o=0,s=a.length;o<s;o++){if(!a[o].fixed){r.getNodeByIndex(o).setLayout(a[o].p)}e[l.getId(o)]=a[o].p}for(var o=0,s=i.length;o<s;o++){var u=i[o];var h=u.n1.p;var c=u.n2.p;var v=[h,c];if(u.curveness>0){v.push([(h[0]+c[0])/2-(h[1]-c[1])*u.curveness,(h[1]+c[1])/2-(c[0]-h[0])*u.curveness])}r.getEdgeByIndex(o).setLayout(v)}t&&t(n)})};t.forceLayout=x;t.preservedPoints=e;x.step()}else{t.forceLayout=null}})}},function(t,e,r){var a=r(16);var i=a.scaleAndAdd;t.exports=function(t,e,r){var n=r.rect;var o=n.width;var s=n.height;var l=[n.x+o/2,n.y+s/2];var u=r.gravity==null?.1:r.gravity;for(var h=0;h<t.length;h++){var c=t[h];if(!c.p){c.p=a.create(o*(Math.random()-.5)+l[0],s*(Math.random()-.5)+l[1])}c.pp=a.clone(c.p);c.edges=null}var v=.6;return{warmUp:function(){v=.5},setFixed:function(e){t[e].fixed=true},setUnfixed:function(e){t[e].fixed=false},step:function(r){var n=[];var o=t.length;for(var s=0;s<e.length;s++){var h=e[s];var c=h.n1;var f=h.n2;a.sub(n,f.p,c.p);var d=a.len(n)-h.d;var p=f.w/(c.w+f.w);a.normalize(n,n);!c.fixed&&i(c.p,c.p,n,p*d*v);!f.fixed&&i(f.p,f.p,n,-(1-p)*d*v)}for(var s=0;s<o;s++){var g=t[s];if(!g.fixed){a.sub(n,l,g.p);a.scaleAndAdd(g.p,g.p,n,u*v)}}for(var s=0;s<o;s++){var c=t[s];for(var m=s+1;m<o;m++){var f=t[m];a.sub(n,f.p,c.p);var d=a.len(n);if(d===0){a.set(n,Math.random()-.5,Math.random()-.5);d=1}var y=(c.rep+f.rep)/d/d;!c.fixed&&i(c.pp,c.pp,n,y);!f.fixed&&i(f.pp,f.pp,n,-y)}}var x=[];for(var s=0;s<o;s++){var g=t[s];if(!g.fixed){a.sub(x,g.p,g.pp);a.scaleAndAdd(g.p,g.p,x,v);a.copy(g.pp,g.p)}}v=v*.992;r&&r(t,e,v<.01)}}}},function(t,e,r){var a=r(169);var i=r(21);var n=r(50);function o(t,e,r){var a=t.getBoxLayoutParams();a.aspect=r;return i.getLayoutRect(a,{width:e.getWidth(),height:e.getHeight()})}t.exports=function(t,e){var r=[];t.eachSeriesByType("graph",function(t){var i=t.get("coordinateSystem");if(!i||i==="view"){var s=new a;r.push(s);var l=t.getData();var u=l.mapArray(function(t){var e=l.getItemModel(t);return[+e.get("x"),+e.get("y")]});var h=[];var c=[];n.fromPoints(u,h,c);var v=o(t,e,(c[0]-h[0])/(c[1]-h[1])||1);if(isNaN(h[0])||isNaN(h[1])){h=[v.x,v.y];c=[v.x+v.width,v.y+v.height]}var f=c[0]-h[0];var d=c[1]-h[1];var p=v.width;var g=v.height;s=t.coordinateSystem=new a;s.setBoundingRect(h[0],h[1],f,d);s.setViewRect(v.x,v.y,p,g);var m=t.getModel("roamDetail");s.setPan(m.get("x")||0,m.get("y")||0);s.setZoom(m.get("zoom")||1)}});return r}},function(t,e,r){r(208);r(209)},function(t,e,r){var a=r(94);var i=r(27);var n=r(3);var o=i.extend({type:"series.gauge",getInitialData:function(t,e){var r=new a(["value"],this);var i=t.data||[];if(!n.isArray(i)){i=[i]}r.initData(i);return r},defaultOption:{zlevel:0,z:2,center:["50%","50%"],legendHoverLink:true,radius:"75%",startAngle:225,endAngle:-45,clockwise:true,min:0,max:100,splitNumber:10,axisLine:{show:true,lineStyle:{color:[[.2,"#91c7ae"],[.8,"#63869e"],[1,"#c23531"]],width:30}},splitLine:{show:true,length:30,lineStyle:{color:"#eee",width:2,type:"solid"}},axisTick:{show:true,splitNumber:5,length:8,lineStyle:{color:"#eee",width:1,type:"solid"}},axisLabel:{show:true,textStyle:{color:"auto"}},pointer:{show:true,length:"80%",width:8},itemStyle:{normal:{color:"auto"}},title:{show:true,offsetCenter:[0,"-40%"],textStyle:{color:"#333",fontSize:15}},detail:{show:true,backgroundColor:"rgba(0,0,0,0)",borderWidth:0,borderColor:"#ccc",width:100,height:40,offsetCenter:[0,"40%"],textStyle:{color:"auto",fontSize:30}}}});t.exports=o},function(t,e,r){var a=r(210);var i=r(42);var n=r(7);var o=n.parsePercent;function s(t,e){var r=t.get("center");var a=e.getWidth();var i=e.getHeight();var n=Math.min(a,i);var s=o(r[0],e.getWidth());var l=o(r[1],e.getHeight());var u=o(t.get("radius"),n/2);return{cx:s,cy:l,r:u}}function l(t,e){if(e){if(typeof e==="string"){t=e.replace("{value}",t)}else if(typeof e==="function"){t=e(t)}}return t}var u=Math.PI*2;var h=r(41).extend({type:"gauge",render:function(t,e,r){this.group.removeAll();var a=t.get("axisLine.lineStyle.color");var i=s(t,r);this._renderMain(t,e,r,a,i)},_renderMain:function(t,e,r,a,n){var o=this.group;var s=t.getModel("axisLine");var l=s.getModel("lineStyle");var h=t.get("clockwise");var c=-t.get("startAngle")/180*Math.PI;var v=-t.get("endAngle")/180*Math.PI;var f=(v-c)%u;var d=c;var p=l.get("width");for(var g=0;g<a.length;g++){var v=c+f*a[g][0];var m=new i.Sector({shape:{startAngle:d,endAngle:v,cx:n.cx,cy:n.cy,clockwise:h,r0:n.r-p,r:n.r},silent:true});m.setStyle({fill:a[g][1]});m.setStyle(l.getLineStyle(["color","borderWidth","borderColor"]));o.add(m);d=v}var y=function(t){if(t<=0){return a[0][1]}for(var e=0;e<a.length;e++){if(a[e][0]>=t&&(e===0?0:a[e-1][0])<t){return a[e][1]}}return a[e-1][1]};if(!h){var x=c;c=v;v=x}this._renderTicks(t,e,r,y,n,c,v,h);this._renderPointer(t,e,r,y,n,c,v,h);this._renderTitle(t,e,r,y,n);this._renderDetail(t,e,r,y,n)},_renderTicks:function(t,e,r,a,s,u,h,c){var v=this.group;var f=s.cx;var d=s.cy;var p=s.r;var g=t.get("min");var m=t.get("max");var y=t.getModel("splitLine");var x=t.getModel("axisTick");var _=t.getModel("axisLabel");var w=t.get("splitNumber");var b=x.get("splitNumber");var M=o(y.get("length"),p);var S=o(x.get("length"),p);var I=u;var A=(h-u)/w;var T=A/b;var C=y.getModel("lineStyle").getLineStyle();var L=x.getModel("lineStyle").getLineStyle();var D=_.getModel("textStyle");for(var k=0;k<=w;k++){var P=Math.cos(I);var z=Math.sin(I);if(y.get("show")){var R=new i.Line({shape:{x1:P*p+f,y1:z*p+d,x2:P*(p-M)+f,y2:z*(p-M)+d},style:C,silent:true});if(C.stroke==="auto"){R.setStyle({stroke:a(k/w)})}v.add(R)}if(_.get("show")){var E=l(n.round(k/w*(m-g)+g),_.get("formatter"));var O=new i.Text({style:{text:E,x:P*(p-M-5)+f,y:z*(p-M-5)+d,fill:D.getTextColor(),textFont:D.getFont(),textVerticalAlign:z<-.4?"top":z>.4?"bottom":"middle",textAlign:P<-.4?"left":P>.4?"right":"center"},silent:true});if(O.style.fill==="auto"){O.setStyle({fill:a(k/w)})}v.add(O)}if(x.get("show")&&k!==w){for(var V=0;V<=b;V++){var P=Math.cos(I);var z=Math.sin(I);var N=new i.Line({shape:{x1:P*p+f,y1:z*p+d,x2:P*(p-S)+f,y2:z*(p-S)+d},silent:true,style:L});if(L.stroke==="auto"){N.setStyle({stroke:a((k+V/b)/w)})}v.add(N);I+=T}I-=T}else{I+=A}}},_renderPointer:function(t,e,r,s,l,u,h,c){var v=n.linearMap;var f=[+t.get("min"),+t.get("max")];var d=[u,h];if(!c){d=d.reverse()}var p=t.getData();var g=this._data;var m=this.group;p.diff(g).add(function(e){var r=new a({shape:{angle:u}});i.updateProps(r,{shape:{angle:v(p.get("value",e),f,d)}},t);m.add(r);p.setItemGraphicEl(e,r)}).update(function(e,r){var a=g.getItemGraphicEl(r);i.updateProps(a,{shape:{angle:v(p.get("value",e),f,d)}},t);m.add(a);p.setItemGraphicEl(e,a)}).remove(function(t){var e=g.getItemGraphicEl(t);m.remove(e)}).execute();p.eachItemGraphicEl(function(t,e){var r=p.getItemModel(e);var a=r.getModel("pointer");t.attr({shape:{x:l.cx,y:l.cy,width:o(a.get("width"),l.r),r:o(a.get("length"),l.r)},style:r.getModel("itemStyle.normal").getItemStyle()});if(t.style.fill==="auto"){t.setStyle("fill",s((p.get("value",e)-f[0])/(f[1]-f[0])))}i.setHoverStyle(t,r.getModel("itemStyle.emphasis").getItemStyle())});this._data=p},_renderTitle:function(t,e,r,a,n){var s=t.getModel("title");if(s.get("show")){var l=s.getModel("textStyle");var u=s.get("offsetCenter");var h=n.cx+o(u[0],n.r);var c=n.cy+o(u[1],n.r);var v=new i.Text({style:{x:h,y:c,text:t.getData().getName(0),fill:l.getTextColor(),textFont:l.getFont(),textAlign:"center",textVerticalAlign:"middle"}});this.group.add(v)}},_renderDetail:function(t,e,r,a,n){var s=t.getModel("detail");var u=t.get("min");var h=t.get("max");if(s.get("show")){var c=s.getModel("textStyle");var v=s.get("offsetCenter");var f=n.cx+o(v[0],n.r);var d=n.cy+o(v[1],n.r);var p=o(s.get("width"),n.r);var g=o(s.get("height"),n.r);var m=t.getData().get("value",0);var y=new i.Rect({shape:{x:f-p/2,y:d-g/2,width:p,height:g},style:{text:l(m,s.get("formatter")),fill:s.get("backgroundColor"),textFill:c.getTextColor(),textFont:c.getFont()}});if(y.style.textFill==="auto"){y.setStyle("textFill",a((m-u)/(h-u)))}y.setStyle(s.getItemStyle(["color"]));this.group.add(y)}}});t.exports=h},function(t,e,r){t.exports=r(44).extend({type:"echartsGaugePointer",shape:{angle:0,width:10,r:10,x:0,y:0},buildPath:function(t,e){var r=Math.cos;var a=Math.sin;var i=e.r;var n=e.width;var o=e.angle;var s=e.x-r(o)*n*(n>=i/3?1:2);var l=e.y-a(o)*n*(n>=i/3?1:2);o=e.angle-Math.PI/2;t.moveTo(s,l);t.lineTo(e.x+r(o)*n,e.y+a(o)*n);t.lineTo(e.x+r(e.angle)*i,e.y+a(e.angle)*i);t.lineTo(e.x-r(o)*n,e.y-a(o)*n);t.lineTo(s,l);return}})},function(t,e,r){var a=r(3);var i=r(1);r(212);r(213);i.registerVisualCoding("chart",a.curry(r(137),"funnel"));i.registerLayout(r(214));i.registerProcessor("filter",a.curry(r(140),"funnel"))},function(t,e,r){"use strict";var a=r(94);var i=r(5);var n=r(96);var o=r(1).extendSeriesModel({type:"series.funnel",init:function(t){o.superApply(this,"init",arguments);this.legendDataProvider=function(){return this._dataBeforeProcessed};this._defaultLabelLine(t)},getInitialData:function(t,e){var r=n(["value"],t.data);var i=new a(r,this);i.initData(t.data);return i},_defaultLabelLine:function(t){i.defaultEmphasis(t.labelLine,["show"]);var e=t.labelLine.normal;var r=t.labelLine.emphasis;e.show=e.show&&t.label.normal.show;r.show=r.show&&t.label.emphasis.show},defaultOption:{zlevel:0,z:2,legendHoverLink:true,left:80,top:60,right:80,bottom:60,minSize:"0%",maxSize:"100%",sort:"descending",gap:0,funnelAlign:"center",label:{normal:{show:true,position:"outer"},emphasis:{show:true}},labelLine:{normal:{show:true,length:20,lineStyle:{width:1,type:"solid"}},emphasis:{}},itemStyle:{normal:{borderColor:"#fff",borderWidth:1},emphasis:{}}}});t.exports=o},function(t,e,r){var a=r(42);var i=r(3);function n(t,e){a.Group.call(this);var r=new a.Polygon;var i=new a.Polyline;var n=new a.Text;this.add(r);this.add(i);this.add(n);this.updateData(t,e,true);function o(){i.ignore=i.hoverIgnore;n.ignore=n.hoverIgnore}function s(){i.ignore=i.normalIgnore;n.ignore=n.normalIgnore}this.on("emphasis",o).on("normal",s).on("mouseover",o).on("mouseout",s)}var o=n.prototype;function s(t,e,r,a){var n=a.getModel("textStyle");var o=a.get("position");var s=o==="inside"||o==="inner"||o==="center";return{fill:n.getTextColor()||(s?"#fff":t.getItemVisual(e,"color")),textFont:n.getFont(),text:i.retrieve(t.hostModel.getFormattedLabel(e,r),t.getName(e))}}var l=["itemStyle","normal","opacity"];o.updateData=function(t,e,r){var n=this.childAt(0);var o=t.hostModel;var s=t.getItemModel(e);var u=t.getItemLayout(e);var h=t.getItemModel(e).get(l);h=h==null?1:h;if(r){n.setShape({points:u.points});n.setStyle({opacity:0});a.updateProps(n,{style:{opacity:h}},o)}else{a.initProps(n,{shape:{points:u.points}},o)}var c=s.getModel("itemStyle");var v=t.getItemVisual(e,"color");n.setStyle(i.defaults({fill:v},c.getModel("normal").getItemStyle()));n.hoverStyle=c.getModel("emphasis").getItemStyle();this._updateLabel(t,e);a.setHoverStyle(this)};o._updateLabel=function(t,e){var r=this.childAt(1);var i=this.childAt(2);var n=t.hostModel;var o=t.getItemModel(e);var l=t.getItemLayout(e);var u=l.label;var h=t.getItemVisual(e,"color");a.updateProps(r,{shape:{points:u.linePoints||u.linePoints}},n);a.updateProps(i,{style:{x:u.x,y:u.y}},n);i.attr({style:{textAlign:u.textAlign,textVerticalAlign:u.verticalAlign,textFont:u.font},rotation:u.rotation,origin:[u.x,u.y],z2:10});var c=o.getModel("label.normal");var v=o.getModel("label.emphasis");var f=o.getModel("labelLine.normal");var d=o.getModel("labelLine.emphasis");i.setStyle(s(t,e,"normal",c));i.ignore=i.normalIgnore=!c.get("show");i.hoverIgnore=!v.get("show");r.ignore=r.normalIgnore=!f.get("show");r.hoverIgnore=!d.get("show");r.setStyle({stroke:h});r.setStyle(f.getModel("lineStyle").getLineStyle());i.hoverStyle=s(t,e,"emphasis",v);r.hoverStyle=d.getModel("lineStyle").getLineStyle()};i.inherits(n,a.Group);var u=r(41).extend({type:"funnel",render:function(t,e,r){var a=t.getData();var i=this._data;var o=this.group;a.diff(i).add(function(t){var e=new n(a,t);a.setItemGraphicEl(t,e);o.add(e)}).update(function(t,e){var r=i.getItemGraphicEl(e);r.updateData(a,t);o.add(r);a.setItemGraphicEl(t,r)}).remove(function(t){var e=i.getItemGraphicEl(t);o.remove(e)}).execute();this._data=a},remove:function(){this.group.removeAll();this._data=null}});t.exports=u},function(t,e,r){var a=r(21);var i=r(7);var n=i.parsePercent;function o(t,e){return a.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()})}function s(t,e){var r=t.mapArray("value",function(t){return t});var a=[];var i=e==="ascending";for(var n=0,o=t.count();n<o;n++){a[n]=n}a.sort(function(t,e){return i?r[t]-r[e]:r[e]-r[t]});return a}function l(t){t.each(function(e){var r=t.getItemModel(e);var a=r.getModel("label.normal");var i=a.get("position");var n=r.getModel("labelLine.normal");var o=t.getItemLayout(e);var s=o.points;var l=i==="inner"||i==="inside"||i==="center";var u;var h;var c;var v;if(l){h=(s[0][0]+s[1][0]+s[2][0]+s[3][0])/4;c=(s[0][1]+s[1][1]+s[2][1]+s[3][1])/4;u="center";v=[[h,c],[h,c]]}else{var f;var d;var p;var g=n.get("length");if(i==="left"){f=(s[3][0]+s[0][0])/2;d=(s[3][1]+s[0][1])/2;p=f-g;h=p-5;u="right"}else{f=(s[1][0]+s[2][0])/2;d=(s[1][1]+s[2][1])/2;p=f+g;h=p+5;u="left"}var m=d;v=[[f,d],[p,m]];c=m}o.label={linePoints:v,x:h,y:c,verticalAlign:"middle",textAlign:u,inside:l}})}t.exports=function(t,e){t.eachSeriesByType("funnel",function(t){var r=t.getData();var a=t.get("sort");var u=o(t,e);var h=s(r,a);var c=[n(t.get("minSize"),u.width),n(t.get("maxSize"),u.width)];var v=r.getDataExtent("value");var f=t.get("min");var d=t.get("max");if(f==null){f=Math.min(v[0],0)}if(d==null){d=v[1]}var p=t.get("funnelAlign");var g=t.get("gap");var m=(u.height-g*(r.count()-1))/r.count();var y=u.y;var x=function(t,e){var a=r.get("value",t)||0;var n=i.linearMap(a,[f,d],c,true);var o;switch(p){case"left":o=u.x;break;case"center":o=u.x+(u.width-n)/2;break;case"right":o=u.x+u.width-n;break}return[[o,e],[o+n,e]]};if(a==="ascending"){m=-m;g=-g;y+=u.height;h=h.reverse()}for(var _=0;_<h.length;_++){var w=h[_];var b=h[_+1];var M=x(w,y);var S=x(b,y+m);y+=m+g;r.setItemLayout(w,{points:M.concat(S.slice().reverse())})}l(r)})}},function(t,e,r){var a=r(1);r(216);r(227);r(228);a.registerVisualCoding("chart",r(229))},function(t,e,r){r(217);r(220);r(222);var a=r(1);a.extendComponentView({type:"parallel"});a.registerPreprocessor(r(226))},function(t,e,r){var a=r(218);function i(t,e){var r=[];t.eachComponent("parallel",function(i,n){var o=new a(i,t,e);o.name="parallel_"+n;o.resize(i,e);i.coordinateSystem=o;o.model=i;r.push(o)});t.eachSeries(function(t){if(t.get("coordinateSystem")==="parallel"){var e=t.get("parallelIndex");t.coordinateSystem=r[e]}});return r}r(25).register("parallel",{create:i})},function(t,e,r){var a=r(21);var i=r(108);var n=r(3);var o=r(219);var s=r(17);var l=r(16);var u=n.each;var h=Math.PI;function c(t,e,r){this._axesMap={};this._axesLayout={};this.dimensions=t.dimensions;this._rect;this._model=t;this._init(t,e,r)}c.prototype={type:"parallel",constructor:c,_init:function(t,e,r){var a=t.dimensions;var n=t.parallelAxisIndex;u(a,function(t,r){var a=n[r];var s=e.getComponent("parallelAxis",a);var l=this._axesMap[t]=new o(t,i.createScaleByModel(s),[0,0],s.get("type"),a);var u=l.type==="category";l.onBand=u&&s.get("boundaryGap");l.inverse=s.get("inverse");s.axis=l;l.model=s},this)},update:function(t,e){this._updateAxesFromSeries(this._model,t)},_updateAxesFromSeries:function(t,e){e.eachSeries(function(r){if(!t.contains(r,e)){return}var a=r.getData();u(this.dimensions,function(t){var e=this._axesMap[t];e.scale.unionExtent(a.getDataExtent(t));i.niceScaleExtent(e,e.model)},this)},this)},resize:function(t,e){this._rect=a.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()});this._layoutAxes(t)},getRect:function(){return this._rect},_layoutAxes:function(t){var e=this._rect;var r=t.get("layout");var a=this._axesMap;var i=this.dimensions;var n=[e.width,e.height];var o=r==="horizontal"?0:1;var l=n[o];var c=n[1-o];var v=[0,c];u(a,function(t){var e=t.inverse?1:0;t.setExtent(v[e],v[1-e])});u(i,function(t,a){var n=l*a/(i.length-1);var o={horizontal:{x:n,y:c},vertical:{x:0,y:n}};var u={horizontal:h/2,vertical:0};var v=[o[r].x+e.x,o[r].y+e.y];var f=u[r];var d=s.create();s.rotate(d,d,f);s.translate(d,d,v);this._axesLayout[t]={position:v,rotation:f,transform:d,tickDirection:1,labelDirection:1}},this)},getAxis:function(t){return this._axesMap[t]},dataToPoint:function(t,e){return this.axisCoordToPoint(this._axesMap[e].dataToCoord(t),e)},eachActiveState:function(t,e,r){var a=this.dimensions;var i=this._axesMap;var n=false;for(var o=0,s=a.length;o<s;o++){if(i[a[o]].model.getActiveState()!=="normal"){n=true}}for(var l=0,u=t.count();l<u;l++){var h=t.getValues(a,l);var c;if(!n){c="normal"}else{c="active";for(var o=0,s=a.length;o<s;o++){var v=a[o];var f=i[v].model.getActiveState(h[o],o);if(f==="inactive"){c="inactive";break}}}e.call(r,c,l)}},axisCoordToPoint:function(t,e){var r=this._axesLayout[e];var a=[t,0];l.applyTransform(a,a,r.transform);return a},getAxisLayout:function(t){return n.clone(this._axesLayout[t])}};t.exports=c},function(t,e,r){var a=r(3);var i=r(117);var n=function(t,e,r,a,n){i.call(this,t,e,r);this.type=a||"value";this.axisIndex=n};n.prototype={constructor:n,model:null};a.inherits(n,i);t.exports=n},function(t,e,r){var a=r(3);var i=r(19);r(221);i.extend({type:"parallel",dependencies:["parallelAxis"],coordinateSystem:null,dimensions:null,parallelAxisIndex:null,defaultOption:{zlevel:0,z:0,left:80,top:60,right:80,bottom:60,layout:"horizontal",parallelAxisDefault:null},init:function(){i.prototype.init.apply(this,arguments);this.mergeOption({})},mergeOption:function(t){var e=this.option;t&&a.merge(e,t,true);this._initDimensions()},contains:function(t,e){var r=t.get("parallelIndex");return r!=null&&e.getComponent("parallel",r)===this},_initDimensions:function(){var t=this.dimensions=[];var e=this.parallelAxisIndex=[];var r=a.filter(this.dependentModels.parallelAxis,function(t){return t.get("parallelIndex")===this.componentIndex});a.each(r,function(r){t.push("dim"+r.get("dim"));e.push(r.componentIndex)})}})},function(t,e,r){var a=r(19);var i=r(3);var n=r(11);var o=r(121);var s=r(7);var l=a.extend({type:"baseParallelAxis",axis:null,activeIntervals:[],getAreaSelectStyle:function(){return n([["fill","color"],["lineWidth","borderWidth"],["stroke","borderColor"],["width","width"],["opacity","opacity"]]).call(this.getModel("areaSelectStyle"))},setActiveIntervals:function(t){var e=this.activeIntervals=i.clone(t);if(e){for(var r=e.length-1;r>=0;r--){s.asc(e[r])}}},getActiveState:function(t){var e=this.activeIntervals;if(!e.length){return"normal"}if(t==null){return"inactive"}for(var r=0,a=e.length;r<a;r++){if(e[r][0]<=t&&t<=e[r][1]){return"active"}}return"inactive"}});var u={type:"value",dim:null,parallelIndex:null,areaSelectStyle:{width:20,borderWidth:1,borderColor:"rgba(160,197,232)",color:"rgba(160,197,232)",opacity:.3},z:10};i.merge(l.prototype,r(123));function h(t,e){return e.type||(e.data?"category":"value")}o("parallel",l,h,u);t.exports=l},function(t,e,r){r(217);r(223);r(224)},function(t,e,r){var a=r(1);var i={type:"axisAreaSelect",event:"axisAreaSelected",update:"updateVisual"};a.registerAction(i,function(t,e){e.eachComponent({mainType:"parallelAxis",query:t},function(e){e.axis.model.setActiveIntervals(t.intervals)})})},function(t,e,r){var a=r(3);var i=r(126);var n=r(225);var o=["axisLine","axisLabel","axisTick","axisName"];var s=r(1).extendComponentView({type:"parallelAxis",_selectController:null,render:function(t,e,r,n){if(l(t,e,n)){return}this.axisModel=t;this.api=r;this.group.removeAll();if(!t.get("show")){return}var s=e.getComponent("parallel",t.get("parallelIndex")).coordinateSystem;var u=t.getAreaSelectStyle();var h=u.width;var c=s.getAxisLayout(t.axis.dim);var v=a.extend({strokeContainThreshold:h,silent:!(h>0)},c);var f=new i(t,v);a.each(o,f.add,f);var d=f.getGroup();this.group.add(d);this._buildSelectController(d,u,t,r)},_buildSelectController:function(t,e,r,i){var o=r.axis;var s=this._selectController;if(!s){s=this._selectController=new n("line",i.getZr(),e);s.on("selected",a.bind(this._onSelected,this))}s.enable(t);var l=a.map(r.activeIntervals,function(t){return[o.dataToCoord(t[0],true),o.dataToCoord(t[1],true)]});s.update(l)},_onSelected:function(t){var e=this.axisModel;var r=e.axis;var i=a.map(t,function(t){return[r.coordToData(t[0],true),r.coordToData(t[1],true)]});this.api.dispatchAction({type:"axisAreaSelect",parallelAxisId:e.id,intervals:i})},remove:function(){this._selectController&&this._selectController.disable()},dispose:function(){if(this._selectController){this._selectController.dispose();this._selectController=null}}});function l(t,e,r){return r&&r.type==="axisAreaSelect"&&e.findComponents({mainType:"parallelAxis",query:r})[0]===t}t.exports=s},function(t,e,r){var a=r(32);var i=r(3);var n=r(42);var o=i.bind;var s=i.each;var l=Math.min;var u=Math.max;var h=Math.pow;var c=1e4;var v=2;var f=["mousedown","mousemove","mouseup"];function d(t,e,r){a.call(this);this.type=t;this.zr=e;this.opt=i.clone(r);this.group=new n.Group;this._containerRect=null;this._track=[];this._dragging;this._cover;this._disabled=true;this._handlers={mousedown:o(y,this),mousemove:o(x,this),mouseup:o(_,this)};s(f,function(t){this.zr.on(t,this._handlers[t])},this)}d.prototype={constructor:d,enable:function(t,e){this._disabled=false;S.call(this);this._containerRect=e!==false?e||t.getBoundingRect():null;t.add(this.group)},update:function(t){M.call(this,t&&i.clone(t))},disable:function(){this._disabled=true;S.call(this)},dispose:function(){this.disable();s(f,function(t){this.zr.off(t,this._handlers[t])},this)}};i.mixin(d,a);function p(t){t.traverse(function(t){t.z=c})}function g(t,e){var r=this.group.transformCoordToLocal(t,e);return!this._containerRect||this._containerRect.contain(r[0],r[1])}function m(t){var e=t.event;e.preventDefault&&e.preventDefault()}function y(t){if(this._disabled||t.target&&t.target.draggable){return}m(t);var e=t.offsetX;var r=t.offsetY;if(g.call(this,e,r)){
this._dragging=true;this._track=[[e,r]]}}function x(t){if(!this._dragging||this._disabled){return}m(t);w.call(this,t)}function _(t){if(!this._dragging||this._disabled){return}m(t);w.call(this,t,true);this._dragging=false;this._track=[]}function w(t,e){var r=t.offsetX;var a=t.offsetY;if(g.call(this,r,a)){this._track.push([r,a]);var n=b.call(this)?C[this.type].getRanges.call(this):[];M.call(this,n);this.trigger("selected",i.clone(n));if(e){this.trigger("selectEnd",i.clone(n))}}}function b(){var t=this._track;if(!t.length){return false}var e=t[t.length-1];var r=t[0];var a=e[0]-r[0];var i=e[1]-r[1];var n=h(a*a+i*i,.5);return n>v}function M(t){var e=C[this.type];if(t&&t.length){if(!this._cover){this._cover=e.create.call(this);this.group.add(this._cover)}e.update.call(this,t)}else{this.group.remove(this._cover);this._cover=null}p(this.group)}function S(){var t=this.group;var e=t.parent;if(e){e.remove(t)}}function I(){var t=this.opt;return new n.Rect({style:{stroke:t.stroke,fill:t.fill,lineWidth:t.lineWidth,opacity:t.opacity}})}function A(){return i.map(this._track,function(t){return this.group.transformCoordToLocal(t[0],t[1])},this)}function T(){var t=A.call(this);var e=t.length-1;e<0&&(e=0);return[t[0],t[e]]}var C={line:{create:I,getRanges:function(){var t=T.call(this);var e=l(t[0][0],t[1][0]);var r=u(t[0][0],t[1][0]);return[[e,r]]},update:function(t){var e=t[0];var r=this.opt.width;this._cover.setShape({x:e[0],y:-r/2,width:e[1]-e[0],height:r})}},rect:{create:I,getRanges:function(){var t=T.call(this);var e=[l(t[1][0],t[0][0]),l(t[1][1],t[0][1])];var r=[u(t[1][0],t[0][0]),u(t[1][1],t[0][1])];return[[[e[0],r[0]],[e[1],r[1]]]]},update:function(t){var e=t[0];this._cover.setShape({x:e[0][0],y:e[1][0],width:e[0][1]-e[0][0],height:e[1][1]-e[1][0]})}}};t.exports=d},function(t,e,r){var a=r(3);var i=r(5);t.exports=function(t){n(t);o(t)};function n(t){if(t.parallel){return}var e=false;a.each(t.series,function(t){if(t&&t.type==="parallel"){e=true}});if(e){t.parallel=[{}]}}function o(t){var e=i.normalizeToArray(t.parallelAxis);a.each(e,function(e){if(!a.isObject(e)){return}var r=e.parallelIndex||0;var n=i.normalizeToArray(t.parallel)[r];if(n&&n.parallelAxisDefault){a.merge(e,n.parallelAxisDefault,false)}})}},function(t,e,r){var a=r(94);var i=r(3);var n=r(27);t.exports=n.extend({type:"series.parallel",dependencies:["parallel"],getInitialData:function(t,e){var r=e.getComponent("parallel",this.get("parallelIndex"));var n=r.dimensions;var s=r.parallelAxisIndex;var l=t.data;var u=i.map(n,function(t,r){var a=e.getComponent("parallelAxis",s[r]);if(a.get("type")==="category"){o(a,t,l);return{name:t,type:"ordinal"}}else{return t}});var h=new a(u,this);h.initData(l);return h},getRawIndicesByActiveState:function(t){var e=this.coordinateSystem;var r=this.getData();var a=[];e.eachActiveState(r,function(e,i){if(t===e){a.push(r.getRawIndex(i))}});return a},defaultOption:{zlevel:0,z:2,coordinateSystem:"parallel",parallelIndex:0,label:{normal:{show:false},emphasis:{show:false}},inactiveOpacity:.05,activeOpacity:1,lineStyle:{normal:{width:2,opacity:.45,type:"solid"}},animationEasing:"linear"}});function o(t,e,r){var a=t.get("data");var n=+e.replace("dim","");if(a&&a.length){i.each(r,function(t){if(!t){return}var e=i.indexOf(a,t[n]);t[n]=e>=0?e:NaN})}}},function(t,e,r){var a=r(42);var i=r(3);var n=r(41).extend({type:"parallel",init:function(){this._dataGroup=new a.Group;this.group.add(this._dataGroup);this._data},render:function(t,e,r,n){var u=this._dataGroup;var h=t.getData();var c=this._data;var v=t.coordinateSystem;var f=v.dimensions;h.diff(c).add(d).update(p).remove(g).execute();h.eachItemGraphicEl(function(t,e){var r=h.getItemModel(e);var a=r.getModel("lineStyle.normal");t.eachChild(function(t){t.setStyle(i.extend(a.getLineStyle(),{stroke:h.getItemVisual(e,"color"),opacity:h.getItemVisual(e,"opacity")}))})});if(!this._data){u.setClipPath(o(v,t,function(){u.removeClipPath()}))}this._data=h;function d(t){var e=h.getValues(f,t);var r=new a.Group;u.add(r);s(e,f,v,function(t,e){if(t){r.add(l(t))}});h.setItemGraphicEl(t,r)}function p(e,r){var i=h.getValues(f,e);var n=c.getItemGraphicEl(r);var o=[];var u=0;s(i,f,v,function(e,r){var i=n.childAt(u++);if(e&&!i){o.push(l(e))}else if(e){a.updateProps(i,{shape:{points:e}},t)}});for(var d=n.childCount()-1;d>=u;d--){n.remove(n.childAt(d))}for(var d=0,p=o.length;d<p;d++){n.add(o[d])}h.setItemGraphicEl(e,n)}function g(t){var e=c.getItemGraphicEl(t);u.remove(e)}},remove:function(){this._dataGroup&&this._dataGroup.removeAll();this._data=null}});function o(t,e,r){var i=t.model;var n=t.getRect();var o=new a.Rect({shape:{x:n.x,y:n.y,width:n.width,height:n.height}});var s=i.get("layout")==="horizontal"?"width":"height";o.setShape(s,0);a.initProps(o,{shape:{width:n.width,height:n.height}},e,r);return o}function s(t,e,r,a){for(var i=0,n=e.length-1;i<n;i++){var o=e[i];var s=e[i+1];var l=t[i];var h=t[i+1];a(u(l,r.getAxis(o).type)||u(h,r.getAxis(s).type)?null:[r.dataToPoint(l,o),r.dataToPoint(h,s)],i)}}function l(t){return new a.Polyline({shape:{points:t},silent:true})}function u(t,e){return e==="category"?t==null:t==null||isNaN(t)}t.exports=n},function(t,e){t.exports=function(t,e){t.eachSeriesByType("parallel",function(e){var r=e.getModel("itemStyle.normal");var a=t.get("color");var i=r.get("color")||a[e.seriesIndex%a.length];var n=e.get("inactiveOpacity");var o=e.get("activeOpacity");var s=e.getModel("lineStyle.normal").getLineStyle();var l=e.coordinateSystem;var u=e.getData();var h={normal:s.opacity,active:o,inactive:n};l.eachActiveState(u,function(t,e){u.setItemVisual(e,"opacity",h[t])});u.setVisual("color",i)})}},function(t,e,r){var a=r(1);r(231);r(232);a.registerLayout(r(233));a.registerVisualCoding("chart",r(235))},function(t,e,r){"use strict";var a=r(27);var i=r(191);t.exports=a.extend({type:"series.sankey",layoutInfo:null,getInitialData:function(t,e){var r=t.edges||t.links;var a=t.data||t.nodes;if(a&&r){var n=i(a,r,this,true);return n.data}},getGraph:function(){return this.getData().graph},getEdgeData:function(){return this.getGraph().edgeData},defaultOption:{zlevel:0,z:2,coordinateSystem:"view",layout:null,left:"5%",top:"5%",right:"20%",bottom:"5%",nodeWidth:20,nodeGap:8,layoutIterations:32,label:{normal:{show:true,position:"right",textStyle:{color:"#000",fontSize:12}},emphasis:{show:true}},itemStyle:{normal:{borderWidth:1,borderColor:"#aaa"}},lineStyle:{normal:{color:"#314656",opacity:.2,curveness:.5},emphasis:{opacity:.6}},color:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],animationEasing:"linear",animationDuration:1e3}})},function(t,e,r){var a=r(42);var i=r(5);var n=r(3);var o=a.extendShape({shape:{x1:0,y1:0,x2:0,y2:0,cpx1:0,cpy1:0,cpx2:0,cpy2:0,extent:0},buildPath:function(t,e){var r=e.extent/2;t.moveTo(e.x1,e.y1-r);t.bezierCurveTo(e.cpx1,e.cpy1-r,e.cpx2,e.cpy2-r,e.x2,e.y2-r);t.lineTo(e.x2,e.y2+r);t.bezierCurveTo(e.cpx2,e.cpy2+r,e.cpx1,e.cpy1+r,e.x1,e.y1+r);t.closePath()}});t.exports=r(1).extendChartView({type:"sankey",_model:null,render:function(t,e,r){var l=t.getGraph();var u=this.group;var h=t.layoutInfo;this._model=t;u.removeAll();u.position=[h.x,h.y];var c=l.edgeData;var v=t.option;var f=i.createDataFormatModel(t,c,v.edges||v.links);f.formatTooltip=function(t){var e=this.getDataParams(t);var r=e.data;var a=r.source+" -- "+r.target;if(e.value){a+=":"+e.value}return a};l.eachNode(function(e){var r=e.getLayout();var i=e.getModel();var o=i.getModel("label.normal");var s=o.getModel("textStyle");var l=i.getModel("label.emphasis");var h=l.getModel("textStyle");var c=new a.Rect({shape:{x:r.x,y:r.y,width:e.getLayout().dx,height:e.getLayout().dy},style:{text:o.get("show")?t.getFormattedLabel(e.dataIndex,"normal")||e.id:"",textFont:s.getFont(),textFill:s.getTextColor(),textPosition:o.get("position")}});c.setStyle(n.defaults({fill:e.getVisual("color")},i.getModel("itemStyle.normal").getItemStyle()));a.setHoverStyle(c,n.extend(e.getModel("itemStyle.emphasis"),{text:l.get("show")?t.getFormattedLabel(e.dataIndex,"emphasis")||e.id:"",textFont:h.getFont(),textFill:h.getTextColor(),textPosition:l.get("position")}));u.add(c)});l.eachEdge(function(t){var e=new o;e.dataIndex=t.dataIndex;e.dataModel=f;var r=t.getModel("lineStyle.normal");var i=r.get("curveness");var n=t.node1.getLayout();var s=t.node2.getLayout();var l=t.getLayout();e.shape.extent=Math.max(1,l.dy);var h=n.x+n.dx;var c=n.y+l.sy+l.dy/2;var v=s.x;var d=s.y+l.ty+l.dy/2;var p=h*(1-i)+v*i;var g=c;var m=h*i+v*(1-i);var y=d;e.setShape({x1:h,y1:c,x2:v,y2:d,cpx1:p,cpy1:g,cpx2:m,cpy2:y});e.setStyle(r.getItemStyle());a.setHoverStyle(e,t.getModel("lineStyle.emphasis").getItemStyle());u.add(e)});if(!this._data){u.setClipPath(s(u.getBoundingRect(),t,function(){u.removeClipPath()}))}this._data=t.getData()}});function s(t,e,r){var i=new a.Rect({shape:{x:t.x-10,y:t.y-10,width:0,height:t.height+20}});a.initProps(i,{shape:{width:t.width+20,height:t.height+20}},e,r);return i}},function(t,e,r){var a=r(21);var i=r(234);var n=r(3);t.exports=function(t,e){t.eachSeriesByType("sankey",function(t){var r=t.get("nodeWidth");var a=t.get("nodeGap");var i=o(t,e);t.layoutInfo=i;var n=i.width;var u=i.height;var h=t.getGraph();var c=h.nodes;var v=h.edges;l(c);var f=c.filter(function(t){return t.getLayout().value===0});var d=f.length!==0?0:t.get("layoutIterations");s(c,v,r,a,n,u,d)})};function o(t,e){return a.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()})}function s(t,e,r,a,i,n,o){u(t,r,i);v(t,e,n,a,o);x(t)}function l(t){n.each(t,function(t){var e=b(t.outEdges,A);var r=b(t.inEdges,A);var a=Math.max(e,r);t.setLayout({value:a},true)})}function u(t,e,r){var a=t;var i=null;var n=0;var o=0;while(a.length){i=[];for(var s=0,l=a.length;s<l;s++){var u=a[s];u.setLayout({x:n},true);u.setLayout({dx:e},true);for(var v=0,f=u.outEdges.length;v<f;v++){i.push(u.outEdges[v].node2)}}a=i;++n}h(t,n);o=(r-e)/(n-1);c(t,o)}function h(t,e){n.each(t,function(t){if(!t.outEdges.length){t.setLayout({x:e-1},true)}})}function c(t,e){n.each(t,function(t){var r=t.getLayout().x*e;t.setLayout({x:r},true)})}function v(t,e,r,a,n){var o=i().key(function(t){return t.getLayout().x}).sortKeys(I).entries(t).map(function(t){return t.values});f(t,o,e,r,a);d(o,a,r);for(var s=1;n>0;n--){s*=.99;p(o,s);d(o,a,r);m(o,s);d(o,a,r)}}function f(t,e,r,a,i){var o=[];n.each(e,function(t){var e=t.length;var r=0;n.each(t,function(t){r+=t.getLayout().value});var s=(a-(e-1)*i)/r;o.push(s)});o.sort(function(t,e){return t-e});var s=o[0];n.each(e,function(t){n.each(t,function(t,e){t.setLayout({y:e},true);var r=t.getLayout().value*s;t.setLayout({dy:r},true)})});n.each(r,function(t){var e=+t.getValue()*s;t.setLayout({dy:e},true)})}function d(t,e,r){n.each(t,function(t){var a;var i;var n=0;var o=t.length;var s;t.sort(S);for(s=0;s<o;s++){a=t[s];i=n-a.getLayout().y;if(i>0){var l=a.getLayout().y+i;a.setLayout({y:l},true)}n=a.getLayout().y+a.getLayout().dy+e}i=n-e-r;if(i>0){var l=a.getLayout().y-i;a.setLayout({y:l},true);n=a.getLayout().y;for(s=o-2;s>=0;--s){a=t[s];i=a.getLayout().y+a.getLayout().dy+e-n;if(i>0){l=a.getLayout().y-i;a.setLayout({y:l},true)}n=a.getLayout().y}}})}function p(t,e){n.each(t.slice().reverse(),function(t){n.each(t,function(t){if(t.outEdges.length){var r=b(t.outEdges,g)/b(t.outEdges,A);var a=t.getLayout().y+(r-M(t))*e;t.setLayout({y:a},true)}})})}function g(t){return M(t.node2)*t.getValue()}function m(t,e){n.each(t,function(t){n.each(t,function(t){if(t.inEdges.length){var r=b(t.inEdges,y)/b(t.inEdges,A);var a=t.getLayout().y+(r-M(t))*e;t.setLayout({y:a},true)}})})}function y(t){return M(t.node1)*t.getValue()}function x(t){n.each(t,function(t){t.outEdges.sort(_);t.inEdges.sort(w)});n.each(t,function(t){var e=0;var r=0;n.each(t.outEdges,function(t){t.setLayout({sy:e},true);e+=t.getLayout().dy});n.each(t.inEdges,function(t){t.setLayout({ty:r},true);r+=t.getLayout().dy})})}function _(t,e){return t.node2.getLayout().y-e.node2.getLayout().y}function w(t,e){return t.node1.getLayout().y-e.node1.getLayout().y}function b(t,e){var r=0;var a=t.length;var i;var n=-1;if(arguments.length===1){while(++n<a){i=+t[n];if(!isNaN(i)){r+=i}}}else{while(++n<a){i=+e.call(t,t[n],n);if(!isNaN(i)){r+=i}}}return r}function M(t){return t.getLayout().y+t.getLayout().dy/2}function S(t,e){return t.getLayout().y-e.getLayout().y}function I(t,e){return t<e?-1:t>e?1:t==e?0:NaN}function A(t){return t.getValue()}},function(t,e,r){var a=r(3);function i(){var t=[];var e=[];function r(e,i){if(i>=t.length){return e}var n=-1;var o=e.length;var s=t[i++];var l={};var u={};while(++n<o){var h=s(e[n]);var c=u[h];if(c){c.push(e[n])}else{u[h]=[e[n]]}}a.each(u,function(t,e){l[e]=r(t,i)});return l}function i(r,n){if(n>=t.length){return r}var o=[];var s=e[n++];a.each(r,function(t,e){o.push({key:e,values:i(t,n)})});if(s){return o.sort(function(t,e){return s(t.key,e.key)})}else{return o}}return{key:function(e){t.push(e);return this},sortKeys:function(r){e[t.length-1]=r;return this},entries:function(t){return i(r(t,0),0)}}}t.exports=i},function(t,e,r){var a=r(187);t.exports=function(t,e){t.eachSeriesByType("sankey",function(t){var e=t.getGraph();var r=e.nodes;r.sort(function(t,e){return t.getLayout().value-e.getLayout().value});var i=r[0].getLayout().value;var n=r[r.length-1].getLayout().value;r.forEach(function(e){var r=new a({type:"color",mappingMethod:"linear",dataExtent:[i,n],visual:t.get("color")});var o=r.mapValueToVisual(e.getLayout().value);e.setVisual("color",o)})})}},function(t,e,r){var a=r(1);r(237);r(240);a.registerVisualCoding("chart",r(241));a.registerLayout(r(242))},function(t,e,r){"use strict";var a=r(3);var i=r(27);var n=r(238);var o=i.extend({type:"series.boxplot",dependencies:["xAxis","yAxis","grid"],valueDimensions:["min","Q1","median","Q3","max"],dimensions:null,defaultOption:{zlevel:0,z:2,coordinateSystem:"cartesian2d",legendHoverLink:true,hoverAnimation:true,xAxisIndex:0,yAxisIndex:0,layout:null,boxWidth:[7,50],itemStyle:{normal:{color:"#fff",borderWidth:1},emphasis:{borderWidth:2,shadowBlur:5,shadowOffsetX:2,shadowOffsetY:2,shadowColor:"rgba(0,0,0,0.4)"}},animationEasing:"elasticOut",animationDuration:800}});a.mixin(o,n.seriesModelMixin,true);t.exports=o},function(t,e,r){"use strict";var a=r(94);var i=r(96);var n=r(239);var o=r(3);function s(t){return t.value==null?t:t.value}var l={_baseAxisDim:null,getInitialData:function(t,e){var r;var n=e.getComponent("xAxis",this.get("xAxisIndex"));var o=e.getComponent("yAxis",this.get("yAxisIndex"));var l=n.get("type");var u=o.get("type");var h;if(l==="category"){t.layout="horizontal";r=n.getCategories();h=true}else if(u==="category"){t.layout="vertical";r=o.getCategories();h=true}else{t.layout=t.layout||"horizontal"}this._baseAxisDim=t.layout==="horizontal"?"x":"y";var c=t.data;var v=this.dimensions=["base"].concat(this.valueDimensions);i(v,c);var f=new a(v,this);f.initData(c,r?r.slice():null,function(t,e,r,a){var i=s(t);return h?e==="base"?r:i[a-1]:i[a]});return f},coordDimToDataDim:function(t){var e=this.valueDimensions.slice();var r=["base"];var a={horizontal:{x:r,y:e},vertical:{x:e,y:r}};return a[this.get("layout")][t]},dataDimToCoordDim:function(t){var e;o.each(["x","y"],function(r,a){var i=this.coordDimToDataDim(r);if(o.indexOf(i,t)>=0){e=r}},this);return e},getBaseAxis:function(){var t=this._baseAxisDim;return this.ecModel.getComponent(t+"Axis",this.get(t+"AxisIndex")).axis}};var u={init:function(){var t=this._whiskerBoxDraw=new n(this.getStyleUpdater());this.group.add(t.group)},render:function(t,e,r){this._whiskerBoxDraw.updateData(t.getData())},remove:function(t){this._whiskerBoxDraw.remove()}};t.exports={seriesModelMixin:l,viewMixin:u}},function(t,e,r){var a=r(3);var i=r(42);var n=r(44);var o=n.extend({type:"whiskerInBox",shape:{},buildPath:function(t,e){for(var r in e){if(r.indexOf("ends")===0){var a=e[r];t.moveTo(a[0][0],a[0][1]);t.lineTo(a[1][0],a[1][1])}}}});function s(t,e,r,a){i.Group.call(this);this.bodyIndex;this.whiskerIndex;this.styleUpdater=r;this._createContent(t,e,a);this.updateData(t,e,a);this._seriesModel}var l=s.prototype;l._createContent=function(t,e,r){var n=t.getItemLayout(e);var s=n.chartLayout==="horizontal"?1:0;var l=0;this.add(new i.Polygon({shape:{points:r?u(n.bodyEnds,s,n):n.bodyEnds},style:{strokeNoScale:true},z2:100}));this.bodyIndex=l++;var c=a.map(n.whiskerEnds,function(t){return r?u(t,s,n):t});this.add(new o({shape:h(c),style:{strokeNoScale:true},z2:100}));this.whiskerIndex=l++};function u(t,e,r){return a.map(t,function(t){t=t.slice();t[e]=r.initBaseline;return t})}function h(t){var e={};a.each(t,function(t,r){e["ends"+r]=t});return e}l.updateData=function(t,e,r){var a=this._seriesModel=t.hostModel;var n=t.getItemLayout(e);var o=i[r?"initProps":"updateProps"];o(this.childAt(this.bodyIndex),{shape:{points:n.bodyEnds}},a);o(this.childAt(this.whiskerIndex),{shape:h(n.whiskerEnds)},a);this.styleUpdater.call(null,this,t,e)};a.inherits(s,i.Group);function c(t){this.group=new i.Group;this.styleUpdater=t}var v=c.prototype;v.updateData=function(t){var e=this.group;var r=this._data;var a=this.styleUpdater;t.diff(r).add(function(r){if(t.hasValue(r)){var i=new s(t,r,a,true);t.setItemGraphicEl(r,i);e.add(i)}}).update(function(i,n){var o=r.getItemGraphicEl(n);if(!t.hasValue(i)){e.remove(o);return}if(!o){o=new s(t,i,a)}else{o.updateData(t,i)}e.add(o);t.setItemGraphicEl(i,o)}).remove(function(t){var a=r.getItemGraphicEl(t);a&&e.remove(a)}).execute();this._data=t};v.remove=function(){var t=this.group;var e=this._data;this._data=null;e&&e.eachItemGraphicEl(function(e){e&&t.remove(e)})};t.exports=c},function(t,e,r){"use strict";var a=r(3);var i=r(41);var n=r(42);var o=r(238);var s=i.extend({type:"boxplot",getStyleUpdater:function(){return h}});a.mixin(s,o.viewMixin,true);var l=["itemStyle","normal"];var u=["itemStyle","emphasis"];function h(t,e,r){var a=e.getItemModel(r);var i=a.getModel(l);var o=e.getItemVisual(r,"color");var s=i.getItemStyle(["borderColor"]);var h=t.childAt(t.whiskerIndex);h.style.set(s);h.style.stroke=o;h.dirty();var c=t.childAt(t.bodyIndex);c.style.set(s);c.style.stroke=o;c.dirty();var v=a.getModel(u).getItemStyle();n.setHoverStyle(t,v)}t.exports=s},function(t,e){var r=["itemStyle","normal","borderColor"];t.exports=function(t,e){var a=t.get("color");t.eachRawSeriesByType("boxplot",function(e){var i=a[e.seriesIndex%a.length];var n=e.getData();n.setVisual({legendSymbol:"roundRect",color:e.get(r)||i});if(!t.isSeriesFiltered(e)){n.each(function(t){var e=n.getItemModel(t);n.setItemVisual(t,{color:e.get(r,true)})})}})}},function(t,e,r){var a=r(3);var i=r(7);var n=i.parsePercent;var o=a.each;t.exports=function(t,e){var r=s(t);o(r,function(t){var e=t.seriesModels;if(!e.length){return}l(t);o(e,function(e,r){u(e,t.boxOffsetList[r],t.boxWidthList[r])})})};function s(t){var e=[];var r=[];t.eachSeriesByType("boxplot",function(t){var i=t.getBaseAxis();var n=a.indexOf(r,i);if(n<0){n=r.length;r[n]=i;e[n]={axis:i,seriesModels:[]}}e[n].seriesModels.push(t)});return e}function l(t){var e;var r=t.axis;var i=t.seriesModels;var s=i.length;var l=t.boxWidthList=[];var u=t.boxOffsetList=[];var h=[];var c;if(r.type==="category"){c=r.getBandWidth()}else{var v=0;o(i,function(t){v=Math.max(v,t.getData().count())});e=r.getExtent(),Math.abs(e[1]-e[0])/v}o(i,function(t){var e=t.get("boxWidth");if(!a.isArray(e)){e=[e,e]}h.push([n(e[0],c)||0,n(e[1],c)||0])});var f=c*.8-2;var d=f/s*.3;var p=(f-d*(s-1))/s;var g=p/2-f/2;o(i,function(t,e){u.push(g);g+=d+p;l.push(Math.min(Math.max(p,h[e][0]),h[e][1]))})}function u(t,e,r){var a=t.coordinateSystem;var i=t.getData();var n=t.dimensions;var o=t.get("layout");var s=r/2;i.each(n,function(){var t=arguments;var r=n.length;var l=t[0];var u=t[r];var h=o==="horizontal"?0:1;var c=1-h;var v=m(t[3]);var f=m(t[1]);var d=m(t[5]);var p=[[f,m(t[2])],[d,m(t[4])]];x(f);x(d);x(v);var g=[];y(p[0][1],0);y(p[1][1],1);i.setItemLayout(u,{chartLayout:o,initBaseline:v[c],median:v,bodyEnds:g,whiskerEnds:p});function m(t){var r=[];r[h]=l;r[c]=t;var i;if(isNaN(l)||isNaN(t)){i=[NaN,NaN]}else{i=a.dataToPoint(r);i[h]+=e}return i}function y(t,e){var r=t.slice();var a=t.slice();r[h]+=s;a[h]-=s;e?g.push(r,a):g.push(a,r)}function x(t){var e=[t.slice(),t.slice()];e[0][h]-=s;e[1][h]+=s;p.push(e)}})}},function(t,e,r){var a=r(1);r(244);r(245);a.registerPreprocessor(r(246));a.registerVisualCoding("chart",r(247));a.registerLayout(r(248))},function(t,e,r){"use strict";var a=r(3);var i=r(27);var n=r(238);var o=r(6);var s=o.encodeHTML;var l=o.addCommas;var u=i.extend({type:"series.candlestick",dependencies:["xAxis","yAxis","grid"],valueDimensions:["open","close","lowest","highest"],dimensions:null,defaultOption:{zlevel:0,z:2,coordinateSystem:"cartesian2d",legendHoverLink:true,hoverAnimation:true,xAxisIndex:0,yAxisIndex:0,layout:null,itemStyle:{normal:{color:"#c23531",color0:"#314656",borderWidth:1,borderColor:"#c23531",borderColor0:"#314656"},emphasis:{borderWidth:2}},animationUpdate:false,animationEasing:"linear",animationDuration:300},getShadowDim:function(){return"open"},formatTooltip:function(t,e){var r=a.map(this.valueDimensions,function(e){return e+": "+l(this._data.get(e,t))},this);return s(this.name)+"<br />"+r.join("<br />")}});a.mixin(u,n.seriesModelMixin,true);t.exports=u},function(t,e,r){"use strict";var a=r(3);var i=r(41);var n=r(42);var o=r(238);var s=i.extend({type:"candlestick",getStyleUpdater:function(){return h}});a.mixin(s,o.viewMixin,true);var l=["itemStyle","normal"];var u=["itemStyle","emphasis"];function h(t,e,r){var a=e.getItemModel(r);var i=a.getModel(l);var o=e.getItemVisual(r,"color");var s=e.getItemVisual(r,"borderColor");var h=i.getItemStyle(["color","color0","borderColor","borderColor0"]);var c=t.childAt(t.whiskerIndex);c.style.set(h);c.style.stroke=s;c.dirty();var v=t.childAt(t.bodyIndex);v.style.set(h);v.style.fill=o;v.style.stroke=s;v.dirty();var f=a.getModel(u).getItemStyle();n.setHoverStyle(t,f)}t.exports=s},function(t,e,r){var a=r(3);t.exports=function(t){if(!t||!a.isArray(t.series)){return}a.each(t.series,function(t){if(a.isObject(t)&&t.type==="k"){t.type="candlestick"}})}},function(t,e){var r=["itemStyle","normal","borderColor"];var a=["itemStyle","normal","borderColor0"];var i=["itemStyle","normal","color"];var n=["itemStyle","normal","color0"];t.exports=function(t,e){t.eachRawSeriesByType("candlestick",function(e){var o=e.getData();o.setVisual({legendSymbol:"roundRect"});if(!t.isSeriesFiltered(e)){o.each(function(t){var e=o.getItemModel(t);var s=o.getItemLayout(t).sign;o.setItemVisual(t,{color:e.get(s>0?i:n),borderColor:e.get(s>0?r:a)})})}})}},function(t,e){var r=2;var a=5;var i=4;t.exports=function(t,e){t.eachSeriesByType("candlestick",function(t){var e=t.coordinateSystem;var r=t.getData();var a=t.dimensions;var i=t.get("layout");var o=n(t,r);r.each(a,function(){var t=arguments;var n=a.length;var s=t[0];var l=t[n];var u=i==="horizontal"?0:1;var h=1-u;var c=t[1];var v=t[2];var f=t[3];var d=t[4];var p=Math.min(c,v);var g=Math.max(c,v);var m=M(p);var y=M(g);var x=M(f);var _=M(d);var w=[[_,y],[x,m]];var b=[];S(y,0);S(m,1);r.setItemLayout(l,{chartLayout:i,sign:c>v?-1:c<v?1:0,initBaseline:c>v?y[h]:m[h],bodyEnds:b,whiskerEnds:w});function M(t){var r=[];r[u]=s;r[h]=t;return isNaN(s)||isNaN(t)?[NaN,NaN]:e.dataToPoint(r)}function S(t,e){var r=t.slice();var a=t.slice();r[u]+=o/2;a[u]-=o/2;e?b.push(r,a):b.push(a,r)}},true)})};function n(t,e){var n=t.getBaseAxis();var o;var s=n.type==="category"?n.getBandWidth():(o=n.getExtent(),Math.abs(o[1]-o[0])/e.count());return s/2-2>a?s/2-2:s-a>i?a:Math.max(s-i,r)}},function(t,e,r){var a=r(3);var i=r(1);r(250);r(251);i.registerVisualCoding("chart",a.curry(r(103),"effectScatter","circle",null));i.registerLayout(a.curry(r(104),"effectScatter"))},function(t,e,r){"use strict";var a=r(93);var i=r(27);t.exports=i.extend({type:"series.effectScatter",dependencies:["grid","polar"],getInitialData:function(t,e){var r=a(t.data,this,e);return r},defaultOption:{coordinateSystem:"cartesian2d",zlevel:0,z:2,legendHoverLink:true,effectType:"ripple",showEffectOn:"render",rippleEffect:{period:4,scale:2.5,brushType:"fill"},xAxisIndex:0,yAxisIndex:0,polarIndex:0,geoIndex:0,symbolSize:10}})},function(t,e,r){var a=r(98);var i=r(252);r(1).extendChartView({type:"effectScatter",init:function(){this._symbolDraw=new a(i)},render:function(t,e,r){var a=t.getData();var i=this._symbolDraw;i.updateData(a);this.group.add(i.group)},updateLayout:function(){this._symbolDraw.updateLayout()},remove:function(t,e){this._symbolDraw&&this._symbolDraw.remove(e)}})},function(t,e,r){var a=r(3);var i=r(100);var n=r(42);var o=r(7);var s=r(99);var l=n.Group;var u=3;function h(t){if(!a.isArray(t)){t=[+t,+t]}return t}function c(t,e){l.call(this);var r=new s(t,e);var a=new l;this.add(r);this.add(a);a.beforeUpdate=function(){this.attr(r.getScale())};this.updateData(t,e)}var v=c.prototype;v.stopEffectAnimation=function(){this.childAt(1).removeAll()};v.startEffectAnimation=function(t,e,r,a,n,o){var s=this._symbolType;var l=this._color;var h=this.childAt(1);for(var c=0;c<u;c++){var v=i.createSymbol(s,-.5,-.5,1,1,l);v.attr({style:{stroke:e==="stroke"?l:null,fill:e==="fill"?l:null,strokeNoScale:true},z2:99,silent:true,scale:[1,1],z:n,zlevel:o});var f=-c/u*t+a;v.animate("",true).when(t,{scale:[r,r]}).delay(f).start();v.animateStyle(true).when(t,{opacity:0}).delay(f).start();h.add(v)}};v.highlight=function(){this.trigger("emphasis")};v.downplay=function(){this.trigger("normal")};v.updateData=function(t,e){var r=t.hostModel;this.childAt(0).updateData(t,e);var a=this.childAt(1);var i=t.getItemModel(e);var n=t.getItemVisual(e,"symbol");var s=h(t.getItemVisual(e,"symbolSize"));var l=t.getItemVisual(e,"color");a.attr("scale",s);a.traverse(function(t){t.attr({fill:l})});var u=i.getShallow("symbolOffset");if(u){var c=a.position;c[0]=o.parsePercent(u[0],s[0]);c[1]=o.parsePercent(u[1],s[1])}this._symbolType=n;this._color=l;var v=r.get("showEffectOn");var f=i.get("rippleEffect.scale");var d=i.get("rippleEffect.brushType");var p=i.get("rippleEffect.period")*1e3;var g=e/t.count();var m=i.getShallow("z")||0;var y=i.getShallow("zlevel")||0;this.stopEffectAnimation();if(v==="render"){this.startEffectAnimation(p,d,f,g,m,y)}var x=this.childAt(0);function _(){x.trigger("emphasis");if(v!=="render"){this.startEffectAnimation(p,d,f,g,m,y)}}function w(){x.trigger("normal");if(v!=="render"){this.stopEffectAnimation()}}this.on("mouseover",_,this).on("mouseout",w,this).on("emphasis",_,this).on("normal",w,this)};v.fadeOut=function(t){t&&t()};a.inherits(c,l);t.exports=c},function(t,e,r){r(254);r(255);var a=r(3);var i=r(1);i.registerLayout(r(257));i.registerVisualCoding("chart",a.curry(r(88),"lines","lineStyle"))},function(t,e,r){"use strict";var a=r(27);var i=r(94);var n=r(3);var o=r(25);t.exports=a.extend({type:"series.lines",dependencies:["grid","polar"],getInitialData:function(t,e){var r=[];var a=[];var s=[];n.each(t.data,function(t){r.push(t[0]);a.push(t[1]);s.push(n.extend(n.extend({},n.isArray(t[0])?null:t[0]),n.isArray(t[1])?null:t[1]))});var l=o.get(t.coordinateSystem);if(!l){throw new Error("Invalid coordinate system")}var u=l.dimensions;var h=new i(u,this);var c=new i(u,this);var v=new i(["value"],this);function f(t,e,r,a){return t.coord&&t.coord[a]}h.initData(r,null,f);c.initData(a,null,f);v.initData(s);this.fromData=h;this.toData=c;return v},formatTooltip:function(t){var e=this.fromData.getName(t);var r=this.toData.getName(t);return e+" > "+r},defaultOption:{coordinateSystem:"geo",zlevel:0,z:2,legendHoverLink:true,hoverAnimation:true,xAxisIndex:0,yAxisIndex:0,geoIndex:0,effect:{show:false,period:4,symbol:"circle",symbolSize:3,trailLength:.2},large:false,largeThreshold:2e3,label:{normal:{show:false,position:"end"}},lineStyle:{normal:{opacity:.5}}}})},function(t,e,r){var a=r(194);var i=r(256);var n=r(195);r(1).extendChartView({type:"lines",init:function(){},render:function(t,e,r){var o=t.getData();var s=this._lineDraw;var l=t.get("effect.show");if(l!==this._hasEffet){if(s){s.remove()}s=this._lineDraw=new a(l?i:n);this._hasEffet=l}var u=t.get("zlevel");var h=t.get("effect.trailLength");var c=r.getZr();c.painter.getLayer(u).clear(true);if(this._lastZlevel!=null){c.configLayer(this._lastZlevel,{motionBlur:false})}if(l&&h){c.configLayer(u,{motionBlur:true,lastFrameAlpha:Math.max(Math.min(h/10+.9,1),0)})}this.group.add(s.group);s.updateData(o);this._lastZlevel=u},updateLayout:function(t,e,r){this._lineDraw.updateLayout();var a=r.getZr();a.painter.getLayer(this._lastZlevel).clear(true)},remove:function(t,e){this._lineDraw&&this._lineDraw.remove(e,true)}})},function(t,e,r){var a=r(42);var i=r(195);var n=r(3);var o=r(100);var s=r(49);function l(t,e,r,n){a.Group.call(this);var o=new i(t,e,r,n);this.add(o);this._updateEffectSymbol(t,n)}var u=l.prototype;function h(t,e){t.__p1=e[0];t.__p2=e[1];t.__cp1=e[2]||[(e[0][0]+e[1][0])/2,(e[0][1]+e[1][1])/2]}function c(){var t=this.__p1;var e=this.__p2;var r=this.__cp1;var a=this.__t;var i=this.position;var n=s.quadraticAt;var o=s.quadraticDerivativeAt;i[0]=n(t[0],r[0],e[0],a);i[1]=n(t[1],r[1],e[1],a);var l=o(t[0],r[0],e[0],a);var u=o(t[1],r[1],e[1],a);this.rotation=-Math.atan2(u,l)-Math.PI/2;this.ignore=false}u._updateEffectSymbol=function(t,e){var r=t.getItemModel(e);var a=r.getModel("effect");var i=a.get("symbolSize");var s=a.get("symbol");if(!n.isArray(i)){i=[i,i]}var l=a.get("color")||t.getItemVisual(e,"color");var u=this.childAt(1);var v=a.get("period")*1e3;if(this._symbolType!==s||v!==this._period){u=o.createSymbol(s,-.5,-.5,1,1,l);u.ignore=true;u.z2=100;this._symbolType=s;this._period=v;this.add(u);u.__t=0;u.animate("",true).when(v,{__t:1}).delay(e/t.count()*v/2).during(n.bind(c,u)).start()}u.setStyle("shadowColor",l);u.setStyle(a.getItemStyle(["color"]));u.attr("scale",i);var f=t.getItemLayout(e);h(u,f);u.setColor(l);u.attr("scale",i)};u.updateData=function(t,e,r,a){this.childAt(0).updateData(t,e,r,a);this._updateEffectSymbol(t,a)};u.updateLayout=function(t,e,r,a){this.childAt(0).updateLayout(t,e,r,a);var i=this.childAt(1);var n=t.getItemLayout(a);h(i,n)};n.inherits(l,a.Group);t.exports=l},function(t,e){t.exports=function(t){t.eachSeriesByType("lines",function(t){var e=t.coordinateSystem;var r=t.fromData;var a=t.toData;var i=t.getData();var n=e.dimensions;r.each(n,function(t,a,i){r.setItemLayout(i,e.dataToPoint([t,a]))});a.each(n,function(t,r,i){a.setItemLayout(i,e.dataToPoint([t,r]))});i.each(function(t){var e=r.getItemLayout(t);var n=a.getItemLayout(t);var o=i.getItemModel(t).get("lineStyle.normal.curveness");var s;if(o>0){s=[(e[0]+n[0])/2-(e[1]-n[1])*o,(e[1]+n[1])/2-(n[0]-e[0])*o]}i.setItemLayout(t,[e,n,s])})})}},function(t,e,r){r(259);r(260)},function(t,e,r){var a=r(27);var i=r(93);t.exports=a.extend({type:"series.heatmap",getInitialData:function(t,e){return i(t.data,this,e)},defaultOption:{coordinateSystem:"cartesian2d",zlevel:0,z:2,xAxisIndex:0,yAxisIndex:0,geoIndex:0,blurSize:30,pointSize:20,maxOpacity:1,minOpacity:0}})},function(t,e,r){var a=r(42);var i=r(261);var n=r(3);function o(t,e,r){var a=t[1]-t[0];e=n.map(e,function(e){return{interval:[(e.interval[0]-t[0])/a,(e.interval[1]-t[0])/a]}});var i=e.length;var o=0;return function(t){for(var a=o;a<i;a++){var n=e[a].interval;if(n[0]<=t&&t<=n[1]){o=a;break}}if(a===i){for(var a=o-1;a>=0;a--){var n=e[a].interval;if(n[0]<=t&&t<=n[1]){o=a;break}}}return a>=0&&a<i&&r[a]}}function s(t,e){var r=t[1]-t[0];e=[(e[0]-t[0])/r,(e[1]-t[0])/r];return function(t){return t>=e[0]&&t<=e[1]}}function l(t){var e=t.dimensions;return e[0]==="lng"&&e[1]==="lat"}t.exports=r(1).extendChartView({type:"heatmap",render:function(t,e,r){var a;e.eachComponent("visualMap",function(e){e.eachTargetSeries(function(r){if(r===t){a=e}})});if(!a){throw new Error("Heatmap must use with visualMap")}this.group.removeAll();var i=t.coordinateSystem;if(i.type==="cartesian2d"){this._renderOnCartesian(i,t,r)}else if(l(i)){this._renderOnGeo(i,t,a,r)}},_renderOnCartesian:function(t,e,r){var i=t.getAxis("x");var n=t.getAxis("y");var o=this.group;if(!(i.type==="category"&&n.type==="category")){throw new Error("Heatmap on cartesian must have two category axes")}
if(!(i.onBand&&n.onBand)){throw new Error("Heatmap on cartesian must have two axes with boundaryGap true")}var s=i.getBandWidth();var l=n.getBandWidth();var u=e.getData();u.each(["x","y","z"],function(r,i,n,h){var c=u.getItemModel(h);var v=t.dataToPoint([r,i]);if(isNaN(n)){return}var f=new a.Rect({shape:{x:v[0]-s/2,y:v[1]-l/2,width:s,height:l},style:{fill:u.getItemVisual(h,"color")}});var d=c.getModel("itemStyle.normal").getItemStyle(["color"]);var p=c.getModel("itemStyle.emphasis").getItemStyle();var g=c.getModel("label.normal");var m=c.getModel("label.emphasis");var y=e.getRawValue(h);var x="-";if(y&&y[2]!=null){x=y[2]}if(g.get("show")){a.setText(d,g);d.text=e.getFormattedLabel(h,"normal")||x}if(m.get("show")){a.setText(p,m);p.text=e.getFormattedLabel(h,"emphasis")||x}f.setStyle(d);a.setHoverStyle(f,p);o.add(f);u.setItemGraphicEl(h,f)})},_renderOnGeo:function(t,e,r,n){var l=r.targetVisuals.inRange;var u=r.targetVisuals.outOfRange;var h=e.getData();var c=this._hmLayer||(this._hmLayer||new i);c.blurSize=e.get("blurSize");c.pointSize=e.get("pointSize");c.minOpacity=e.get("minOpacity");c.maxOpacity=e.get("maxOpacity");var v=t.getViewRect().clone();var f=t.getRoamTransform();v.applyTransform(f);var d=Math.max(v.x,0);var p=Math.max(v.y,0);var g=Math.min(v.width+v.x,n.getWidth());var m=Math.min(v.height+v.y,n.getHeight());var y=g-d;var x=m-p;var _=h.mapArray(["lng","lat","value"],function(e,r,a){var i=t.dataToPoint([e,r]);i[0]-=d;i[1]-=p;i.push(a);return i});var w=r.getExtent();var b=r.type==="visualMap.continuous"?s(w,r.option.range):o(w,r.getPieceList(),r.option.selected);c.update(_,y,x,l.color.getNormalizer(),{inRange:l.color.getColorMapper(),outOfRange:u.color.getColorMapper()},b);var M=new a.Image({style:{width:y,height:x,x:d,y:p,image:c.canvas},silent:true});this.group.add(M)}})},function(t,e,r){var a=256;var i=r(3);function n(){var t=i.createCanvas();this.canvas=t;this.blurSize=30;this.pointSize=20;this.maxOpacity=1;this.minOpacity=0;this._gradientPixels={}}n.prototype={update:function(t,e,r,i,n,o){var s=this._getBrush();var l=this._getGradient(t,n,"inRange");var u=this._getGradient(t,n,"outOfRange");var h=this.pointSize+this.blurSize;var c=this.canvas;var v=c.getContext("2d");var f=t.length;c.width=e;c.height=r;for(var d=0;d<f;++d){var p=t[d];var g=p[0];var m=p[1];var y=p[2];var x=i(y);v.globalAlpha=x;v.drawImage(s,g-h,m-h)}var _=v.getImageData(0,0,c.width,c.height);var w=_.data;var b=0;var M=w.length;var S=this.minOpacity;var I=this.maxOpacity;var A=I-S;while(b<M){var x=w[b+3]/256;var T=Math.floor(x*(a-1))*4;if(x>0){var C=o(x)?l:u;x>0&&(x=x*A+S);w[b++]=C[T];w[b++]=C[T+1];w[b++]=C[T+2];w[b++]=C[T+3]*x*256}else{b+=4}}v.putImageData(_,0,0);return c},_getBrush:function(){var t=this._brushCanvas||(this._brushCanvas=i.createCanvas());var e=this.pointSize+this.blurSize;var r=e*2;t.width=r;t.height=r;var a=t.getContext("2d");a.clearRect(0,0,r,r);a.shadowOffsetX=r;a.shadowBlur=this.blurSize;a.shadowColor="#000";a.beginPath();a.arc(-e,e,this.pointSize,0,Math.PI*2,true);a.closePath();a.fill();return t},_getGradient:function(t,e,r){var a=this._gradientPixels;var i=a[r]||(a[r]=new Uint8ClampedArray(256*4));var n=[];var o=0;for(var s=0;s<256;s++){e[r](s/255,true,n);i[o++]=n[0];i[o++]=n[1];i[o++]=n[2];i[o++]=n[3]}return i}};t.exports=n},function(t,e,r){r(263);r(264);r(265);var a=r(1);a.registerProcessor("filter",r(267))},function(t,e,r){"use strict";var a=r(3);var i=r(8);var n=r(1).extendComponentModel({type:"legend",dependencies:["series"],layoutMode:{type:"box",ignoreSize:true},init:function(t,e,r){this.mergeDefaultAndTheme(t,r);t.selected=t.selected||{};this._updateData(r);var a=this._data;var i=this.option.selected;if(a[0]&&this.get("selectedMode")==="single"){var n=false;for(var o in i){if(i[o]){this.select(o);n=true}}!n&&this.select(a[0].get("name"))}},mergeOption:function(t){n.superCall(this,"mergeOption",t);this._updateData(this.ecModel)},_updateData:function(t){var e=a.map(this.get("data")||[],function(t){if(typeof t==="string"){t={name:t}}return new i(t,this,this.ecModel)},this);this._data=e;var r=a.map(t.getSeries(),function(t){return t.name});t.eachSeries(function(t){if(t.legendDataProvider){var e=t.legendDataProvider();r=r.concat(e.mapArray(e.getName))}});this._availableNames=r},getData:function(){return this._data},select:function(t){var e=this.option.selected;var r=this.get("selectedMode");if(r==="single"){var i=this._data;a.each(i,function(t){e[t.get("name")]=false})}e[t]=true},unSelect:function(t){if(this.get("selectedMode")!=="single"){this.option.selected[t]=false}},toggleSelected:function(t){var e=this.option.selected;if(!(t in e)){e[t]=true}this[e[t]?"unSelect":"select"](t)},isSelected:function(t){var e=this.option.selected;return!(t in e&&!e[t])&&a.indexOf(this._availableNames,t)>=0},defaultOption:{zlevel:0,z:4,show:true,orient:"horizontal",left:"center",top:"top",align:"auto",backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,itemWidth:25,itemHeight:14,textStyle:{color:"#333"},selectedMode:true}});t.exports=n},function(t,e,r){var a=r(1);var i=r(3);function n(t,e,r){var a={};var n=t==="toggleSelected";var o;r.eachComponent("legend",function(r){if(n&&o!=null){r[o?"select":"unSelect"](e.name)}else{r[t](e.name);o=r.isSelected(e.name)}var s=r.getData();i.each(s,function(t){var e=t.get("name");if(e==="\n"||e===""){return}var i=r.isSelected(e);if(e in a){a[e]=a[e]&&i}else{a[e]=i}})});return{name:e.name,selected:a}}a.registerAction("legendToggleSelect","legendselectchanged",i.curry(n,"toggleSelected"));a.registerAction("legendSelect","legendselected",i.curry(n,"select"));a.registerAction("legendUnSelect","legendunselected",i.curry(n,"unSelect"))},function(t,e,r){var a=r(3);var i=r(100);var n=r(42);var o=r(266);var s=a.curry;var l="#ccc";function u(t,e){e.dispatchAction({type:"legendToggleSelect",name:t})}function h(t,e,r){t.get("legendHoverLink")&&r.dispatchAction({type:"highlight",seriesName:t.name,name:e})}function c(t,e,r){t.get("legendHoverLink")&&r.dispatchAction({type:"downplay",seriesName:t.name,name:e})}t.exports=r(1).extendComponentView({type:"legend",init:function(){this._symbolTypeStore={}},render:function(t,e,r){var i=this.group;i.removeAll();if(!t.get("show")){return}var l=t.get("selectedMode");var v=t.get("align");if(v==="auto"){v=t.get("left")==="right"&&t.get("orient")==="vertical"?"right":"left"}var f={};var d={};a.each(t.getData(),function(a){var o=a.get("name");if(o===""||o==="\n"){i.add(new n.Group({newline:true}))}var p=e.getSeriesByName(o)[0];f[o]=a;if(!p||d[o]){return}var g=p.getData();var m=g.getVisual("color");if(typeof m==="function"){m=m(p.getDataParams(0))}var y=g.getVisual("legendSymbol")||"roundRect";var x=g.getVisual("symbol");var _=this._createItem(o,a,t,y,x,v,m,l);_.on("click",s(u,o,r)).on("mouseover",s(h,p,"",r)).on("mouseout",s(c,p,"",r));d[o]=true},this);e.eachRawSeries(function(e){if(e.legendDataProvider){var a=e.legendDataProvider();a.each(function(i){var n=a.getName(i);if(!f[n]||d[n]){return}var o=a.getItemVisual(i,"color");var p="roundRect";var g=this._createItem(n,f[n],t,p,null,v,o,l);g.on("click",s(u,n,r)).on("mouseover",s(h,e,n,r)).on("mouseout",s(c,e,n,r));d[n]=true},false,this)}},this);o.layout(i,t,r);o.addBackground(i,t)},_createItem:function(t,e,r,a,o,s,u,h){var c=r.get("itemWidth");var v=r.get("itemHeight");var f=r.isSelected(t);var d=new n.Group;var p=e.getModel("textStyle");var g=e.get("icon");a=g||a;d.add(i.createSymbol(a,0,0,c,v,f?u:l));if(!g&&o&&(o!==a||o=="none")){var m=v*.8;if(o==="none"){o="circle"}d.add(i.createSymbol(o,(c-m)/2,(v-m)/2,m,m,f?u:l))}var y=s==="left"?c+5:-5;var x=s;var _=r.get("formatter");if(typeof _==="string"&&_){t=_.replace("{name}",t)}else if(typeof _==="function"){t=_(t)}var w=new n.Text({style:{text:t,x:y,y:v/2,fill:f?p.getTextColor():l,textFont:p.getFont(),textAlign:x,textVerticalAlign:"middle"}});d.add(w);d.add(new n.Rect({shape:d.getBoundingRect(),invisible:true}));d.eachChild(function(t){t.silent=!h});this.group.add(d);n.setHoverStyle(d);return d}})},function(t,e,r){var a=r(21);var i=r(6);var n=r(42);function o(t,e,r){a.positionGroup(t,e.getBoxLayoutParams(),{width:r.getWidth(),height:r.getHeight()},e.get("padding"))}t.exports={layout:function(t,e,r){var i=a.getLayoutRect(e.getBoxLayoutParams(),{width:r.getWidth(),height:r.getHeight()},e.get("padding"));a.box(e.get("orient"),t,e.get("itemGap"),i.width,i.height);o(t,e,r)},addBackground:function(t,e){var r=i.normalizeCssArray(e.get("padding"));var a=t.getBoundingRect();var o=e.getItemStyle(["color","opacity"]);o.fill=e.get("backgroundColor");var s=new n.Rect({shape:{x:a.x-r[3],y:a.y-r[0],width:a.width+r[1]+r[3],height:a.height+r[0]+r[2]},style:o,silent:true,z2:-1});n.subPixelOptimizeRect(s);t.add(s)}}},function(t,e){t.exports=function(t){var e=t.findComponents({mainType:"legend"});if(e&&e.length){t.filterSeries(function(t){for(var r=0;r<e.length;r++){if(!e[r].isSelected(t.name)){return false}}return true})}}},function(t,e,r){r(269);r(270);r(1).registerAction({type:"showTip",event:"showTip",update:"none"},function(){});r(1).registerAction({type:"hideTip",event:"hideTip",update:"none"},function(){})},function(t,e,r){r(1).extendComponentModel({type:"tooltip",defaultOption:{zlevel:0,z:8,show:true,showContent:true,trigger:"item",triggerOn:"mousemove",alwaysShowContent:false,hideDelay:100,transitionDuration:.4,enterable:false,backgroundColor:"rgba(50,50,50,0.7)",borderColor:"#333",borderRadius:4,borderWidth:0,padding:5,extraCssText:"",axisPointer:{type:"line",axis:"auto",animation:true,animationDurationUpdate:200,animationEasingUpdate:"exponentialOut",lineStyle:{color:"#555",width:1,type:"solid"},crossStyle:{color:"#555",width:1,type:"dashed",textStyle:{}},shadowStyle:{color:"rgba(150,150,150,0.3)"}},textStyle:{color:"#fff",fontSize:14}}})},function(t,e,r){var a=r(271);var i=r(42);var n=r(3);var o=r(6);var s=r(7);var l=s.parsePercent;var u=r(78);function h(t,e){if(!t||!e){return false}var r=s.round;return r(t[0])===r(e[0])&&r(t[1])===r(e[1])}function c(t,e,r,a){return{x1:t,y1:e,x2:r,y2:a}}function v(t,e,r,a){return{x:t,y:e,width:r,height:a}}function f(t,e,r,a,i,n){return{cx:t,cy:e,r0:r,r:a,startAngle:i,endAngle:n,clockwise:true}}function d(t,e,r,a,i){var n=r.clientWidth;var o=r.clientHeight;var s=20;if(t+n+s>a){t-=n+s}else{t+=s}if(e+o+s>i){e-=o+s}else{e+=s}return[t,e]}function p(t,e,r){var a=r.clientWidth;var i=r.clientHeight;var n=5;var o=0;var s=0;var l=e.width;var u=e.height;switch(t){case"inside":o=e.x+l/2-a/2;s=e.y+u/2-i/2;break;case"top":o=e.x+l/2-a/2;s=e.y-i-n;break;case"bottom":o=e.x+l/2-a/2;s=e.y+u+n;break;case"left":o=e.x-a-n;s=e.y+u/2-i/2;break;case"right":o=e.x+l+n;s=e.y+u/2-i/2}return[o,s]}function g(t,e,r,a,i,o,s){var u=s.getWidth();var h=s.getHeight();var c=o&&o.getBoundingRect().clone();o&&c.applyTransform(o.transform);if(typeof t==="function"){t=t([e,r],i,c)}if(n.isArray(t)){e=l(t[0],u);r=l(t[1],h)}else if(typeof t==="string"&&o){var v=p(t,c,a.el);e=v[0];r=v[1]}else{var v=d(e,r,a.el,u,h);e=v[0];r=v[1]}a.moveTo(e,r)}function m(t){var e=t.coordinateSystem;var r=t.get("tooltip.trigger",true);return!(!e||e.type!=="cartesian2d"&&e.type!=="polar"&&e.type!=="single"||r==="item")}r(1).extendComponentView({type:"tooltip",_axisPointers:{},init:function(t,e){if(u.node){return}var r=new a(e.getDom(),e);this._tooltipContent=r;e.on("showTip",this._manuallyShowTip,this);e.on("hideTip",this._manuallyHideTip,this)},render:function(t,e,r){if(u.node){return}this.group.removeAll();this._axisPointers={};this._tooltipModel=t;this._ecModel=e;this._api=r;this._lastHover={};var a=this._tooltipContent;a.update();a.enterable=t.get("enterable");this._alwaysShowContent=t.get("alwaysShowContent");this._seriesGroupByAxis=this._prepareAxisTriggerData(t,e);var i=this._crossText;if(i){this.group.add(i)}if(this._lastX!=null&&this._lastY!=null){var n=this;clearTimeout(this._refreshUpdateTimeout);this._refreshUpdateTimeout=setTimeout(function(){n._manuallyShowTip({x:n._lastX,y:n._lastY})})}var o=this._api.getZr();var s=this._tryShow;o.off("click",s);o.off("mousemove",s);o.off("mouseout",this._hide);if(t.get("triggerOn")==="click"){o.on("click",s,this)}else{o.on("mousemove",s,this);o.on("mouseout",this._hide,this)}},_manuallyShowTip:function(t){if(t.from===this.uid){return}var e=this._ecModel;var r=t.seriesIndex;var a=t.dataIndex;var i=e.getSeriesByIndex(r);var n=this._api;if(t.x==null||t.y==null){if(!i){e.eachSeries(function(t){if(m(t)&&!i){i=t}})}if(i){var o=i.getData();if(a==null){a=o.indexOfName(t.name)}var s=o.getItemGraphicEl(a);var l,u;var h=i.coordinateSystem;if(h&&h.dataToPoint){var c=h.dataToPoint(o.getValues(h.dimensions,a,true));l=c&&c[0];u=c&&c[1]}else if(s){var v=s.getBoundingRect().clone();v.applyTransform(s.transform);l=v.x+v.width/2;u=v.y+v.height/2}if(l!=null&&u!=null){this._tryShow({offsetX:l,offsetY:u,target:s,event:{}})}}}else{var s=n.getZr().handler.findHover(t.x,t.y);this._tryShow({offsetX:t.x,offsetY:t.y,target:s,event:{}})}},_manuallyHideTip:function(t){if(t.from===this.uid){return}this._hide()},_prepareAxisTriggerData:function(t,e){var r={};e.eachSeries(function(t){if(m(t)){var e=t.coordinateSystem;var a;var i;if(e.type==="cartesian2d"){a=e.getBaseAxis();i=a.dim+a.index}else if(e.type==="single"){a=e.getAxis();i=a.dim+a.type}else{a=e.getBaseAxis();i=a.dim+e.name}r[i]=r[i]||{coordSys:[],series:[]};r[i].coordSys.push(e);r[i].series.push(t)}},this);return r},_tryShow:function(t){var e=t.target;var r=this._tooltipModel;var a=r.get("trigger");var i=this._ecModel;var n=this._api;if(!r){return}this._lastX=t.offsetX;this._lastY=t.offsetY;if(e&&e.dataIndex!=null){var o=e.dataModel||i.getSeriesByIndex(e.seriesIndex);var s=e.dataIndex;var l=o.getData().getItemModel(s);if((l.get("tooltip.trigger")||a)==="axis"){this._showAxisTooltip(r,i,t)}else{this._ticket="";this._hideAxisPointer();this._resetLastHover();this._showItemTooltipContent(o,s,t)}n.dispatchAction({type:"showTip",from:this.uid,dataIndex:e.dataIndex,seriesIndex:e.seriesIndex})}else{if(a==="item"){this._hide()}else{this._showAxisTooltip(r,i,t)}if(r.get("axisPointer.type")==="cross"){n.dispatchAction({type:"showTip",from:this.uid,x:t.offsetX,y:t.offsetY})}}},_showAxisTooltip:function(t,e,r){var a=t.getModel("axisPointer");var i=a.get("type");if(i==="cross"){var o=r.target;if(o&&o.dataIndex!=null){var s=e.getSeriesByIndex(o.seriesIndex);var l=o.dataIndex;this._showItemTooltipContent(s,l,r)}}this._showAxisPointer();var u=true;n.each(this._seriesGroupByAxis,function(t){var e=t.coordSys;var o=e[0];var s=[r.offsetX,r.offsetY];if(!o.containPoint(s)){this._hideAxisPointer(o.name);return}u=false;var l=o.dimensions;var c=o.pointToData(s,true);s=o.dataToPoint(c);var v=o.getBaseAxis();var f=a.get("axis");if(f==="auto"){f=v.dim}var d=false;var p=this._lastHover;if(i==="cross"){if(h(p.data,c)){d=true}p.data=c}else{var g=n.indexOf(l,f);if(p.data===c[g]){d=true}p.data=c[g]}if(o.type==="cartesian2d"&&!d){this._showCartesianPointer(a,o,f,s)}else if(o.type==="polar"&&!d){this._showPolarPointer(a,o,f,s)}else if(o.type==="single"&&!d){this._showSinglePointer(a,o,f,s)}if(i!=="cross"){this._dispatchAndShowSeriesTooltipContent(o,t.series,s,c,d)}},this);if(u){this._hide()}},_showCartesianPointer:function(t,e,r,a){var n=this;var o=t.get("type");var s=o!=="cross";if(o==="cross"){h("x",a,e.getAxis("y").getGlobalExtent());h("y",a,e.getAxis("x").getGlobalExtent());this._updateCrossText(e,a,t)}else{var l=e.getAxis(r==="x"?"y":"x");var u=l.getGlobalExtent();if(e.type==="cartesian2d"){(o==="line"?h:f)(r,a,u)}}function h(r,a,o){var l=r==="x"?c(a[0],o[0],a[0],o[1]):c(o[0],a[1],o[1],a[1]);var u=n._getPointerElement(e,t,r,l);s?i.updateProps(u,{shape:l},t):u.attr({shape:l})}function f(r,a,o){var l=e.getAxis(r);var u=l.getBandWidth();var h=o[1]-o[0];var c=r==="x"?v(a[0]-u/2,o[0],u,h):v(o[0],a[1]-u/2,h,u);var f=n._getPointerElement(e,t,r,c);s?i.updateProps(f,{shape:c},t):f.attr({shape:c})}},_showSinglePointer:function(t,e,r,a){var n=this;var o=t.get("type");var s=o!=="cross";var l=e.getRect();var u=[l.y,l.y+l.height];h(r,a,u);function h(r,a,o){var l=e.getAxis();var u=l.orient;var h=u==="horizontal"?c(a[0],o[0],a[0],o[1]):c(o[0],a[1],o[1],a[1]);var v=n._getPointerElement(e,t,r,h);s?i.updateProps(v,{shape:h},t):v.attr({shape:h})}},_showPolarPointer:function(t,e,r,a){var n=this;var o=t.get("type");var s=e.getAngleAxis();var l=e.getRadiusAxis();var u=o!=="cross";if(o==="cross"){d("angle",a,l.getExtent());d("radius",a,s.getExtent());this._updateCrossText(e,a,t)}else{var h=e.getAxis(r==="radius"?"angle":"radius");var v=h.getExtent();(o==="line"?d:p)(r,a,v)}function d(r,a,o){var s=e.pointToCoord(a);var l;if(r==="angle"){var h=e.coordToPoint([o[0],s[1]]);var v=e.coordToPoint([o[1],s[1]]);l=c(h[0],h[1],v[0],v[1])}else{l={cx:e.cx,cy:e.cy,r:s[0]}}var f=n._getPointerElement(e,t,r,l);u?i.updateProps(f,{shape:l},t):f.attr({shape:l})}function p(r,a,o){var s=e.getAxis(r);var l=s.getBandWidth();var h=e.pointToCoord(a);var c;var v=Math.PI/180;if(r==="angle"){c=f(e.cx,e.cy,o[0],o[1],(-h[1]-l/2)*v,(-h[1]+l/2)*v)}else{c=f(e.cx,e.cy,h[0]-l/2,h[0]+l/2,0,Math.PI*2)}var d=n._getPointerElement(e,t,r,c);u?i.updateProps(d,{shape:c},t):d.attr({shape:c})}},_updateCrossText:function(t,e,r){var a=r.getModel("crossStyle");var s=a.getModel("textStyle");var l=this._tooltipModel;var u=this._crossText;if(!u){u=this._crossText=new i.Text({style:{textAlign:"left",textVerticalAlign:"bottom"}});this.group.add(u)}var h=t.pointToData(e);var c=t.dimensions;h=n.map(h,function(e,r){var a=t.getAxis(c[r]);if(a.type==="category"||a.type==="time"){e=a.scale.getLabel(e)}else{e=o.addCommas(e.toFixed(a.getPixelPrecision()))}return e});u.setStyle({fill:s.getTextColor()||a.get("color"),textFont:s.getFont(),text:h.join(", "),x:e[0]+5,y:e[1]-5});u.z=l.get("z");u.zlevel=l.get("zlevel")},_getPointerElement:function(t,e,r,a){var n=this._tooltipModel;var o=n.get("z");var s=n.get("zlevel");var l=this._axisPointers;var u=t.name;l[u]=l[u]||{};if(l[u][r]){return l[u][r]}var h=e.get("type");var c=e.getModel(h+"Style");var v=h==="shadow";var f=c[v?"getAreaStyle":"getLineStyle"]();var d=t.type==="polar"?v?"Sector":r==="radius"?"Circle":"Line":v?"Rect":"Line";v?f.stroke=null:f.fill=null;var p=l[u][r]=new i[d]({style:f,z:o,zlevel:s,silent:true,shape:a});this.group.add(p);return p},_dispatchAndShowSeriesTooltipContent:function(t,e,r,a,i){var s=this._tooltipModel;var l=this._tooltipContent;var u=t.getBaseAxis();var h=n.map(e,function(t){return{seriesIndex:t.seriesIndex,dataIndex:t.getAxisTooltipDataIndex?t.getAxisTooltipDataIndex(t.coordDimToDataDim(u.dim),a,u):t.getData().indexOfNearest(t.coordDimToDataDim(u.dim)[0],a[u.dim==="x"||u.dim==="radius"?0:1])}});var c=this._lastHover;var v=this._api;if(c.payloadBatch&&!i){v.dispatchAction({type:"downplay",batch:c.payloadBatch})}if(!i){v.dispatchAction({type:"highlight",batch:h});c.payloadBatch=h}v.dispatchAction({type:"showTip",dataIndex:h[0].dataIndex,seriesIndex:h[0].seriesIndex,from:this.uid});if(u&&s.get("showContent")){var f=s.get("formatter");var d=s.get("position");var p;var m=n.map(e,function(t,e){return t.getDataParams(h[e].dataIndex)});l.show(s);var y=h[0].dataIndex;if(!i){this._ticket="";if(!f){var x=e[0].getData().getName(y);p=(x?x+"<br />":"")+n.map(e,function(t,e){return t.formatTooltip(h[e].dataIndex,true)}).join("<br />")}else{if(typeof f==="string"){p=o.formatTpl(f,m)}else if(typeof f==="function"){var _=this;var w="axis_"+t.name+"_"+y;var b=function(t,e){if(t===_._ticket){l.setContent(e);g(d,r[0],r[1],l,m,null,v)}};_._ticket=w;p=f(m,w,b)}}l.setContent(p)}g(d,r[0],r[1],l,m,null,v)}},_showItemTooltipContent:function(t,e,r){var a=this._api;var i=t.getData();var n=i.getItemModel(e);var s=this._tooltipModel;var l=this._tooltipContent;var u=n.getModel("tooltip");if(u.parentModel){u.parentModel.parentModel=s}else{u.parentModel=this._tooltipModel}if(u.get("showContent")){var h=u.get("formatter");var c=u.get("position");var v=t.getDataParams(e);var f;if(!h){f=t.formatTooltip(e)}else{if(typeof h==="string"){f=o.formatTpl(h,v)}else if(typeof h==="function"){var d=this;var p="item_"+t.name+"_"+e;var m=function(t,e){if(t===d._ticket){l.setContent(e);g(c,r.offsetX,r.offsetY,l,v,r.target,a)}};d._ticket=p;f=h(v,p,m)}}l.show(u);l.setContent(f);g(c,r.offsetX,r.offsetY,l,v,r.target,a)}},_showAxisPointer:function(t){if(t){var e=this._axisPointers[t];e&&n.each(e,function(t){t.show()})}else{this.group.eachChild(function(t){t.show()});this.group.show()}},_resetLastHover:function(){var t=this._lastHover;if(t.payloadBatch){this._api.dispatchAction({type:"downplay",batch:t.payloadBatch})}this._lastHover={}},_hideAxisPointer:function(t){if(t){var e=this._axisPointers[t];e&&n.each(e,function(t){t.hide()})}else{this.group.hide()}},_hide:function(){this._hideAxisPointer();this._resetLastHover();if(!this._alwaysShowContent){this._tooltipContent.hideLater(this._tooltipModel.get("hideDelay"))}this._api.dispatchAction({type:"hideTip",from:this.uid})},dispose:function(t,e){if(u.node){return}var r=e.getZr();this._tooltipContent.hide();r.off("click",this._tryShow);r.off("mousemove",this._tryShow);r.off("mouseout",this._hide);e.off("showTip",this._manuallyShowTip);e.off("hideTip",this._manuallyHideTip)}})},function(t,e,r){var a=r(3);var i=r(38);var n=r(80);var o=r(6);var s=a.each;var l=o.toCamelCase;var u=["","-webkit-","-moz-","-o-"];var h="position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;";function c(t){var e="cubic-bezier(0.23, 1, 0.32, 1)";var r="left "+t+"s "+e+","+"top "+t+"s "+e;return a.map(u,function(t){return t+"transition:"+r}).join(";")}function v(t){var e=[];var r=t.get("fontSize");var a=t.getTextColor();a&&e.push("color:"+a);e.push("font:"+t.getFont());r&&e.push("line-height:"+Math.round(r*3/2)+"px");s(["decoration","align"],function(r){var a=t.get(r);a&&e.push("text-"+r+":"+a)});return e.join(";")}function f(t){t=t;var e=[];var r=t.get("transitionDuration");var a=t.get("backgroundColor");var n=t.getModel("textStyle");var u=t.get("padding");r&&e.push(c(r));if(a){e.push("background-Color:"+i.toHex(a));e.push("filter:alpha(opacity=70)");e.push("background-Color:"+a)}s(["width","color","radius"],function(r){var a="border-"+r;var i=l(a);var n=t.get(i);n!=null&&e.push(a+":"+n+(r==="color"?"":"px"))});e.push(v(n));if(u!=null){e.push("padding:"+o.normalizeCssArray(u).join("px ")+"px")}return e.join(";")+";"}function d(t,e){var r=document.createElement("div");var a=e.getZr();this.el=r;this._x=e.getWidth()/2;this._y=e.getHeight()/2;t.appendChild(r);this._container=t;this._show=false;this._hideTimeout;var i=this;r.onmouseenter=function(){if(i.enterable){clearTimeout(i._hideTimeout);i._show=true}i._inContent=true};r.onmousemove=function(e){if(!i.enterable){var r=a.handler;n.normalizeEvent(t,e);r.dispatch("mousemove",e)}};r.onmouseleave=function(){if(i.enterable){if(i._show){i.hideLater(i._hideDelay)}}i._inContent=false};p(r,t)}function p(t,e){n.addEventListener(e,"touchstart",r);n.addEventListener(e,"touchmove",r);n.addEventListener(e,"touchend",r);function r(t){if(a(t.target)){t.preventDefault()}}function a(r){while(r&&r!==e){if(r===t){return true}r=r.parentNode}}}d.prototype={constructor:d,enterable:true,update:function(){var t=this._container;var e=t.currentStyle||document.defaultView.getComputedStyle(t);var r=t.style;if(r.position!=="absolute"&&e.position!=="absolute"){r.position="relative"}},show:function(t){clearTimeout(this._hideTimeout);this.el.style.cssText=h+f(t)+";left:"+this._x+"px;top:"+this._y+"px;"+(t.get("extraCssText")||"");this._show=true},setContent:function(t){var e=this.el;e.innerHTML=t;e.style.display=t?"block":"none"},moveTo:function(t,e){var r=this.el.style;r.left=t+"px";r.top=e+"px";this._x=t;this._y=e},hide:function(){this.el.style.display="none";this._show=false},hideLater:function(t){if(this._show&&!(this._inContent&&this.enterable)){if(t){this._hideDelay=t;this._show=false;this._hideTimeout=setTimeout(a.bind(this.hide,this),t)}else{this.hide()}}},isShow:function(){return this._show}};t.exports=d},function(t,e,r){"use strict";r(273);r(279);r(281);r(1).extendComponentView({type:"polar"})},function(t,e,r){var a=r(274);var i=r(7);var n=r(108);var o=n.niceScaleExtent;r(277);function s(t,e){var r=t.get("center");var a=t.get("radius");var n=e.getWidth();var o=e.getHeight();var s=i.parsePercent;this.cx=s(r[0],n);this.cy=s(r[1],o);var l=this.getRadiusAxis();var u=Math.min(n,o)/2;l.setExtent(0,s(a,u))}function l(t,e){var r=this;var a=r.getAngleAxis();var i=r.getRadiusAxis();a.scale.setExtent(Infinity,-Infinity);i.scale.setExtent(Infinity,-Infinity);t.eachSeries(function(t){if(t.coordinateSystem===r){var e=t.getData();i.scale.unionExtent(e.getDataExtent("radius",i.type!=="category"));a.scale.unionExtent(e.getDataExtent("angle",a.type!=="category"))}});o(a,a.model);o(i,i.model);if(a.type==="category"&&!a.onBand){var n=a.getExtent();var s=360/a.scale.count();a.inverse?n[1]+=s:n[1]-=s;a.setExtent(n[0],n[1])}}function u(t,e){t.type=e.get("type");t.scale=n.createScaleByModel(e);t.onBand=e.get("boundaryGap")&&t.type==="category";if(e.mainType==="angleAxis"){var r=e.get("startAngle");t.inverse=e.get("inverse")^e.get("clockwise");t.setExtent(r,r+(t.inverse?-360:360))}e.axis=t;t.model=e}var h={dimensions:a.prototype.dimensions,create:function(t,e){var r=[];t.eachComponent("polar",function(t,i){var n=new a(i);n.resize=s;n.update=l;var o=n.getRadiusAxis();var h=n.getAngleAxis();var c=t.findAxisModel("radiusAxis");var v=t.findAxisModel("angleAxis");u(o,c);u(h,v);n.resize(t,e);r.push(n);t.coordinateSystem=n});t.eachSeries(function(t){if(t.get("coordinateSystem")==="polar"){t.coordinateSystem=r[t.get("polarIndex")]}});return r}};r(25).register("polar",h)},function(t,e,r){"use strict";var a=r(275);var i=r(276);var n=function(t){this.name=t||"";this.cx=0;this.cy=0;this._radiusAxis=new a;this._angleAxis=new i};n.prototype={constructor:n,type:"polar",dimensions:["radius","angle"],containPoint:function(t){var e=this.pointToCoord(t);return this._radiusAxis.contain(e[0])&&this._angleAxis.contain(e[1])},containData:function(t){return this._radiusAxis.containData(t[0])&&this._angleAxis.containData(t[1])},getAxis:function(t){return this["_"+t+"Axis"]},getAxesByScale:function(t){var e=[];var r=this._angleAxis;var a=this._radiusAxis;r.scale.type===t&&e.push(r);a.scale.type===t&&e.push(a);return e},getAngleAxis:function(){return this._angleAxis},getRadiusAxis:function(){return this._radiusAxis},getOtherAxis:function(t){var e=this._angleAxis;return t===e?this._radiusAxis:e},getBaseAxis:function(){return this.getAxesByScale("ordinal")[0]||this.getAxesByScale("time")[0]||this.getAngleAxis()},dataToPoints:function(t){return t.mapArray(this.dimensions,function(t,e){return this.dataToPoint([t,e])},this)},dataToPoint:function(t,e){return this.coordToPoint([this._radiusAxis.dataToRadius(t[0],e),this._angleAxis.dataToAngle(t[1],e)])},pointToData:function(t,e){var r=this.pointToCoord(t);return[this._radiusAxis.radiusToData(r[0],e),this._angleAxis.angleToData(r[1],e)]},pointToCoord:function(t){var e=t[0]-this.cx;var r=t[1]-this.cy;var a=this.getAngleAxis();var i=a.getExtent();var n=Math.min(i[0],i[1]);var o=Math.max(i[0],i[1]);a.inverse?n=o-360:o=n+360;var s=Math.sqrt(e*e+r*r);e/=s;r/=s;var l=Math.atan2(-r,e)/Math.PI*180;var u=l<n?1:-1;while(l<n||l>o){l+=u*360}return[s,l]},coordToPoint:function(t){var e=t[0];var r=t[1]/180*Math.PI;var a=Math.cos(r)*e+this.cx;var i=-Math.sin(r)*e+this.cy;return[a,i]}};t.exports=n},function(t,e,r){"use strict";var a=r(3);var i=r(117);function n(t,e){i.call(this,"radius",t,e);this.type="category"}n.prototype={constructor:n,dataToRadius:i.prototype.dataToCoord,radiusToData:i.prototype.coordToData};a.inherits(n,i);t.exports=n},function(t,e,r){"use strict";var a=r(3);var i=r(117);function n(t,e){e=e||[0,360];i.call(this,"angle",t,e);this.type="category"}n.prototype={constructor:n,dataToAngle:i.prototype.dataToCoord,angleToData:i.prototype.coordToData};a.inherits(n,i);t.exports=n},function(t,e,r){"use strict";r(278);r(1).extendComponentModel({type:"polar",dependencies:["polarAxis","angleAxis"],coordinateSystem:null,findAxisModel:function(t){var e;var r=this.ecModel;r.eachComponent(t,function(t){if(r.getComponent("polar",t.getShallow("polarIndex"))===this){e=t}},this);return e},defaultOption:{zlevel:0,z:0,center:["50%","50%"],radius:"80%"}})},function(t,e,r){"use strict";var a=r(3);var i=r(19);var n=r(121);var o=i.extend({type:"polarAxis",axis:null});a.merge(o.prototype,r(123));var s={angle:{polarIndex:0,startAngle:90,clockwise:true,splitNumber:12,axisLabel:{rotate:false}},radius:{polarIndex:0,splitNumber:5}};function l(t,e){return e.type||(e.data?"category":"value")}n("angle",o,l,s.angle);n("radius",o,l,s.radius)},function(t,e,r){"use strict";r(273);r(280)},function(t,e,r){"use strict";var a=r(3);var i=r(42);var n=r(8);var o=["axisLine","axisLabel","axisTick","splitLine","splitArea"];function s(t,e,r,a){var i=t.coordToPoint([e,a]);var n=t.coordToPoint([r,a]);return{x1:i[0],y1:i[1],x2:n[0],y2:n[1]}}r(1).extendComponentView({type:"angleAxis",render:function(t,e){this.group.removeAll();if(!t.get("show")){return}var r=e.getComponent("polar",t.get("polarIndex"));var i=t.axis;var n=r.coordinateSystem;var s=n.getRadiusAxis().getExtent();var l=i.getTicksCoords();if(i.type!=="category"){l.pop()}a.each(o,function(e){if(t.get(e+".show")){this["_"+e](t,n,l,s)}},this)},_axisLine:function(t,e,r,a){var n=t.getModel("axisLine.lineStyle");var o=new i.Circle({shape:{cx:e.cx,cy:e.cy,r:a[1]},style:n.getLineStyle(),z2:1,silent:true});o.style.fill=null;this.group.add(o)},_axisTick:function(t,e,r,n){var o=t.getModel("axisTick");var l=(o.get("inside")?-1:1)*o.get("length");var u=a.map(r,function(t){return new i.Line({shape:s(e,n[1],n[1]+l,t)})});this.group.add(i.mergePath(u,{style:o.getModel("lineStyle").getLineStyle()}))},_axisLabel:function(t,e,r,a){var o=t.axis;var s=t.get("data");var l=t.getModel("axisLabel");var u=l.getModel("textStyle");var h=t.getFormattedLabels();var c=l.get("margin");var v=o.getLabelsCoords();for(var f=0;f<r.length;f++){var d=a[1];var p=e.coordToPoint([d+c,v[f]]);var g=e.cx;var m=e.cy;var y=Math.abs(p[0]-g)/d<.3?"center":p[0]>g?"left":"right";var x=Math.abs(p[1]-m)/d<.3?"middle":p[1]>m?"top":"bottom";var _=u;if(s&&s[f]&&s[f].textStyle){_=new n(s[f].textStyle,u)}this.group.add(new i.Text({style:{x:p[0],y:p[1],fill:_.getTextColor(),text:h[f],textAlign:y,textVerticalAlign:x,textFont:_.getFont()},silent:true}))}},_splitLine:function(t,e,r,n){var o=t.getModel("splitLine");var l=o.getModel("lineStyle");var u=l.get("color");var h=0;u=u instanceof Array?u:[u];var c=[];for(var v=0;v<r.length;v++){var f=h++%u.length;c[f]=c[f]||[];c[f].push(new i.Line({shape:s(e,n[0],n[1],r[v])}))}for(var v=0;v<c.length;v++){this.group.add(i.mergePath(c[v],{style:a.defaults({stroke:u[v%u.length]},l.getLineStyle()),silent:true,z:t.get("z")}))}},_splitArea:function(t,e,r,n){var o=t.getModel("splitArea");var s=o.getModel("areaStyle");var l=s.get("color");var u=0;l=l instanceof Array?l:[l];var h=[];var c=Math.PI/180;var v=-r[0]*c;var f=Math.min(n[0],n[1]);var d=Math.max(n[0],n[1]);var p=t.get("clockwise");for(var g=1;g<r.length;g++){var m=u++%l.length;h[m]=h[m]||[];h[m].push(new i.Sector({shape:{cx:e.cx,cy:e.cy,r0:f,r:d,startAngle:v,endAngle:-r[g]*c,clockwise:p},silent:true}));v=-r[g]*c}for(var g=0;g<h.length;g++){this.group.add(i.mergePath(h[g],{style:a.defaults({fill:l[g%l.length]},s.getAreaStyle()),silent:true}))}}})},function(t,e,r){r(273);r(282)},function(t,e,r){"use strict";var a=r(3);var i=r(42);var n=r(126);var o=["axisLine","axisLabel","axisTick","axisName"];var s=["splitLine","splitArea"];r(1).extendComponentView({type:"radiusAxis",render:function(t,e){this.group.removeAll();if(!t.get("show")){return}var r=e.getComponent("polar",t.get("polarIndex"));var i=r.coordinateSystem.getAngleAxis();var u=t.axis;var h=r.coordinateSystem;var c=u.getTicksCoords();var v=i.getExtent()[0];var f=u.getExtent();var d=l(h,t,v);var p=new n(t,d);a.each(o,p.add,p);this.group.add(p.getGroup());a.each(s,function(e){if(t.get(e+".show")){
this["_"+e](t,h,v,f,c)}},this)},_splitLine:function(t,e,r,n,o){var s=t.getModel("splitLine");var l=s.getModel("lineStyle");var u=l.get("color");var h=0;u=u instanceof Array?u:[u];var c=[];for(var v=0;v<o.length;v++){var f=h++%u.length;c[f]=c[f]||[];c[f].push(new i.Circle({shape:{cx:e.cx,cy:e.cy,r:o[v]},silent:true}))}for(var v=0;v<c.length;v++){this.group.add(i.mergePath(c[v],{style:a.defaults({stroke:u[v%u.length],fill:null},l.getLineStyle()),silent:true}))}},_splitArea:function(t,e,r,n,o){var s=t.getModel("splitArea");var l=s.getModel("areaStyle");var u=l.get("color");var h=0;u=u instanceof Array?u:[u];var c=[];var v=o[0];for(var f=1;f<o.length;f++){var d=h++%u.length;c[d]=c[d]||[];c[d].push(new i.Sector({shape:{cx:e.cx,cy:e.cy,r0:v,r:o[f],startAngle:0,endAngle:Math.PI*2},silent:true}));v=o[f]}for(var f=0;f<c.length;f++){this.group.add(i.mergePath(c[f],{style:a.defaults({fill:u[f%u.length]},l.getAreaStyle()),silent:true}))}}});function l(t,e,r){return{position:[t.cx,t.cy],rotation:r/180*Math.PI,labelDirection:-1,tickDirection:-1,nameDirection:1,labelRotation:e.getModel("axisLabel").get("rotate"),z2:1}}},function(t,e,r){r(163);r(284);r(161)},function(t,e,r){"use strict";var a=r(158);t.exports=r(1).extendComponentView({type:"geo",init:function(t,e){var r=new a(e,true);this._mapDraw=r;this.group.add(r.group)},render:function(t,e,r){t.get("show")&&this._mapDraw.draw(t,e,r)}})},function(t,e,r){"use strict";var a=r(1);var i=r(42);var n=r(21);a.extendComponentModel({type:"title",layoutMode:{type:"box",ignoreSize:true},defaultOption:{zlevel:0,z:6,show:true,text:"",target:"blank",subtext:"",subtarget:"blank",left:0,top:0,backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,itemGap:10,textStyle:{fontSize:18,fontWeight:"bolder",color:"#333"},subtextStyle:{color:"#aaa"}}});a.extendComponentView({type:"title",render:function(t,e,r){this.group.removeAll();if(!t.get("show")){return}var a=this.group;var o=t.getModel("textStyle");var s=t.getModel("subtextStyle");var l=t.get("textAlign");var u=new i.Text({style:{text:t.get("text"),textFont:o.getFont(),fill:o.getTextColor(),textBaseline:"top"},z2:10});var h=u.getBoundingRect();var c=t.get("subtext");var v=new i.Text({style:{text:c,textFont:s.getFont(),fill:s.getTextColor(),y:h.height+t.get("itemGap"),textBaseline:"top"},z2:10});var f=t.get("link");var d=t.get("sublink");u.silent=!f;v.silent=!d;if(f){u.on("click",function(){window.open(f,t.get("target"))})}if(d){v.on("click",function(){window.open(d,t.get("subtarget"))})}a.add(u);c&&a.add(v);var p=a.getBoundingRect();var g=t.getBoxLayoutParams();g.width=p.width;g.height=p.height;var m=n.getLayoutRect(g,{width:r.getWidth(),height:r.getHeight()},t.get("padding"));if(!l){l=t.get("left")||t.get("right");if(l==="middle"){l="center"}if(l==="right"){m.x+=m.width}else if(l==="center"){m.x+=m.width/2}}a.position=[m.x,m.y];u.setStyle("textAlign",l);v.setStyle("textAlign",l);p=a.getBoundingRect();var y=m.margin;var x=t.getItemStyle(["color","opacity"]);x.fill=t.get("backgroundColor");var _=new i.Rect({shape:{x:p.x-y[3],y:p.y-y[0],width:p.width+y[1]+y[3],height:p.height+y[0]+y[2]},style:x,silent:true});i.subPixelOptimizeRect(_);a.add(_)}})},function(t,e,r){r(287);r(288);r(290);r(291);r(292);r(295);r(296);r(298);r(299)},function(t,e,r){r(19).registerSubTypeDefaulter("dataZoom",function(t){return"slider"})},function(t,e,r){var a=r(3);var i=r(78);var n=r(1);var o=r(5);var s=r(289);var l=a.each;var u=o.eachAxisDim;var h=n.extendComponentModel({type:"dataZoom",dependencies:["xAxis","yAxis","zAxis","radiusAxis","angleAxis","series"],defaultOption:{zlevel:0,z:4,orient:null,xAxisIndex:null,yAxisIndex:null,angleAxisIndex:null,radiusAxisIndex:null,filterMode:"filter",throttle:100,start:0,end:100,startValue:null,endValue:null},init:function(t,e,r){this._dataIntervalByAxis={};this._dataInfo={};this._axisProxies={};this.textStyleModel;var a=c(t);this.mergeDefaultAndTheme(t,r);this.doInit(a)},mergeOption:function(t){var e=c(t);a.merge(this.option,t,true);this.doInit(e)},doInit:function(t){var e=this.option;if(!i.canvasSupported){e.realtime=false}v("start","startValue",t,e);v("end","endValue",t,e);this.textStyleModel=this.getModel("textStyle");this._resetTarget();this._giveAxisProxies()},_giveAxisProxies:function(){var t=this._axisProxies;this.eachTargetAxis(function(e,r,a,i){var n=this.dependentModels[e.axis][r];var o=n.__dzAxisProxy||(n.__dzAxisProxy=new s(e.name,r,this,i));t[e.name+"_"+r]=o},this)},_resetTarget:function(){var t=this.option;var e=this._judgeAutoMode();u(function(e){var r=e.axisIndex;t[r]=o.normalizeToArray(t[r])},this);if(e==="axisIndex"){this._autoSetAxisIndex()}else if(e==="orient"){this._autoSetOrient()}},_judgeAutoMode:function(){var t=this.option;var e=false;u(function(r){if(t[r.axisIndex]!=null){e=true}},this);var r=t.orient;if(r==null&&e){return"orient"}else if(!e){if(r==null){t.orient="horizontal"}return"axisIndex"}},_autoSetAxisIndex:function(){var t=true;var e=this.get("orient",true);var r=this.option;if(t){var i=e==="vertical"?{dim:"y",axisIndex:"yAxisIndex",axis:"yAxis"}:{dim:"x",axisIndex:"xAxisIndex",axis:"xAxis"};if(this.dependentModels[i.axis].length){r[i.axisIndex]=[0];t=false}}if(t){u(function(e){if(!t){return}var a=[];var i=this.dependentModels[e.axis];if(i.length&&!a.length){for(var n=0,o=i.length;n<o;n++){if(i[n].get("type")==="category"){a.push(n)}}}r[e.axisIndex]=a;if(a.length){t=false}},this)}if(t){this.ecModel.eachSeries(function(t){if(this._isSeriesHasAllAxesTypeOf(t,"value")){u(function(e){var i=r[e.axisIndex];var n=t.get(e.axisIndex);if(a.indexOf(i,n)<0){i.push(n)}})}},this)}},_autoSetOrient:function(){var t;this.eachTargetAxis(function(e){!t&&(t=e.name)},this);this.option.orient=t==="y"?"vertical":"horizontal"},_isSeriesHasAllAxesTypeOf:function(t,e){var r=true;u(function(a){var i=t.get(a.axisIndex);var n=this.dependentModels[a.axis][i];if(!n||n.get("type")!==e){r=false}},this);return r},getFirstTargetAxisModel:function(){var t;u(function(e){if(t==null){var r=this.get(e.axisIndex);if(r.length){t=this.dependentModels[e.axis][r[0]]}}},this);return t},eachTargetAxis:function(t,e){var r=this.ecModel;u(function(a){l(this.get(a.axisIndex),function(i){t.call(e,a,i,this,r)},this)},this)},getAxisProxy:function(t,e){return this._axisProxies[t+"_"+e]},setRawRange:function(t){l(["start","end","startValue","endValue"],function(e){this.option[e]=t[e]},this)},getPercentRange:function(){var t=this.findRepresentativeAxisProxy();if(t){return t.getDataPercentWindow()}},getValueRange:function(t,e){if(t==null&&e==null){var r=this.findRepresentativeAxisProxy();if(r){return r.getDataValueWindow()}}else{return this.getAxisProxy(t,e).getDataValueWindow()}},findRepresentativeAxisProxy:function(){var t=this._axisProxies;for(var e in t){if(t.hasOwnProperty(e)&&t[e].hostedBy(this)){return t[e]}}for(var e in t){if(t.hasOwnProperty(e)&&!t[e].hostedBy(this)){return t[e]}}}});function c(t){var e={};l(["start","end","startValue","endValue"],function(r){e[r]=t[r]});return e}function v(t,e,r,a){if(r[e]!=null&&r[t]==null){a[t]=null}}t.exports=h},function(t,e,r){var a=r(3);var i=r(7);var n=a.each;var o=i.asc;var s=function(t,e,r,a){this._dimName=t;this._axisIndex=e;this._valueWindow;this._percentWindow;this._dataExtent;this.ecModel=a;this._dataZoomModel=r};s.prototype={constructor:s,hostedBy:function(t){return this._dataZoomModel===t},getDataExtent:function(){return this._dataExtent.slice()},getDataValueWindow:function(){return this._valueWindow.slice()},getDataPercentWindow:function(){return this._percentWindow.slice()},getTargetSeriesModels:function(){var t=[];this.ecModel.eachSeries(function(e){if(this._axisIndex===e.get(this._dimName+"AxisIndex")){t.push(e)}},this);return t},getAxisModel:function(){return this.ecModel.getComponent(this._dimName+"Axis",this._axisIndex)},getOtherAxisModel:function(){var t=this._dimName;var e=this.ecModel;var r=this.getAxisModel();var a=t==="x"||t==="y";var i;var n;if(a){n="gridIndex";i=t==="x"?"y":"x"}else{n="polarIndex";i=t==="angle"?"radius":"angle"}var o;e.eachComponent(i+"Axis",function(t){if((t.get(n)||0)===(r.get(n)||0)){o=t}});return o},reset:function(t){if(t!==this._dataZoomModel){return}var e=this._dataExtent=l(this._dimName,this.getTargetSeriesModels());var r=u(t.option,e,this);this._valueWindow=r.valueWindow;this._percentWindow=r.percentWindow;c(this)},restore:function(t){if(t!==this._dataZoomModel){return}this._valueWindow=this._percentWindow=null;c(this,true)},filterData:function(t){if(t!==this._dataZoomModel){return}var e=this._dimName;var r=this.getTargetSeriesModels();var a=t.get("filterMode");var i=this._valueWindow;var o=this.getOtherAxisModel();if(t.get("$fromToolbox")&&o&&o.get("type")==="category"){a="empty"}n(r,function(t){var r=t.getData();if(!r){return}n(t.coordDimToDataDim(e),function(e){if(a==="empty"){t.setData(r.map(e,function(t){return!s(t)?NaN:t}))}else{r.filterSelf(e,s)}})});function s(t){return t>=i[0]&&t<=i[1]}}};function l(t,e){var r=[Infinity,-Infinity];n(e,function(e){var a=e.getData();if(a){n(e.coordDimToDataDim(t),function(t){var e=a.getDataExtent(t);e[0]<r[0]&&(r[0]=e[0]);e[1]>r[1]&&(r[1]=e[1])})}},this);return r}function u(t,e,r){var a=r.getAxisModel();var s=a.axis.scale;var l=[0,100];var u=[t.start,t.end];var c=[];e=e.slice();h(e,a,s);n(["startValue","endValue"],function(e){c.push(t[e]!=null?s.parse(t[e]):null)});n([0,1],function(t){var r=c[t];var a=u[t];if(a!=null||r==null){if(a==null){a=l[t]}r=s.parse(i.linearMap(a,l,e,true))}else{a=i.linearMap(r,e,l,true)}c[t]=i.round(r);u[t]=i.round(a)});return{valueWindow:o(c),percentWindow:o(u)}}function h(t,e,r){n(["min","max"],function(a,i){var n=e.get(a,true);if(n!=null&&(n+"").toLowerCase()!=="data"+a){t[i]=r.parse(n)}});if(!e.get("scale",true)){t[0]>0&&(t[0]=0);t[1]<0&&(t[1]=0)}return t}function c(t,e){var r=t.getAxisModel();var a=t._percentWindow;var n=t._valueWindow;if(!a){return}var o=e||a[0]===0&&a[1]===100;var s=!e&&i.getPixelPrecision(n,[0,500]);var l=!e&&!(s<20&&s>=0);var u=e||o||l;r.setRange&&r.setRange(u?null:+n[0].toFixed(s),u?null:+n[1].toFixed(s))}t.exports=s},function(t,e,r){var a=r(28);t.exports=a.extend({type:"dataZoom",render:function(t,e,r,a){this.dataZoomModel=t;this.ecModel=e;this.api=r},getTargetInfo:function(){var t=this.dataZoomModel;var e=this.ecModel;var r=[];var a=[];var i=[];t.eachTargetAxis(function(t,o){var s=e.getComponent(t.axis,o);if(s){i.push(s);var l=s.get("gridIndex");var u=s.get("polarIndex");if(l!=null){var h=e.getComponent("grid",l);n(h,s,r,l)}else if(u!=null){var h=e.getComponent("polar",u);n(h,s,a,u)}}},this);function n(t,e,r,a){var i;for(var n=0;n<r.length;n++){if(r[n].model===t){i=r[n];break}}if(!i){r.push(i={model:t,axisModels:[],coordIndex:a})}i.axisModels.push(e)}return{cartesians:r,polars:a,axisModels:i}}})},function(t,e,r){var a=r(288);var i=r(21);var n=r(3);var o=a.extend({type:"dataZoom.slider",layoutMode:"box",defaultOption:{show:true,right:"ph",top:"ph",width:"ph",height:"ph",left:null,bottom:null,backgroundColor:"rgba(47,69,84,0)",dataBackgroundColor:"#ddd",fillerColor:"rgba(47,69,84,0.15)",handleColor:"rgba(148,164,165,0.95)",handleSize:10,labelPrecision:null,labelFormatter:null,showDetail:true,showDataShadow:"auto",realtime:true,zoomLock:false,textStyle:{color:"#333"}},mergeOption:function(t){o.superApply(this,"mergeOption",arguments)}});t.exports=o},function(t,e,r){var a=r(3);var i=r(42);var n=r(293);var o=r(290);var s=i.Rect;var l=r(7);var u=l.linearMap;var h=r(21);var c=r(294);var v=l.asc;var f=a.bind;var d=Math.round;var p=Math.max;var g=a.each;var m=7;var y=1;var x=30;var _="horizontal";var w="vertical";var b=5;var M=["line","bar","candlestick","scatter"];var S=o.extend({type:"dataZoom.slider",init:function(t,e){this._displayables={};this._orient;this._range;this._handleEnds;this._size;this._halfHandleSize;this._location;this._dragging;this._dataShadowInfo;this.api=e},render:function(t,e,r,a){S.superApply(this,"render",arguments);n.createOrUpdate(this,"_dispatchZoomAction",this.dataZoomModel.get("throttle"),"fixRate");this._orient=t.get("orient");this._halfHandleSize=d(t.get("handleSize")/2);if(this.dataZoomModel.get("show")===false){this.group.removeAll();return}if(!a||a.type!=="dataZoom"||a.from!==this.uid){this._buildView()}this._updateView()},remove:function(){S.superApply(this,"remove",arguments);n.clear(this,"_dispatchZoomAction")},dispose:function(){S.superApply(this,"dispose",arguments);n.clear(this,"_dispatchZoomAction")},_buildView:function(){var t=this.group;t.removeAll();this._resetLocation();this._resetInterval();var e=this._displayables.barGroup=new i.Group;this._renderBackground();this._renderDataShadow();this._renderHandle();t.add(e);this._positionGroup()},_resetLocation:function(){var t=this.dataZoomModel;var e=this.api;var r=this._findCoordRect();var i={width:e.getWidth(),height:e.getHeight()};var n=this._orient===_?{right:i.width-r.x-r.width,top:i.height-x-m,width:r.width,height:x}:{right:m,top:r.y,width:x,height:r.height};var o=h.getLayoutParams(t.option);a.each(["right","top","width","height"],function(t){if(o[t]==="ph"){o[t]=n[t]}});var s=h.getLayoutRect(o,i,t.padding);this._location={x:s.x,y:s.y};this._size=[s.width,s.height];this._orient===w&&this._size.reverse()},_positionGroup:function(){var t=this.group;var e=this._location;var r=this._orient;var a=this.dataZoomModel.getFirstTargetAxisModel();var i=a&&a.get("inverse");var n=this._displayables.barGroup;var o=(this._dataShadowInfo||{}).otherAxisInverse;n.attr(r===_&&!i?{scale:o?[1,1]:[1,-1]}:r===_&&i?{scale:o?[-1,1]:[-1,-1]}:r===w&&!i?{scale:o?[1,-1]:[1,1],rotation:Math.PI/2}:{scale:o?[-1,-1]:[-1,1],rotation:Math.PI/2});var s=t.getBoundingRect([n]);t.position[0]=e.x-s.x;t.position[1]=e.y-s.y},_getViewExtent:function(){var t=this._halfHandleSize;var e=p(this._size[0],t*4);var r=[t,e-t];return r},_renderBackground:function(){var t=this.dataZoomModel;var e=this._size;this._displayables.barGroup.add(new s({silent:true,shape:{x:0,y:0,width:e[0],height:e[1]},style:{fill:t.get("backgroundColor")}}))},_renderDataShadow:function(){var t=this._dataShadowInfo=this._prepareDataShadowInfo();if(!t){return}var e=this._size;var r=t.series;var a=r.getRawData();var n=r.getShadowDim?r.getShadowDim():t.otherDim;var o=a.getDataExtent(n);var s=(o[1]-o[0])*.3;o=[o[0]-s,o[1]+s];var l=[0,e[1]];var h=[0,e[0]];var c=[[e[0],0],[0,0]];var v=h[1]/(a.count()-1);var f=0;var d=Math.round(a.count()/e[0]);a.each([n],function(t,e){if(d>0&&e%d){f+=v;return}var r=t==null||isNaN(t)||t===""?null:u(t,o,l,true);r!=null&&c.push([f,r]);f+=v});this._displayables.barGroup.add(new i.Polyline({shape:{points:c},style:{fill:this.dataZoomModel.get("dataBackgroundColor"),lineWidth:0},silent:true,z2:-20}))},_prepareDataShadowInfo:function(){var t=this.dataZoomModel;var e=t.get("showDataShadow");if(e===false){return}var r;var i=this.ecModel;t.eachTargetAxis(function(n,o){var s=t.getAxisProxy(n.name,o).getTargetSeriesModels();a.each(s,function(t){if(r){return}if(e!==true&&a.indexOf(M,t.get("type"))<0){return}var s=I(n.name);var l=i.getComponent(n.axis,o).axis;r={thisAxis:l,series:t,thisDim:n.name,otherDim:s,otherAxisInverse:t.coordinateSystem.getOtherAxis(l).inverse}},this)},this);return r},_renderHandle:function(){var t=this._displayables;var e=t.handles=[];var r=t.handleLabels=[];var a=this._displayables.barGroup;var n=this._size;a.add(t.filler=new s({draggable:true,cursor:"move",drift:f(this._onDragMove,this,"all"),ondragend:f(this._onDragEnd,this),onmouseover:f(this._showDataInfo,this,true),onmouseout:f(this._showDataInfo,this,false),style:{fill:this.dataZoomModel.get("fillerColor"),textPosition:"inside"}}));a.add(new s(i.subPixelOptimizeRect({silent:true,shape:{x:0,y:0,width:n[0],height:n[1]},style:{stroke:this.dataZoomModel.get("dataBackgroundColor"),lineWidth:y,fill:"rgba(0,0,0,0)"}})));g([0,1],function(t){a.add(e[t]=new s({style:{fill:this.dataZoomModel.get("handleColor")},cursor:"move",draggable:true,drift:f(this._onDragMove,this,t),ondragend:f(this._onDragEnd,this),onmouseover:f(this._showDataInfo,this,true),onmouseout:f(this._showDataInfo,this,false)}));var n=this.dataZoomModel.textStyleModel;this.group.add(r[t]=new i.Text({silent:true,invisible:true,style:{x:0,y:0,text:"",textVerticalAlign:"middle",textAlign:"center",fill:n.getTextColor(),textFont:n.getFont()}}))},this)},_resetInterval:function(){var t=this._range=this.dataZoomModel.getPercentRange();var e=this._getViewExtent();this._handleEnds=[u(t[0],[0,100],e,true),u(t[1],[0,100],e,true)]},_updateInterval:function(t,e){var r=this._handleEnds;var a=this._getViewExtent();c(e,r,a,t==="all"||this.dataZoomModel.get("zoomLock")?"rigid":"cross",t);this._range=v([u(r[0],a,[0,100],true),u(r[1],a,[0,100],true)])},_updateView:function(){var t=this._displayables;var e=this._handleEnds;var r=v(e.slice());var a=this._size;var i=this._halfHandleSize;g([0,1],function(r){var n=t.handles[r];n.setShape({x:e[r]-i,y:-1,width:i*2,height:a[1]+2,r:1})},this);t.filler.setShape({x:r[0],y:0,width:r[1]-r[0],height:this._size[1]});this._updateDataInfo()},_updateDataInfo:function(){var t=this.dataZoomModel;var e=this._displayables;var r=e.handleLabels;var a=this._orient;var n=["",""];if(t.get("showDetail")){var o;var s;t.eachTargetAxis(function(e,r){if(!o){o=t.getAxisProxy(e.name,r).getDataValueWindow();s=this.ecModel.getComponent(e.axis,r).axis}},this);if(o){n=[this._formatLabel(o[0],s),this._formatLabel(o[1],s)]}}var l=v(this._handleEnds.slice());u.call(this,0);u.call(this,1);function u(t){var o=i.getTransform(e.handles[t],this.group);var s=i.transformDirection(t===0?"right":"left",o);var u=this._halfHandleSize+b;var h=i.applyTransform([l[t]+(t===0?-u:u),this._size[1]/2],o);r[t].setStyle({x:h[0],y:h[1],textVerticalAlign:a===_?"middle":s,textAlign:a===_?s:"center",text:n[t]})}},_formatLabel:function(t,e){var r=this.dataZoomModel;var i=r.get("labelFormatter");if(a.isFunction(i)){return i(t)}var n=r.get("labelPrecision");if(n==null||n==="auto"){n=e.getPixelPrecision()}t=t==null&&isNaN(t)?"":e.type==="category"||e.type==="time"?e.scale.getLabel(Math.round(t)):t.toFixed(Math.min(n,20));if(a.isString(i)){t=i.replace("{value}",t)}return t},_showDataInfo:function(t){t=this._dragging||t;var e=this._displayables.handleLabels;e[0].attr("invisible",!t);e[1].attr("invisible",!t)},_onDragMove:function(t,e,r){this._dragging=true;var a=this._applyBarTransform([e,r],true);this._updateInterval(t,a[0]);this._updateView();if(this.dataZoomModel.get("realtime")){this._dispatchZoomAction()}},_onDragEnd:function(){this._dragging=false;this._showDataInfo(false);this._dispatchZoomAction()},_dispatchZoomAction:function(){var t=this._range;this.api.dispatchAction({type:"dataZoom",from:this.uid,dataZoomId:this.dataZoomModel.id,start:t[0],end:t[1]})},_applyBarTransform:function(t,e){var r=this._displayables.barGroup.getLocalTransform();return i.applyTransform(t,r,e)},_findCoordRect:function(){var t=this.getTargetInfo();var e;if(t.cartesians.length){e=t.cartesians[0].model.coordinateSystem.getRect()}else{var r=this.api.getWidth();var a=this.api.getHeight();e={x:r*.2,y:a*.2,width:r*.6,height:a*.6}}return e}});function I(t){return t==="x"?"y":"x"}t.exports=S},function(t,e){var r={};var a="\0__throttleOriginMethod";var i="\0__throttleRate";r.throttle=function(t,e,r,a){var i=(new Date).getTime();var n=0;var o=0;var s=null;var l;var u;var h;var c=typeof t==="function";e=e||0;if(c){return d()}else{var v=[];for(var f=0;f<t.length;f++){v[f]=d(f)}return v}function d(v){function f(){o=(new Date).getTime();s=null;(c?t:t[v]).apply(u,h||[])}var d=function(){i=(new Date).getTime();u=this;h=arguments;l=i-(a?n:o)-e;clearTimeout(s);if(a){if(r){s=setTimeout(f,e)}else if(l>=0){f()}}else{if(l>=0){f()}else if(r){s=setTimeout(f,-l)}}n=i};d.clear=function(){if(s){clearTimeout(s);s=null}};return d}};r.fixRate=function(t,e){return e!=null?r.throttle(t,e,true,false):t};r.debounce=function(t,e){return e!=null?r.throttle(t,e,true,true):t};r.createOrUpdate=function(t,e,n,o){var s=t[e];if(!s||n==null||!o){return}var l=s[a]||s;var u=s[i];if(u!==n){s=t[e]=r[o](l,n);s[a]=l;s[i]=n}};r.clear=function(t,e){var r=t[e];if(r&&r[a]){t[e]=r[a]}};t.exports=r},function(t,e){t.exports=function(t,e,r,a,i){if(!t){return e}if(a==="rigid"){t=n(t,e,r);e[0]+=t;e[1]+=t}else{t=n(t,e[i],r);e[i]+=t;if(a==="push"&&e[0]>e[1]){e[1-i]=e[i]}}return e;function n(t,e,r){var a=!e.length?[e,e]:e.slice();e[0]>e[1]&&a.reverse();if(t<0&&a[0]+t<r[0]){t=r[0]-a[0]}if(t>0&&a[1]+t>r[1]){t=r[1]-a[1]}return t}}},function(t,e,r){t.exports=r(288).extend({type:"dataZoom.inside",defaultOption:{zoomLock:false}})},function(t,e,r){var a=r(290);var i=r(3);var n=r(294);var o=r(297);var s=i.bind;var l=a.extend({type:"dataZoom.inside",init:function(t,e){this._range},render:function(t,e,r,a){l.superApply(this,"render",arguments);if(o.shouldRecordRange(a,t.id)){this._range=t.getPercentRange()}var n=this.getTargetInfo().cartesians;var u=i.map(n,function(t){return o.generateCoordId(t.model)});i.each(n,function(e){var a=e.model;o.register(r,{coordId:o.generateCoordId(a),allCoordIds:u,coordinateSystem:a.coordinateSystem,dataZoomId:t.id,throttleRage:t.get("throttle",true),panGetRange:s(this._onPan,this,e),zoomGetRange:s(this._onZoom,this,e)})},this)},remove:function(){o.unregister(this.api,this.dataZoomModel.id);l.superApply(this,"remove",arguments);this._range=null},dispose:function(){o.unregister(this.api,this.dataZoomModel.id);l.superApply(this,"dispose",arguments);this._range=null},_onPan:function(t,e,r,a){return this._range=u([r,a],this._range,e,t)},_onZoom:function(t,e,r,a,i){var n=this.dataZoomModel;if(n.option.zoomLock){return this._range}return this._range=h(1/r,[a,i],this._range,e,t,n)}});function u(t,e,r,a){e=e.slice();var i=a.axisModels[0];if(!i){return}var o=c(t,i,r);var s=o.signal*(e[1]-e[0])*o.pixel/o.pixelLength;n(s,e,[0,100],"rigid");return e}function h(t,e,r,a,i,n){r=r.slice();var o=i.axisModels[0];if(!o){return}var s=c(e,o,a);var l=s.pixel-s.pixelStart;var u=l/s.pixelLength*(r[1]-r[0])+r[0];t=Math.max(t,0);r[0]=(r[0]-u)*t+u;r[1]=(r[1]-u)*t+u;return v(r)}function c(t,e,r){var a=e.axis;var i=r.rect;var n={};if(a.dim==="x"){n.pixel=t[0];n.pixelLength=i.width;n.pixelStart=i.x;n.signal=a.inverse?1:-1}else{n.pixel=t[1];n.pixelLength=i.height;n.pixelStart=i.y;n.signal=a.inverse?-1:1}return n}function v(t){var e=[0,100];!(t[0]<=e[1])&&(t[0]=e[1]);!(t[1]<=e[1])&&(t[1]=e[1]);!(t[0]>=e[0])&&(t[0]=e[0]);!(t[1]>=e[0])&&(t[1]=e[0]);return t}t.exports=l},function(t,e,r){var a=r(3);var i=r(159);var n=r(293);var o=a.curry;var s="\0_ec_dataZoom_roams";var l={register:function(t,e){var r=u(t);var i=e.dataZoomId;var o=e.coordId;a.each(r,function(t,r){var n=t.dataZoomInfos;if(n[i]&&a.indexOf(e.allCoordIds,o)<0){delete n[i];t.count--}});c(r);var s=r[o];if(!s){s=r[o]={coordId:o,dataZoomInfos:{},count:0};s.controller=h(t,e,s);s.dispatchAction=a.curry(p,t)}s.controller.rect=e.coordinateSystem.getRect().clone();n.createOrUpdate(s,"dispatchAction",e.throttleRate,"fixRate");!s.dataZoomInfos[i]&&s.count++;s.dataZoomInfos[i]=e},unregister:function(t,e){var r=u(t);a.each(r,function(t){var r=t.dataZoomInfos;if(r[e]){delete r[e];t.count--}});c(r)},shouldRecordRange:function(t,e){if(t&&t.type==="dataZoom"&&t.batch){for(var r=0,a=t.batch.length;r<a;r++){if(t.batch[r].dataZoomId===e){return false}}}return true},generateCoordId:function(t){return t.type+"\0_"+t.id}};function u(t){var e=t.getZr();return e[s]||(e[s]={})}function h(t,e,r){var a=new i(t.getZr());a.enable();a.on("pan",o(v,r));a.on("zoom",o(f,r));return a}function c(t){a.each(t,function(e,r){if(!e.count){e.controller.off("pan").off("zoom");delete t[r]}})}function v(t,e,r){d(t,function(a){return a.panGetRange(t.controller,e,r)})}function f(t,e,r,a){d(t,function(i){return i.zoomGetRange(t.controller,e,r,a)})}function d(t,e){var r=[];a.each(t.dataZoomInfos,function(t){var a=e(t);a&&r.push({dataZoomId:t.dataZoomId,start:a[0],end:a[1]})});t.dispatchAction(r)}function p(t,e){t.dispatchAction({type:"dataZoom",batch:e})}t.exports=l},function(t,e,r){var a=r(1);a.registerProcessor("filter",function(t,e){t.eachComponent("dataZoom",function(t){t.eachTargetAxis(i);t.eachTargetAxis(n)});t.eachComponent("dataZoom",function(t){var e=t.findRepresentativeAxisProxy();var r=e.getDataPercentWindow();var a=e.getDataValueWindow();t.setRawRange({start:r[0],end:r[1],startValue:a[0],endValue:a[1]})})});function i(t,e,r){r.getAxisProxy(t.name,e).reset(r)}function n(t,e,r){r.getAxisProxy(t.name,e).filterData(r)}},function(t,e,r){var a=r(3);var i=r(5);var n=r(1);n.registerAction("dataZoom",function(t,e){var r=i.createLinkedNodesFinder(a.bind(e.eachComponent,e,"dataZoom"),i.eachAxisDim,function(t,e){return t.get(e.axisIndex)});var n=[];e.eachComponent({mainType:"dataZoom",query:t},function(t,e){n.push.apply(n,r(t).nodes)});a.each(n,function(e,r){e.setRawRange({start:t.start,end:t.end,startValue:t.startValue,endValue:t.endValue})})})},function(t,e,r){r(301);r(312)},function(t,e,r){r(1).registerPreprocessor(r(302));r(303);r(304);r(305);r(308);r(311)},function(t,e,r){var a=r(3);var i=a.each;t.exports=function(t){var e=t&&t.visualMap;if(!a.isArray(e)){e=e?[e]:[]}i(e,function(t){if(!t){return}if(n(t,"splitList")&&!n(t,"pieces")){t.pieces=t.splitList;delete t.splitList}var e=t.pieces;if(e&&a.isArray(e)){i(e,function(t){if(a.isObject(t)){if(n(t,"start")&&!n(t,"min")){t.min=t.start}if(n(t,"end")&&!n(t,"max")){t.max=t.end}}})}})};function n(t,e){return t&&t.hasOwnProperty&&t.hasOwnProperty(e)}},function(t,e,r){r(19).registerSubTypeDefaulter("visualMap",function(t){return!t.categories&&(!(t.pieces?t.pieces.length>0:t.splitNumber>0)||t.calculable)?"continuous":"piecewise"})},function(t,e,r){var a=r(1);var i=r(187);var n=r(3);a.registerVisualCoding("component",function(t){t.eachComponent("visualMap",function(e){o(e,t)})});function o(t,e){var r=t.targetVisuals;var a={};n.each(["inRange","outOfRange"],function(t){var e=i.prepareVisualTypes(r[t]);a[t]=e});t.eachTargetSeries(function(e){var i=e.getData();var n=t.getDataDimension(i);var o;function s(t){return i.getItemVisual(o,t)}function l(t,e){i.setItemVisual(o,t,e)}i.each([n],function(e,i){o=i;var n=t.getValueState(e);var u=r[n];var h=a[n];for(var c=0,v=h.length;c<v;c++){var f=h[c];u[f]&&u[f].applyVisual(e,s,l)}})})}},function(t,e,r){var a=r(306);var i=r(3);var n=r(7);var o=[20,140];var s=a.extend({type:"visualMap.continuous",defaultOption:{handlePosition:"auto",calculable:false,range:[-Infinity,Infinity],hoverLink:true,realtime:true,itemWidth:null,itemHeight:null},doMergeOption:function(t,e){s.superApply(this,"doMergeOption",arguments);this.resetTargetSeries(t,e);this.resetExtent();this.resetVisual(function(t){t.mappingMethod="linear"});this._resetRange()},resetItemSize:function(){a.prototype.resetItemSize.apply(this,arguments);var t=this.itemSize;this._orient==="horizontal"&&t.reverse();(t[0]==null||isNaN(t[0]))&&(t[0]=o[0]);(t[1]==null||isNaN(t[1]))&&(t[1]=o[1])},_resetRange:function(){var t=this.getExtent();var e=this.option.range;if(e[0]>e[1]){e.reverse()}e[0]=Math.max(e[0],t[0]);e[1]=Math.min(e[1],t[1])},completeVisualOption:function(){a.prototype.completeVisualOption.apply(this,arguments);i.each(this.stateList,function(t){var e=this.option.controller[t].symbolSize;if(e&&e[0]!==e[1]){e[0]=0}},this)},setSelected:function(t){this.option.range=t.slice();this._resetRange()},getSelected:function(){var t=this.getExtent();var e=n.asc((this.get("range")||[]).slice());e[0]>t[1]&&(e[0]=t[1]);e[1]>t[1]&&(e[1]=t[1]);e[0]<t[0]&&(e[0]=t[0]);e[1]<t[0]&&(e[1]=t[0]);return e},getValueState:function(t){var e=this.option.range;var r=this.getExtent();return(e[0]<=r[0]||e[0]<=t)&&(e[1]>=r[1]||t<=e[1])?"inRange":"outOfRange"}});t.exports=s},function(t,e,r){var a=r(3);var i=r(78);var n=r(1);var o=r(5);var s=r(307);var l=r(187);var u=l.mapVisual;var h=l.eachVisual;var c=r(7);var v=a.isArray;var f=a.each;var d=c.asc;var p=c.linearMap;var g=n.extendComponentModel({type:"visualMap",dependencies:["series"],dataBound:[-Infinity,Infinity],stateList:["inRange","outOfRange"],layoutMode:{type:"box",ignoreSize:true},defaultOption:{show:true,zlevel:0,z:4,min:0,max:200,dimension:null,inRange:null,outOfRange:null,left:0,right:null,top:null,bottom:0,itemWidth:null,itemHeight:null,inverse:false,orient:"vertical",seriesIndex:null,backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",contentColor:"#5793f3",inactiveColor:"#aaa",borderWidth:0,padding:5,textGap:10,precision:0,color:["#bf444c","#d88273","#f6efa6"],formatter:null,text:null,textStyle:{color:"#333"}},init:function(t,e,r){this._autoSeriesIndex=false;this._dataExtent;this.controllerVisuals={};this.targetVisuals={};this.textStyleModel;this.itemSize;this.mergeDefaultAndTheme(t,r);this.doMergeOption({},true)},mergeOption:function(t){g.superApply(this,"mergeOption",arguments);this.doMergeOption(t,false)},doMergeOption:function(t,e){var r=this.option;!e&&m(r,t);if(!i.canvasSupported){r.realtime=false}this.textStyleModel=this.getModel("textStyle");this.resetItemSize();this.completeVisualOption()},formatValueText:function(t,e){var r=this.option;var i=r.precision;var n=this.dataBound;var o=r.formatter;var s;var l;if(a.isArray(t)){t=t.slice();s=true}l=e?t:s?[u(t[0]),u(t[1])]:u(t);if(a.isString(o)){return o.replace("{value}",s?l[0]:l).replace("{value2}",s?l[1]:l)}else if(a.isFunction(o)){return s?o(t[0],t[1]):o(t)}if(s){if(t[0]===n[0]){return"< "+l[1]}else if(t[1]===n[1]){return"> "+l[0]}else{return l[0]+" - "+l[1]}}else{return l}function u(t){return t===n[0]?"min":t===n[1]?"max":(+t).toFixed(i)}},resetTargetSeries:function(t,e){var r=this.option;var a=this._autoSeriesIndex=(e?r:t).seriesIndex==null;r.seriesIndex=a?[]:o.normalizeToArray(r.seriesIndex);a&&this.ecModel.eachSeries(function(t,e){var a=t.getData();if(a.type==="list"){r.seriesIndex.push(e)}})},resetExtent:function(){var t=this.option;var e=d([t.min,t.max]);this._dataExtent=e},getDataDimension:function(t){var e=this.option.dimension;return e!=null?e:t.dimensions.length-1},getExtent:function(){return this._dataExtent.slice()},resetVisual:function(t){var e=this.getExtent();r.call(this,"controller",this.controllerVisuals);r.call(this,"target",this.targetVisuals);function r(r,a){f(this.stateList,function(i){var n=a[i]||(a[i]={});var o=this.option[r][i]||{};f(o,function(r,a){if(!l.isValidType(a)){return}var o={type:a,dataExtent:e,visual:r};t&&t.call(this,o,i);n[a]=new l(o)},this)},this)}},completeVisualOption:function(){var t=this.option;var e={inRange:t.inRange,outOfRange:t.outOfRange};var r=t.target||(t.target={});var i=t.controller||(t.controller={});a.merge(r,e);a.merge(i,e);var n=this.isCategory();o.call(this,r);o.call(this,i);c.call(this,r,"inRange","outOfRange");c.call(this,r,"outOfRange","inRange");d.call(this,i);function o(e){if(v(t.color)&&!e.inRange){e.inRange={color:t.color.slice().reverse()}}f(this.stateList,function(t){var r=e[t];if(a.isString(r)){var i=s.get(r,"active",n);if(i){e[t]={};e[t][r]=i}else{delete e[t]}}},this)}function c(t,e,r){var a=t[e];var i=t[r];if(a&&!i){i=t[r]={};f(a,function(t,e){var r=s.get(e,"inactive",n);if(l.isValidType(e)&&r){i[e]=r}})}}function d(t){var e=(t.inRange||{}).symbol||(t.outOfRange||{}).symbol;var r=(t.inRange||{}).symbolSize||(t.outOfRange||{}).symbolSize;var i=this.get("inactiveColor");f(this.stateList,function(o){var s=this.itemSize;var l=t[o];if(!l){l=t[o]={color:n?i:[i]}}if(!l.symbol){l.symbol=e&&a.clone(e)||(n?"roundRect":["roundRect"])}if(!l.symbolSize){l.symbolSize=r&&a.clone(r)||(n?s[0]:[s[0],s[0]])}l.symbol=u(l.symbol,function(t){return t==="none"||t==="square"?"roundRect":t});var c=l.symbolSize;if(c){var v=-Infinity;h(c,function(t){t>v&&(v=t)});l.symbolSize=u(c,function(t){return p(t,[0,v],[0,s[0]],true)})}},this)}},eachTargetSeries:function(t,e){a.each(this.option.seriesIndex,function(r){t.call(e,this.ecModel.getSeriesByIndex(r))},this)},isCategory:function(){return!!this.option.categories},resetItemSize:function(){this.itemSize=[parseFloat(this.get("itemWidth")),parseFloat(this.get("itemHeight"))]},setSelected:a.noop,getValueState:a.noop});function m(t,e){
a.each(["inRange","outOfRange","target","controller","color"],function(r){if(e.hasOwnProperty(r)){t[r]=a.clone(e[r])}else{delete t[r]}})}t.exports=g},function(t,e,r){var a=r(3);var i={get:function(t,e,r){var i=a.clone((n[t]||{})[e]);return r?a.isArray(i)?i[i.length-1]:i:i}};var n={color:{active:["#006edd","#e0ffff"],inactive:["rgba(0,0,0,0)"]},colorHue:{active:[0,360],inactive:[0,0]},colorSaturation:{active:[.3,1],inactive:[0,0]},colorLightness:{active:[.9,.5],inactive:[0,0]},colorAlpha:{active:[.3,1],inactive:[0,0]},symbol:{active:["circle","roundRect","diamond"],inactive:["none"]},symbolSize:{active:[10,50],inactive:[0,0]}};t.exports=i},function(t,e,r){var a=r(309);var i=r(42);var n=r(3);var o=r(7);var s=r(294);var l=o.linearMap;var u=r(75);var h=r(310);var c=n.each;var v=a.extend({type:"visualMap.continuous",init:function(){a.prototype.init.apply(this,arguments);this._shapes={};this._dataInterval=[];this._handleEnds=[];this._orient;this._useHandle},doRender:function(t,e,r,a){if(!a||a.type!=="selectDataRange"||a.from!==this.uid){this._buildView()}else{this._updateView()}},_buildView:function(){this.group.removeAll();var t=this.visualMapModel;var e=this.group;this._orient=t.get("orient");this._useHandle=t.get("calculable");this._resetInterval();this._renderBar(e);var r=t.get("text");this._renderEndsText(e,r,0);this._renderEndsText(e,r,1);this._updateView(true);this.renderBackground(e);this._updateView();this.positionGroup(e)},_renderEndsText:function(t,e,r){if(!e){return}var a=e[1-r];a=a!=null?a+"":"";var n=this.visualMapModel;var o=n.get("textGap");var s=n.itemSize;var l=this._shapes.barGroup;var u=this._applyTransform([s[0]/2,r===0?-o:s[1]+o],l);var h=this._applyTransform(r===0?"bottom":"top",l);var c=this._orient;var v=this.visualMapModel.textStyleModel;this.group.add(new i.Text({style:{x:u[0],y:u[1],textVerticalAlign:c==="horizontal"?"middle":h,textAlign:c==="horizontal"?h:"center",text:a,textFont:v.getFont(),fill:v.getTextColor()}}))},_renderBar:function(t){var e=this.visualMapModel;var r=this._shapes;var a=e.itemSize;var i=this._orient;var o=this._useHandle;var s=h.getItemAlign(e,this.api,a);var l=r.barGroup=this._createBarGroup(s);l.add(r.outOfRange=f());l.add(r.inRange=f(null,n.bind(this._modifyHandle,this,"all"),o?"move":null));var u=e.textStyleModel.getTextRect("国");var c=Math.max(u.width,u.height);if(o){r.handleGroups=[];r.handleThumbs=[];r.handleLabels=[];r.handleLabelPoints=[];this._createHandle(l,0,a,c,i,s);this._createHandle(l,1,a,c,i,s)}t.add(l)},_createHandle:function(t,e,r,a,o){var s=new i.Group({position:[r[0],0]});var l=f(d(e,a),n.bind(this._modifyHandle,this,e),"move");s.add(l);var u={x:o==="horizontal"?a/2:a*1.5,y:o==="horizontal"?e===0?-(a*1.5):a*1.5:e===0?-a/2:a/2};var h=this.visualMapModel.textStyleModel;var c=new i.Text({silent:true,style:{x:0,y:0,text:"",textVerticalAlign:"middle",textFont:h.getFont(),fill:h.getTextColor()}});this.group.add(c);var v=this._shapes;v.handleThumbs[e]=l;v.handleGroups[e]=s;v.handleLabelPoints[e]=u;v.handleLabels[e]=c;t.add(s)},_modifyHandle:function(t,e,r){if(!this._useHandle){return}var a=this._applyTransform([e,r],this._shapes.barGroup,true);this._updateInterval(t,a[1]);this.api.dispatchAction({type:"selectDataRange",from:this.uid,visualMapId:this.visualMapModel.id,selected:this._dataInterval.slice()})},_resetInterval:function(){var t=this.visualMapModel;var e=this._dataInterval=t.getSelected();var r=t.getExtent();var a=[0,t.itemSize[1]];this._handleEnds=[l(e[0],r,a,true),l(e[1],r,a,true)]},_updateInterval:function(t,e){e=e||0;var r=this.visualMapModel;var a=this._handleEnds;s(e,a,[0,r.itemSize[1]],t==="all"?"rigid":"push",t);var i=r.getExtent();var n=[0,r.itemSize[1]];this._dataInterval=[l(a[0],n,i,true),l(a[1],n,i,true)]},_updateView:function(t){var e=this.visualMapModel;var r=e.getExtent();var a=this._shapes;var i=this._dataInterval;var n=[0,e.itemSize[1]];var o=t?n:this._handleEnds;var s=this._createBarVisual(i,r,o,"inRange");var l=this._createBarVisual(r,r,n,"outOfRange");a.inRange.setStyle("fill",s.barColor).setShape("points",s.barPoints);a.outOfRange.setStyle("fill",l.barColor).setShape("points",l.barPoints);this._useHandle&&c([0,1],function(t){a.handleThumbs[t].setStyle("fill",s.handlesColor[t]);a.handleLabels[t].setStyle({text:e.formatValueText(i[t]),textAlign:this._applyTransform(this._orient==="horizontal"?t===0?"bottom":"top":"left",a.barGroup)})},this);this._updateHandlePosition(o)},_createBarVisual:function(t,e,r,a){var i=this.getControllerVisual(t,a,"color").color;var n=[this.getControllerVisual(t[0],a,"symbolSize").symbolSize,this.getControllerVisual(t[1],a,"symbolSize").symbolSize];var o=this._createBarPoints(r,n);return{barColor:new u(0,0,1,1,i),barPoints:o,handlesColor:[i[0].color,i[i.length-1].color]}},_createBarPoints:function(t,e){var r=this.visualMapModel.itemSize;return[[r[0]-e[0],t[0]],[r[0],t[0]],[r[0],t[1]],[r[0]-e[1],t[1]]]},_createBarGroup:function(t){var e=this._orient;var r=this.visualMapModel.get("inverse");return new i.Group(e==="horizontal"&&!r?{scale:t==="bottom"?[1,1]:[-1,1],rotation:Math.PI/2}:e==="horizontal"&&r?{scale:t==="bottom"?[-1,1]:[1,1],rotation:-Math.PI/2}:e==="vertical"&&!r?{scale:t==="left"?[1,-1]:[-1,-1]}:{scale:t==="left"?[1,1]:[-1,1]})},_updateHandlePosition:function(t){if(!this._useHandle){return}var e=this._shapes;c([0,1],function(r){var a=e.handleGroups[r];a.position[1]=t[r];var n=e.handleLabelPoints[r];var o=i.applyTransform([n.x,n.y],i.getTransform(a,this.group));e.handleLabels[r].setStyle({x:o[0],y:o[1]})},this)},_applyTransform:function(t,e,r){var a=i.getTransform(e,this.group);return i[n.isArray(t)?"applyTransform":"transformDirection"](t,a,r)}});function f(t,e,r){return new i.Polygon({shape:{points:t},draggable:!!e,cursor:r,drift:e})}function d(t,e){return t===0?[[0,0],[e,0],[e,-e]]:[[0,0],[e,0],[e,e]]}t.exports=v},function(t,e,r){var a=r(1);var i=r(3);var n=r(42);var o=r(6);var s=r(21);var l=r(187);t.exports=a.extendComponentView({type:"visualMap",autoPositionValues:{left:1,right:1,top:1,bottom:1},init:function(t,e){this.ecModel=t;this.api=e;this.visualMapModel;this._updatableShapes={}},render:function(t,e,r,a){this.visualMapModel=t;if(t.get("show")===false){this.group.removeAll();return}this.doRender.apply(this,arguments)},renderBackground:function(t){var e=this.visualMapModel;var r=o.normalizeCssArray(e.get("padding")||0);var a=t.getBoundingRect();t.add(new n.Rect({z2:-1,silent:true,shape:{x:a.x-r[3],y:a.y-r[0],width:a.width+r[3]+r[1],height:a.height+r[0]+r[2]},style:{fill:e.get("backgroundColor"),stroke:e.get("borderColor"),lineWidth:e.get("borderWidth")}}))},getControllerVisual:function(t,e,r){var a=this.visualMapModel;var n=i.isArray(t);if(n&&(!e||r!=="color")){throw new Error(t)}var o=a.controllerVisuals[e||a.getValueState(t)];var s=a.get("contentColor");var u={symbol:a.get("itemSymbol"),color:n?[{color:s,offset:0},{color:s,offset:1}]:s};function h(t){return u[t]}function c(t,e){u[t]=e}var v=l.prepareVisualTypes(o);i.each(v,function(e){var a=o[e];if(!r||l.isInVisualCluster(e,r)){a&&a.applyVisual(t,h,c)}});return u},positionGroup:function(t){var e=this.visualMapModel;var r=this.api;s.positionGroup(t,e.getBoxLayoutParams(),{width:r.getWidth(),height:r.getHeight()})},doRender:i.noop})},function(t,e,r){var a=r(21);var i={getItemAlign:function(t,e,r){var i=t.option;var n=i.align;if(n!=null&&n!=="auto"){return n}var o={width:e.getWidth(),height:e.getHeight()};var s=i.orient==="horizontal"?1:0;var l=[["left","right","width"],["top","bottom","height"]];var u=l[s];var h=[0,null,10];var c={};for(var v=0;v<3;v++){c[l[1-s][v]]=h[v];c[u[v]]=v===2?r[0]:i[u[v]]}var f=[["x","width",3],["y","height",0]][s];var d=a.getLayoutRect(c,o,i.padding);return u[(d.margin[f[2]]||0)+d[f[0]]+d[f[1]]*.5<o[f[1]]*.5?0:1]}};t.exports=i},function(t,e,r){var a=r(1);var i={type:"selectDataRange",event:"dataRangeSelected",update:"update"};a.registerAction(i,function(t,e){e.eachComponent({mainType:"visualMap",query:t},function(e){e.setSelected(t.selected)})})},function(t,e,r){r(1).registerPreprocessor(r(302));r(303);r(304);r(313);r(314);r(311)},function(t,e,r){var a=r(306);var i=r(3);var n=r(187);var o=a.extend({type:"visualMap.piecewise",defaultOption:{selected:null,align:"auto",itemWidth:20,itemHeight:14,itemSymbol:"roundRect",pieceList:null,categories:null,splitNumber:5,selectedMode:"multiple",itemGap:10},doMergeOption:function(t,e){o.superApply(this,"doMergeOption",arguments);this._pieceList=[];this.resetTargetSeries(t,e);this.resetExtent();var r=this._mode=this._decideMode();s[this._mode].call(this);this._resetSelected(t,e);var a=this.option.categories;this.resetVisual(function(t,e){if(r==="categories"){t.mappingMethod="category";t.categories=i.clone(a)}else{t.mappingMethod="piecewise";t.pieceList=i.map(this._pieceList,function(t){var t=i.clone(t);if(e!=="inRange"){t.visual=null}return t})}})},_resetSelected:function(t,e){var r=this.option;var a=this._pieceList;var n=(e?r:t).selected||{};r.selected=n;i.each(a,function(t,e){var r=this.getSelectedMapKey(t);if(!(r in n)){n[r]=true}},this);if(r.selectedMode==="single"){var o=false;i.each(a,function(t,e){var r=this.getSelectedMapKey(t);if(n[r]){o?n[r]=false:o=true}},this)}},getSelectedMapKey:function(t){return this._mode==="categories"?t.value+"":t.index+""},getPieceList:function(){return this._pieceList},_decideMode:function(){var t=this.option;return t.pieces&&t.pieces.length>0?"pieces":this.option.categories?"categories":"splitNumber"},setSelected:function(t){this.option.selected=i.clone(t)},getValueState:function(t){var e=this._pieceList;var r=n.findPieceIndex(t,e);return r!=null?this.option.selected[this.getSelectedMapKey(e[r])]?"inRange":"outOfRange":"outOfRange"}});var s={splitNumber:function(){var t=this.option;var e=t.precision;var r=this.getExtent();var a=t.splitNumber;a=Math.max(parseInt(a,10),1);t.splitNumber=a;var i=(r[1]-r[0])/a;while(+i.toFixed(e)!==i&&e<5){e++}t.precision=e;i=+i.toFixed(e);for(var n=0,o=r[0];n<a;n++,o+=i){var s=n===a-1?r[1]:o+i;this._pieceList.push({text:this.formatValueText([o,s]),index:n,interval:[o,s]})}},categories:function(){var t=this.option;i.each(t.categories,function(t){this._pieceList.push({text:this.formatValueText(t,true),value:t})},this);l(t,this._pieceList)},pieces:function(){var t=this.option;i.each(t.pieces,function(t,e){if(!i.isObject(t)){t={value:t}}var r={text:"",index:e};var a;if(t.label!=null){r.text=t.label;a=true}if(t.hasOwnProperty("value")){r.value=t.value;if(!a){r.text=this.formatValueText(r.value)}}else{var o=t.min;var s=t.max;o==null&&(o=-Infinity);s==null&&(s=Infinity);if(o===s){r.value=o}r.interval=[o,s];if(!a){r.text=this.formatValueText([o,s])}}r.visual=n.retrieveVisuals(t);this._pieceList.push(r)},this);l(t,this._pieceList)}};function l(t,e){var r=t.inverse;if(t.orient==="vertical"?!r:r){e.reverse()}}t.exports=o},function(t,e,r){var a=r(309);var i=r(3);var n=r(42);var o=r(100);var s=r(21);var l=r(310);var u=a.extend({type:"visualMap.piecewise",doRender:function(){var t=this.group;t.removeAll();var e=this.visualMapModel;var r=e.get("textGap");var a=e.textStyleModel;var o=a.getFont();var l=a.getTextColor();var u=this._getItemAlign();var h=e.itemSize;var c=this._getViewData();var v=!c.endsText;var f=!v;f&&this._renderEndsText(t,c.endsText[0],h);i.each(c.pieceList,d,this);f&&this._renderEndsText(t,c.endsText[1],h);s.box(e.get("orient"),t,e.get("itemGap"));this.renderBackground(t);this.positionGroup(t);function d(e){var a=new n.Group;a.onclick=i.bind(this._onItemClick,this,e.piece);this._createItemSymbol(a,e.piece,[0,0,h[0],h[1]]);if(v){a.add(new n.Text({style:{x:u==="right"?-r:h[0]+r,y:h[1]/2,text:e.piece.text,textVerticalAlign:"middle",textAlign:u,textFont:o,fill:l}}))}t.add(a)}},_getItemAlign:function(){var t=this.visualMapModel;var e=t.option;if(e.orient==="vertical"){return l.getItemAlign(t,this.api,t.itemSize)}else{var r=e.align;if(!r||r==="auto"){r="left"}return r}},_renderEndsText:function(t,e,r){if(!e){return}var a=new n.Group;var i=this.visualMapModel.textStyleModel;a.add(new n.Text({style:{x:r[0]/2,y:r[1]/2,textVerticalAlign:"middle",textAlign:"center",text:e,textFont:i.getFont(),fill:i.getTextColor()}}));t.add(a)},_getViewData:function(){var t=this.visualMapModel;var e=i.map(t.getPieceList(),function(t,e){return{piece:t,index:e}});var r=t.get("text");var a=t.get("orient");var n=t.get("inverse");if(a==="horizontal"?n:!n){e.reverse()}else if(r){r=r.slice().reverse()}return{pieceList:e,endsText:r}},_createItemSymbol:function(t,e,r){var a;if(this.visualMapModel.isCategory()){a=e.value}else{if(e.value!=null){a=e.value}else{var i=e.interval||[];a=(i[0]+i[1])/2}}var n=this.getControllerVisual(a);t.add(o.createSymbol(n.symbol,r[0],r[1],r[2],r[3],n.color))},_onItemClick:function(t){var e=this.visualMapModel;var r=e.option;var a=i.clone(r.selected);var n=e.getSelectedMapKey(t);if(r.selectedMode==="single"){a[n]=true;i.each(a,function(t,e){a[e]=e===n})}else{a[n]=!a[n]}this.api.dispatchAction({type:"selectDataRange",from:this.uid,visualMapId:this.visualMapModel.id,selected:a})}});t.exports=u},function(t,e,r){r(316);r(317);r(1).registerPreprocessor(function(t){t.markPoint=t.markPoint||{}})},function(t,e,r){var a=r(5);var i=r(1).extendComponentModel({type:"markPoint",dependencies:["series","grid","polar"],init:function(t,e,r,a){this.mergeDefaultAndTheme(t,r);this.mergeOption(t,r,a.createdBySelf,true)},mergeOption:function(t,e,r,n){if(!r){e.eachSeries(function(t){var r=t.get("markPoint");var o=t.markPointModel;if(!r||!r.data){t.markPointModel=null;return}if(!o){if(n){a.defaultEmphasis(r.label,["position","show","textStyle","distance","formatter"])}var s={seriesIndex:t.seriesIndex,name:t.name,createdBySelf:true};o=new i(r,this,e,s)}else{o.mergeOption(r,e,true)}t.markPointModel=o},this)}},defaultOption:{zlevel:0,z:5,symbol:"pin",symbolSize:50,tooltip:{trigger:"item"},label:{normal:{show:true,position:"inside"},emphasis:{show:true}},itemStyle:{normal:{borderWidth:2},emphasis:{}}}});t.exports=i},function(t,e,r){var a=r(98);var i=r(3);var n=r(6);var o=r(5);var s=r(7);var l=n.addCommas;var u=n.encodeHTML;var h=r(94);var c=r(318);function v(t,e,r){var a=e.coordinateSystem;t.each(function(i){var n=t.getItemModel(i);var o;var l=n.getShallow("x");var u=n.getShallow("y");if(l!=null&&u!=null){o=[s.parsePercent(l,r.getWidth()),s.parsePercent(u,r.getHeight())]}else if(e.getMarkerPosition){o=e.getMarkerPosition(t.getValues(t.dimensions,i))}else if(a){var h=t.get(a.dimensions[0],i);var c=t.get(a.dimensions[1],i);o=a.dataToPoint([h,c])}t.setItemLayout(i,o)})}var f={getRawDataArray:function(){return this.option.data},formatTooltip:function(t){var e=this.getData();var r=this.getRawValue(t);var a=i.isArray(r)?i.map(r,l).join(", "):l(r);var n=e.getName(t);return this.name+"<br />"+((n?u(n)+" : ":"")+a)},getData:function(){return this._data},setData:function(t){this._data=t}};i.defaults(f,o.dataFormatMixin);r(1).extendComponentView({type:"markPoint",init:function(){this._symbolDrawMap={}},render:function(t,e,r){var a=this._symbolDrawMap;for(var i in a){a[i].__keep=false}e.eachSeries(function(t){var e=t.markPointModel;e&&this._renderSeriesMP(t,e,r)},this);for(var i in a){if(!a[i].__keep){a[i].remove();this.group.remove(a[i].group)}}},updateLayout:function(t,e,r){e.eachSeries(function(t){var e=t.markPointModel;if(e){v(e.getData(),t,r);this._symbolDrawMap[t.name].updateLayout(e)}},this)},_renderSeriesMP:function(t,e,r){var n=t.coordinateSystem;var o=t.name;var s=t.getData();var l=this._symbolDrawMap;var u=l[o];if(!u){u=l[o]=new a}var h=d(n,t,e);i.mixin(e,f);e.setData(h);v(e.getData(),t,r);h.each(function(t){var r=h.getItemModel(t);var a=r.getShallow("symbolSize");if(typeof a==="function"){a=a(e.getRawValue(t),e.getDataParams(t))}h.setItemVisual(t,{symbolSize:a,color:r.get("itemStyle.normal.color")||s.getVisual("color"),symbol:r.getShallow("symbol")})});u.updateData(h);this.group.add(u.group);h.eachItemGraphicEl(function(t){t.traverse(function(t){t.dataModel=e})});u.__keep=true}});function d(t,e,r){var a;if(t){a=i.map(t&&t.dimensions,function(t){var r=e.getData().getDimensionInfo(e.coordDimToDataDim(t)[0])||{};r.name=t;return r})}else{a=[{name:"value",type:"float"}]}var n=new h(a,r);var o=i.map(r.get("data"),i.curry(c.dataTransform,e));if(t){o=i.filter(o,i.curry(c.dataFilter,t))}n.initData(o,null,t?c.dimValueGetter:function(t){return t.value});return n}},function(t,e,r){var a=r(3);var i=r(7);var n=a.indexOf;function o(t,e,r){var a=-1;do{a=Math.max(i.getPrecision(t.get(e,r)),a);t=t.stackedOn}while(t);return a}function s(t,e,r,a,i,n){var s=[];var l=d(e,a,t);var u=e.indexOfNearest(a,l,true);s[i]=e.get(r,u,true);s[n]=e.get(a,u,true);var h=o(e,a,u);if(h>=0){s[n]=+s[n].toFixed(h)}return s}var l=a.curry;var u={min:l(s,"min"),max:l(s,"max"),average:l(s,"average")};var h=function(t,e){var r=t.getData();var i=t.coordinateSystem;if((isNaN(e.x)||isNaN(e.y))&&!a.isArray(e.coord)&&i){var o=c(e,r,i,t);e=a.clone(e);if(e.type&&u[e.type]&&o.baseAxis&&o.valueAxis){var s=i.dimensions;var l=n(s,o.baseAxis.dim);var h=n(s,o.valueAxis.dim);e.coord=u[e.type](r,o.baseDataDim,o.valueDataDim,l,h);e.value=e.coord[h]}else{e.coord=[e.xAxis!=null?e.xAxis:e.radiusAxis,e.yAxis!=null?e.yAxis:e.angleAxis]}}return e};var c=function(t,e,r,a){var i={};if(t.valueIndex!=null||t.valueDim!=null){i.valueDataDim=t.valueIndex!=null?e.getDimension(t.valueIndex):t.valueDim;i.valueAxis=r.getAxis(a.dataDimToCoordDim(i.valueDataDim));i.baseAxis=r.getOtherAxis(i.valueAxis);i.baseDataDim=a.coordDimToDataDim(i.baseAxis.dim)[0]}else{i.baseAxis=a.getBaseAxis();i.valueAxis=r.getOtherAxis(i.baseAxis);i.baseDataDim=a.coordDimToDataDim(i.baseAxis.dim)[0];i.valueDataDim=a.coordDimToDataDim(i.valueAxis.dim)[0]}return i};var v=function(t,e){return t&&t.containData&&e.coord&&(e.x==null||e.y==null)?t.containData(e.coord):true};var f=function(t,e,r,a){if(a<2){return t.coord&&t.coord[a]}else{return t.value}};var d=function(t,e,r){return r==="average"?t.getSum(e,true)/t.count():t.getDataExtent(e,true)[r==="max"?1:0]};t.exports={dataTransform:h,dataFilter:v,dimValueGetter:f,getAxisInfo:c,numCalculate:d}},function(t,e,r){r(320);r(321);r(1).registerPreprocessor(function(t){t.markLine=t.markLine||{}})},function(t,e,r){var a=r(5);var i=r(1).extendComponentModel({type:"markLine",dependencies:["series","grid","polar"],init:function(t,e,r,a){this.mergeDefaultAndTheme(t,r);this.mergeOption(t,r,a.createdBySelf,true)},mergeOption:function(t,e,r,n){if(!r){e.eachSeries(function(t){var r=t.get("markLine");var o=t.markLineModel;if(!r||!r.data){t.markLineModel=null;return}if(!o){if(n){a.defaultEmphasis(r.label,["position","show","textStyle","distance","formatter"])}var s={seriesIndex:t.seriesIndex,name:t.name,createdBySelf:true};o=new i(r,this,e,s)}else{o.mergeOption(r,e,true)}t.markLineModel=o},this)}},defaultOption:{zlevel:0,z:5,symbol:["circle","arrow"],symbolSize:[8,16],precision:2,tooltip:{trigger:"item"},label:{normal:{show:true,position:"end"},emphasis:{show:true}},lineStyle:{normal:{type:"dashed"},emphasis:{width:3}},animationEasing:"linear"}});t.exports=i},function(t,e,r){var a=r(3);var i=r(94);var n=r(6);var o=r(5);var s=r(7);var l=n.addCommas;var u=n.encodeHTML;var h=r(318);var c=r(194);var v=function(t,e,r,i){var n=t.getData();var o=i.type;if(!a.isArray(i)&&(o==="min"||o==="max"||o==="average")){var s=h.getAxisInfo(i,n,e,t);var l=s.baseAxis.dim+"Axis";var u=s.valueAxis.dim+"Axis";var c=s.baseAxis.scale.getExtent();var v=a.clone(i);var f={};v.type=null;v[l]=c[0];f[l]=c[1];var d=h.numCalculate(n,s.valueDataDim,o);d=s.valueAxis.coordToData(s.valueAxis.dataToCoord(d));var p=r.get("precision");if(p>=0){d=+d.toFixed(p)}v[u]=f[u]=d;i=[v,f,{type:o,valueIndex:i.valueIndex,value:d}]}i=[h.dataTransform(t,i[0]),h.dataTransform(t,i[1]),a.extend({},i[2])];i[2].type=i[2].type||"";a.merge(i[2],i[0]);a.merge(i[2],i[1]);return i};function f(t,e){return h.dataFilter(t,e[0])&&h.dataFilter(t,e[1])}function d(t,e,r,a,i,n,o){var l=n.coordinateSystem;var u=t.getItemModel(e);var h;var c=u.get("x");var v=u.get("y");if(c!=null&&v!=null){h=[s.parsePercent(c,o.getWidth()),s.parsePercent(v,o.getHeight())]}else{if(n.getMarkerPosition){h=n.getMarkerPosition(t.getValues(t.dimensions,e))}else{var f=l.dimensions;var d=t.get(f[0],e);var p=t.get(f[1],e);h=l.dataToPoint([d,p])}if(a&&l.type==="cartesian2d"){var g=i!=null?l.getAxis(i===1?"x":"y"):l.getAxesByScale("ordinal")[0];if(g&&g.onBand){h[g.dim==="x"?0:1]=g.toGlobalCoord(g.getExtent()[r?0:1])}}}t.setItemLayout(e,h)}var p={formatTooltip:function(t){var e=this._data;var r=this.getRawValue(t);var i=a.isArray(r)?a.map(r,l).join(", "):l(r);var n=e.getName(t);return this.name+"<br />"+((n?u(n)+" : ":"")+i)},getRawDataArray:function(){return this.option.data},getData:function(){return this._data},setData:function(t){this._data=t}};a.defaults(p,o.dataFormatMixin);r(1).extendComponentView({type:"markLine",init:function(){this._markLineMap={}},render:function(t,e,r){var a=this._markLineMap;for(var i in a){a[i].__keep=false}e.eachSeries(function(t){var a=t.markLineModel;a&&this._renderSeriesML(t,a,e,r)},this);for(var i in a){if(!a[i].__keep){this.group.remove(a[i].group)}}},updateLayout:function(t,e,r){e.eachSeries(function(t){var e=t.markLineModel;if(e){var a=e.getData();var i=e.__from;var n=e.__to;i.each(function(e){var o=a.getItemModel(e);var s=o.get("type");var l=o.get("valueIndex");d(i,e,true,s,l,t,r);d(n,e,false,s,l,t,r)});a.each(function(t){a.setItemLayout(t,[i.getItemLayout(t),n.getItemLayout(t)])});this._markLineMap[t.name].updateLayout()}},this)},_renderSeriesML:function(t,e,r,i){var n=t.coordinateSystem;var o=t.name;var s=t.getData();var l=this._markLineMap;var u=l[o];if(!u){u=l[o]=new c}this.group.add(u.group);var h=g(n,t,e);var v=h.from;var f=h.to;var m=h.line;e.__from=v;e.__to=f;a.extend(e,p);e.setData(m);var y=e.get("symbol");var x=e.get("symbolSize");if(!a.isArray(y)){y=[y,y]}if(typeof x==="number"){x=[x,x]}h.from.each(function(t){var e=m.getItemModel(t);var r=e.get("type");var a=e.get("valueIndex");_(v,t,true,r,a);_(f,t,false,r,a)});m.each(function(t){var e=m.getItemModel(t).get("lineStyle.normal.color");m.setItemVisual(t,{color:e||v.getItemVisual(t,"color")});m.setItemLayout(t,[v.getItemLayout(t),f.getItemLayout(t)])});u.updateData(m,v,f);h.line.eachItemGraphicEl(function(t,r){t.traverse(function(t){t.dataModel=e})});function _(e,r,a,n,o){var l=e.getItemModel(r);d(e,r,a,n,o,t,i);e.setItemVisual(r,{symbolSize:l.get("symbolSize")||x[a?0:1],symbol:l.get("symbol",true)||y[a?0:1],color:l.get("itemStyle.normal.color")||s.getVisual("color")})}u.__keep=true}});function g(t,e,r){var n;if(t){n=a.map(t&&t.dimensions,function(t){var r=e.getData().getDimensionInfo(e.coordDimToDataDim(t)[0])||{};r.name=t;return r})}else{n=[{name:"value",type:"float"}]}var o=new i(n,r);var s=new i(n,r);var l=new i([],r);var u=a.map(r.get("data"),a.curry(v,e,t,r));if(t){u=a.filter(u,a.curry(f,t))}var c=t?h.dimValueGetter:function(t){return t.value};o.initData(a.map(u,function(t){return t[0]}),null,c);s.initData(a.map(u,function(t){return t[1]}),null,c);l.initData(a.map(u,function(t){return t[2]}));return{from:o,to:s,line:l}}},function(t,e,r){var a=r(1);a.registerPreprocessor(r(323));r(324);r(325);r(326);r(328)},function(t,e,r){var a=r(3);t.exports=function(t){var e=t&&t.timeline;if(!a.isArray(e)){e=e?[e]:[]}a.each(e,function(t){if(!t){return}i(t)})};function i(t){var e=t.type;var r={number:"value",time:"time"};if(r[e]){t.axisType=r[e];delete t.type}n(t);if(o(t,"controlPosition")){var i=t.controlStyle||(t.controlStyle={});if(!o(i,"position")){i.position=t.controlPosition}if(i.position==="none"&&!o(i,"show")){i.show=false;delete i.position}delete t.controlPosition}a.each(t.data||[],function(t){if(a.isObject(t)&&!a.isArray(t)){if(!o(t,"value")&&o(t,"name")){t.value=t.name}n(t)}})}function n(t){var e=t.itemStyle||(t.itemStyle={});var r=e.emphasis||(e.emphasis={});var i=t.label||(t.label||{});var n=i.normal||(i.normal={});var s={normal:1,emphasis:1};a.each(i,function(t,e){if(!s[e]&&!o(n,e)){n[e]=t}});if(r.label&&!o(i,"emphasis")){i.emphasis=r.label;delete r.label}}function o(t,e){return t.hasOwnProperty(e)}},function(t,e,r){r(19).registerSubTypeDefaulter("timeline",function(){return"slider"})},function(t,e,r){var a=r(1);a.registerAction({type:"timelineChange",event:"timelineChanged",update:"prepareAndUpdate"},function(t,e){var r=e.getComponent("timeline");if(r&&t.currentIndex!=null){r.setCurrentIndex(t.currentIndex);if(!r.get("loop",true)&&r.isIndexMax()){r.setPlayState(false)}}e.resetOption("timeline")});a.registerAction({type:"timelinePlayChange",event:"timelinePlayChanged",update:"update"},function(t,e){var r=e.getComponent("timeline");if(r&&t.playState!=null){r.setPlayState(t.playState)}})},function(t,e,r){var a=r(327);t.exports=a.extend({type:"timeline.slider",defaultOption:{backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,orient:"horizontal",inverse:false,tooltip:{trigger:"item"},symbol:"emptyCircle",symbolSize:10,lineStyle:{show:true,width:2,color:"#304654"},label:{position:"auto",normal:{show:true,interval:"auto",rotate:0,textStyle:{color:"#304654"}},emphasis:{show:true,textStyle:{color:"#c23531"}}},itemStyle:{normal:{color:"#304654",borderWidth:1},emphasis:{color:"#c23531"}},checkpointStyle:{symbol:"circle",symbolSize:13,color:"#c23531",borderWidth:5,borderColor:"rgba(194,53,49, 0.5)",animation:true,animationDuration:300,animationEasing:"quinticInOut"},controlStyle:{show:true,showPlayBtn:true,showPrevBtn:true,showNextBtn:true,itemSize:22,itemGap:12,position:"left",playIcon:"path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z",stopIcon:"path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z",nextIcon:"path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z",prevIcon:"path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z",normal:{color:"#304654",borderColor:"#304654",borderWidth:1},emphasis:{color:"#c23531",borderColor:"#c23531",borderWidth:2}},data:[]}})},function(t,e,r){var a=r(19);var i=r(94);var n=r(3);var o=r(5);var s=a.extend({type:"timeline",layoutMode:"box",defaultOption:{zlevel:0,z:4,show:true,axisType:"time",realtime:true,left:"20%",top:null,right:"20%",bottom:0,width:null,height:40,padding:5,controlPosition:"left",autoPlay:false,rewind:false,loop:true,playInterval:2e3,currentIndex:0,itemStyle:{normal:{},emphasis:{}},label:{normal:{textStyle:{color:"#000"}},emphasis:{}},data:[]},init:function(t,e,r){this._data;this._names;this.mergeDefaultAndTheme(t,r);this._initData()},mergeOption:function(t){s.superApply(this,"mergeOption",arguments);this._initData()},setCurrentIndex:function(t){if(t==null){t=this.option.currentIndex}var e=this._data.count();if(this.option.loop){t=(t%e+e)%e}else{t>=e&&(t=e-1);t<0&&(t=0)}this.option.currentIndex=t},getCurrentIndex:function(){return this.option.currentIndex},isIndexMax:function(){return this.getCurrentIndex()>=this._data.count()-1},setPlayState:function(t){this.option.autoPlay=!!t},getPlayState:function(){return!!this.option.autoPlay},_initData:function(){var t=this.option;var e=t.data||[];var r=t.axisType;var a=this._names=[];if(r==="category"){var s=[];n.each(e,function(t,e){var r=o.getDataItemValue(t);var i;if(n.isObject(t)){i=n.clone(t);i.value=e}else{i=e}s.push(i);if(!n.isString(r)&&(r==null||isNaN(r))){r=""}a.push(r+"")});e=s}var l={category:"ordinal",time:"time"}[r]||"number";var u=this._data=new i([{name:"value",type:l}],this);u.initData(e,a)},getData:function(){return this._data},getCategories:function(){if(this.get("axisType")==="category"){return this._names.slice()}}});t.exports=s},function(t,e,r){var a=r(3);var i=r(42);var n=r(21);var o=r(329);var s=r(330);var l=r(100);var u=r(108);var h=r(15);var c=r(17);var v=r(7);var f=r(5);var d=r(6);var p=d.encodeHTML;var g=a.bind;var m=a.each;var y=Math.PI;t.exports=o.extend({type:"timeline.slider",init:function(t,e){this.api=e;this._axis;this._viewRect;this._timer;this._currentPointer;this._mainGroup;this._labelGroup},render:function(t,e,r,a){this.model=t;this.api=r;this.ecModel=e;this.group.removeAll();if(t.get("show",true)){var i=this._layout(t,r);var n=this._createGroup("mainGroup");var o=this._createGroup("labelGroup");var s=this._axis=this._createAxis(i,t);m(["AxisLine","AxisTick","Control","CurrentPointer"],function(e){this["_render"+e](i,n,s,t)},this);this._renderAxisLabel(i,o,s,t);this._position(i,t)}this._doPlayStop()},remove:function(){this._clearTimer();this.group.removeAll()},dispose:function(){this._clearTimer()},_layout:function(t,e){var r=t.get("label.normal.position");var a=t.get("orient");var i=x(t,e);if(r==null||r==="auto"){r=a==="horizontal"?i.y+i.height/2<e.getHeight()/2?"-":"+":i.x+i.width/2<e.getWidth()/2?"+":"-"}else if(isNaN(r)){r={horizontal:{top:"-",bottom:"+"},vertical:{left:"-",right:"+"}}[a][r]}var n={horizontal:"center",vertical:r>=0||r==="+"?"left":"right"};var o={horizontal:r>=0||r==="+"?"top":"bottom",vertical:"middle"};var s={horizontal:0,vertical:y/2};var l=a==="vertical"?i.height:i.width;var u=t.getModel("controlStyle");var h=u.get("show");var c=h?u.get("itemSize"):0;var v=h?u.get("itemGap"):0;var f=c+v;var d=t.get("label.normal.rotate")||0;d=d*y/180;var p;var g;var m;var _;var w=u.get("position",true);var h=u.get("show",true);var b=h&&u.get("showPlayBtn",true);var M=h&&u.get("showPrevBtn",true);var S=h&&u.get("showNextBtn",true);var I=0;var A=l;if(w==="left"||w==="bottom"){b&&(p=[0,0],I+=f);M&&(g=[I,0],I+=f);S&&(m=[A-c,0],A-=f)}else{b&&(p=[A-c,0],A-=f);M&&(g=[0,0],I+=f);S&&(m=[A-c,0],A-=f)}_=[I,A];if(t.get("inverse")){_.reverse()}return{viewRect:i,mainLength:l,orient:a,rotation:s[a],labelRotation:d,labelPosOpt:r,labelAlign:n[a],labelBaseline:o[a],playPosition:p,prevBtnPosition:g,nextBtnPosition:m,axisExtent:_,controlSize:c,controlGap:v}},_position:function(t,e){var r=this._mainGroup;var a=this._labelGroup;var i=t.viewRect;if(t.orient==="vertical"){var n=c.create();var o=i.x;var s=i.y+i.height;c.translate(n,n,[-o,-s]);c.rotate(n,n,-y/2);c.translate(n,n,[o,s]);i=i.clone();i.applyTransform(n)}var l=m(i);var u=m(r.getBoundingRect());var h=m(a.getBoundingRect());var v=r.position;var f=a.position;f[0]=v[0]=l[0][0];var d=t.labelPosOpt;if(isNaN(d)){var p=d==="+"?0:1;x(v,u,l,1,p);x(f,h,l,1,1-p)}else{var p=d>=0?0:1;x(v,u,l,1,p);f[1]=v[1]+d}r.position=v;a.position=f;r.rotation=a.rotation=t.rotation;g(r);g(a);function g(t){var e=t.position;t.origin=[l[0][0]-e[0],l[1][0]-e[1]]}function m(t){return[[t.x,t.x+t.width],[t.y,t.y+t.height]]}function x(t,e,r,a,i){t[a]+=r[a][i]-e[a][i]}},_createAxis:function(t,e){var r=e.getData();var a=e.get("axisType");var i=u.createScaleByModel(e,a);var n=r.getDataExtent("value");i.setExtent(n[0],n[1]);this._customizeScale(i,r);i.niceTicks();var o=new s("value",i,t.axisExtent,a);o.model=e;return o},_customizeScale:function(t,e){t.getTicks=function(){return e.mapArray(["value"],function(t){return t})};t.getTicksLabels=function(){
return a.map(this.getTicks(),t.getLabel,t)}},_createGroup:function(t){var e=this["_"+t]=new i.Group;this.group.add(e);return e},_renderAxisLine:function(t,e,r,n){var o=r.getExtent();if(!n.get("lineStyle.show")){return}e.add(new i.Line({shape:{x1:o[0],y1:0,x2:o[1],y2:0},style:a.extend({lineCap:"round"},n.getModel("lineStyle").getLineStyle()),silent:true,z2:1}))},_renderAxisTick:function(t,e,r,a){var n=a.getData();var o=r.scale.getTicks();var s=this._prepareTooltipHostModel(n,a);m(o,function(t,a){var o=r.dataToCoord(t);var l=n.getItemModel(a);var u=l.getModel("itemStyle.normal");var h=l.getModel("itemStyle.emphasis");var c={position:[o,0],onclick:g(this._changeTimeline,this,a)};var v=w(l,u,e,c);i.setHoverStyle(v,h.getItemStyle());if(l.get("tooltip")){v.dataIndex=a;v.dataModel=s}else{v.dataIndex=v.dataModel=null}},this)},_prepareTooltipHostModel:function(t,e){var r=f.createDataFormatModel({},t,e.get("data"));var a=this;r.formatTooltip=function(t){return p(a._axis.scale.getLabel(t))};return r},_renderAxisLabel:function(t,e,r,a){var n=a.getModel("label.normal");if(!n.get("show")){return}var o=a.getData();var s=r.scale.getTicks();var l=u.getFormattedLabels(r,n.get("formatter"));var h=r.getLabelInterval();m(s,function(a,n){if(r.isLabelIgnored(n,h)){return}var s=o.getItemModel(n);var u=s.getModel("label.normal.textStyle");var c=s.getModel("label.emphasis.textStyle");var v=r.dataToCoord(a);var f=new i.Text({style:{text:l[n],textAlign:t.labelAlign,textVerticalAlign:t.labelBaseline,textFont:u.getFont(),fill:u.getTextColor()},position:[v,0],rotation:t.labelRotation-t.rotation,onclick:g(this._changeTimeline,this,n),silent:false});e.add(f);i.setHoverStyle(f,c.getItemStyle())},this)},_renderControl:function(t,e,r,a){var n=t.controlSize;var o=t.rotation;var s=a.getModel("controlStyle.normal").getItemStyle();var l=a.getModel("controlStyle.emphasis").getItemStyle();var u=[0,-n/2,n,n];var h=a.getPlayState();var c=a.get("inverse",true);v(t.nextBtnPosition,"controlStyle.nextIcon",g(this._changeTimeline,this,c?"-":"+"));v(t.prevBtnPosition,"controlStyle.prevIcon",g(this._changeTimeline,this,c?"+":"-"));v(t.playPosition,"controlStyle."+(h?"stopIcon":"playIcon"),g(this._handlePlayClick,this,!h),true);function v(t,r,h,c){if(!t){return}var v={position:t,origin:[n/2,0],rotation:c?-o:0,rectHover:true,style:s,onclick:h};var f=_(a,r,u,v);e.add(f);i.setHoverStyle(f,l)}},_renderCurrentPointer:function(t,e,r,a){var i=a.getData();var n=a.getCurrentIndex();var o=i.getItemModel(n).getModel("checkpointStyle");var s=this;var l={onCreate:function(t){t.draggable=true;t.drift=g(s._handlePointerDrag,s);t.ondragend=g(s._handlePointerDragend,s);b(t,n,r,a,true)},onUpdate:function(t){b(t,n,r,a)}};this._currentPointer=w(o,o,this._mainGroup,{},this._currentPointer,l)},_handlePlayClick:function(t){this._clearTimer();this.api.dispatchAction({type:"timelinePlayChange",playState:t,from:this.uid})},_handlePointerDrag:function(t,e,r){this._clearTimer();this._pointerChangeTimeline([r.offsetX,r.offsetY])},_handlePointerDragend:function(t){this._pointerChangeTimeline([t.offsetX,t.offsetY],true)},_pointerChangeTimeline:function(t,e){var r=this._toAxisCoord(t)[0];var a=this._axis;var i=v.asc(a.getExtent().slice());r>i[1]&&(r=i[1]);r<i[0]&&(r=i[0]);this._currentPointer.position[0]=r;this._currentPointer.dirty();var n=this._findNearestTick(r);var o=this.model;if(e||n!==o.getCurrentIndex()&&o.get("realtime")){this._changeTimeline(n)}},_doPlayStop:function(){this._clearTimer();if(this.model.getPlayState()){this._timer=setTimeout(g(t,this),this.model.get("playInterval"))}function t(){var t=this.model;this._changeTimeline(t.getCurrentIndex()+(t.get("rewind",true)?-1:1))}},_toAxisCoord:function(t){var e=this._mainGroup.getLocalTransform();return i.applyTransform(t,e,true)},_findNearestTick:function(t){var e=this.model.getData();var r=Infinity;var a;var i=this._axis;e.each(["value"],function(e,n){var o=i.dataToCoord(e);var s=Math.abs(o-t);if(s<r){r=s;a=n}});return a},_clearTimer:function(){if(this._timer){clearTimeout(this._timer);this._timer=null}},_changeTimeline:function(t){var e=this.model.getCurrentIndex();if(t==="+"){t=e+1}else if(t==="-"){t=e-1}this.api.dispatchAction({type:"timelineChange",currentIndex:t,from:this.uid})}});function x(t,e){return n.getLayoutRect(t.getBoxLayoutParams(),{width:e.getWidth(),height:e.getHeight()},t.get("padding"))}function _(t,e,r,n){var o=i.makePath(t.get(e).replace(/^path:\/\//,""),a.clone(n||{}),new h(r[0],r[1],r[2],r[3]),"center");return o}function w(t,e,r,i,n,o){var s=t.get("symbol");var u=e.get("color");var h=t.get("symbolSize");var c=h/2;var v=e.getItemStyle(["color","symbol","symbolSize"]);if(!n){n=l.createSymbol(s,-c,-c,h,h,u);r.add(n);o&&o.onCreate(n)}else{n.setStyle(v);n.setColor(u);r.add(n);o&&o.onUpdate(n)}i=a.merge({rectHover:true,style:v,z2:100},i,true);n.attr(i);return n}function b(t,e,r,a,i){if(t.dragging){return}var n=a.getModel("checkpointStyle");var o=r.dataToCoord(a.getData().get(["value"],e));if(i||!n.get("animation",true)){t.attr({position:[o,0]})}else{t.stopAnimation(true);t.animateTo({position:[o,0]},n.get("animationDuration",true),n.get("animationEasing",true))}}},function(t,e,r){var a=r(28);t.exports=a.extend({type:"timeline"})},function(t,e,r){var a=r(3);var i=r(117);var n=r(108);var o=function(t,e,r,a){i.call(this,t,e,r);this.type=a||"value";this._autoLabelInterval;this.model=null};o.prototype={constructor:o,getLabelInterval:function(){var t=this.model;var e=t.getModel("label.normal");var r=e.get("interval");if(r!=null&&r!="auto"){return r}var r=this._autoLabelInterval;if(!r){r=this._autoLabelInterval=n.getAxisLabelInterval(a.map(this.scale.getTicks(),this.dataToCoord,this),n.getFormattedLabels(this,e.get("formatter")),e.getModel("textStyle").getFont(),t.get("orient")==="horizontal")}return r},isLabelIgnored:function(t){if(this.type==="category"){var e=this.getLabelInterval();return typeof e==="function"&&!e(t,this.scale.getLabel(t))||t%(e+1)}}};a.inherits(o,i);t.exports=o},function(t,e,r){r(332);r(334);r(336);r(337);r(338);r(339);r(344)},function(t,e,r){var a=r(333);var i=r(3);var n=r(1).extendComponentModel({type:"toolbox",layoutMode:{type:"box",ignoreSize:true},mergeDefaultAndTheme:function(t){n.superApply(this,"mergeDefaultAndTheme",arguments);i.each(this.option.feature,function(t,e){var r=a.get(e);r&&i.merge(t,r.defaultOption)})},defaultOption:{show:true,z:6,zlevel:0,orient:"horizontal",left:"right",top:"top",backgroundColor:"transparent",borderColor:"#ccc",borderWidth:0,padding:5,itemSize:15,itemGap:8,showTitle:true,iconStyle:{normal:{borderColor:"#666",color:"none"},emphasis:{borderColor:"#3E98C5"}}}});t.exports=n},function(t,e){"use strict";var r={};t.exports={register:function(t,e){r[t]=e},get:function(t){return r[t]}}},function(t,e,r){(function(e){var a=r(333);var i=r(3);var n=r(42);var o=r(8);var s=r(95);var l=r(266);var u=r(14);t.exports=r(1).extendComponentView({type:"toolbox",render:function(t,e,r){var c=this.group;c.removeAll();if(!t.get("show")){return}var v=+t.get("itemSize");var f=t.get("feature")||{};var d=this._features||(this._features={});var p=[];i.each(f,function(t,e){p.push(e)});new s(this._featureNames||[],p).add(g).update(g).remove(i.curry(g,null)).execute();this._featureNames=p;function g(i,n){var s=p[i];var l=p[n];var u=f[s];var c=new o(u,t,t.ecModel);var v;if(s&&!l){if(h(s)){v={model:c,onclick:c.option.onclick,featureName:s}}else{var g=a.get(s);if(!g){return}v=new g(c)}d[s]=v}else{v=d[l];if(!v){return}v.model=c}if(!s&&l){v.dispose&&v.dispose(e,r);return}if(!c.get("show")||v.unusable){v.remove&&v.remove(e,r);return}m(c,v,s);c.setIconStatus=function(t,e){var r=this.option;var a=this.iconPaths;r.iconStatus=r.iconStatus||{};r.iconStatus[t]=e;a[t]&&a[t].trigger(e)};if(v.render){v.render(c,e,r)}}function m(a,o,s){var l=a.getModel("iconStyle");var u=o.getIcons?o.getIcons():a.get("icon");var h=a.get("title")||{};if(typeof u==="string"){var f=u;var d=h;u={};h={};u[s]=f;h[s]=d}var p=a.iconPaths={};i.each(u,function(s,u){var f=l.getModel("normal").getItemStyle();var d=l.getModel("emphasis").getItemStyle();var g={x:-v/2,y:-v/2,width:v,height:v};var m=s.indexOf("image://")===0?(g.image=s.slice(8),new n.Image({style:g})):n.makePath(s.replace("path://",""),{style:f,hoverStyle:d,rectHover:true},g,"center");n.setHoverStyle(m);if(t.get("showTitle")){m.__title=h[u];m.on("mouseover",function(){m.setStyle({text:h[u],textPosition:d.textPosition||"bottom",textFill:d.fill||d.stroke||"#000",textAlign:d.textAlign||"center"})}).on("mouseout",function(){m.setStyle({textFill:null})})}m.trigger(a.get("iconStatus."+u)||"normal");c.add(m);m.on("click",i.bind(o.onclick,o,e,r,u));p[u]=m})}l.layout(c,t,r);l.addBackground(c,t);c.eachChild(function(t){var e=t.__title;var a=t.hoverStyle;if(a&&e){var i=u.getBoundingRect(e,a.font);var n=t.position[0]+c.position[0];var o=t.position[1]+c.position[1]+v;var s=false;if(o+i.height>r.getHeight()){a.textPosition="top";s=true}var l=s?-5-i.height:v+8;if(n+i.width/2>r.getWidth()){a.textPosition=["100%",l];a.textAlign="right"}else if(n-i.width/2<0){a.textPosition=[0,l];a.textAlign="left"}}})},remove:function(t,e){i.each(this._features,function(r){r.remove&&r.remove(t,e)});this.group.removeAll()},dispose:function(t,e){i.each(this._features,function(r){r.dispose&&r.dispose(t,e)})}});function h(t){return t.indexOf("my")===0}}).call(e,r(335))},function(t,e){var r=t.exports={};var a=[];var i=false;var n;var o=-1;function s(){i=false;if(n.length){a=n.concat(a)}else{o=-1}if(a.length){l()}}function l(){if(i){return}var t=setTimeout(s);i=true;var e=a.length;while(e){n=a;a=[];while(++o<e){if(n){n[o].run()}}o=-1;e=a.length}n=null;i=false;clearTimeout(t)}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){e[r-1]=arguments[r]}}a.push(new u(t,e));if(a.length===1&&!i){setTimeout(l,0)}};function u(t,e){this.fun=t;this.array=e}u.prototype.run=function(){this.fun.apply(null,this.array)};r.title="browser";r.browser=true;r.env={};r.argv=[];r.version="";r.versions={};function h(){}r.on=h;r.addListener=h;r.once=h;r.off=h;r.removeListener=h;r.removeAllListeners=h;r.emit=h;r.binding=function(t){throw new Error("process.binding is not supported")};r.cwd=function(){return"/"};r.chdir=function(t){throw new Error("process.chdir is not supported")};r.umask=function(){return 0}},function(t,e,r){var a=r(78);function i(t){this.model=t}i.defaultOption={show:true,icon:"M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0",title:"保存为图片",type:"png",name:"",excludeComponents:["toolbox"],pixelRatio:1,lang:["右键另存为图片"]};i.prototype.unusable=!a.canvasSupported;var n=i.prototype;n.onclick=function(t,e){var r=this.model;var a=r.get("name")||t.get("title.0.text")||"echarts";var i=document.createElement("a");var n=r.get("type",true)||"png";i.download=a+"."+n;i.target="_blank";var o=e.getConnectedDataURL({type:n,backgroundColor:r.get("backgroundColor",true)||t.get("backgroundColor")||"#fff",excludeComponents:r.get("excludeComponents"),pixelRatio:r.get("pixelRatio")});i.href=o;if(typeof MouseEvent==="function"){var s=new MouseEvent("click",{view:window,bubbles:true,cancelable:false});i.dispatchEvent(s)}else{var l=r.get("lang");var u=""+'<body style="margin:0;">'+'<img src="'+o+'" style="max-width:100%;" title="'+(l&&l[0]||"")+'" />'+"</body>";var h=window.open();h.document.write(u)}};r(333).register("saveAsImage",i);t.exports=i},function(t,e,r){"use strict";var a=r(3);function i(t){this.model=t}i.defaultOption={show:true,type:[],icon:{line:"M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4",bar:"M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7",stack:"M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z",tiled:"M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z"},title:{line:"切换为折线图",bar:"切换为柱状图",stack:"切换为堆叠",tiled:"切换为平铺"},option:{},seriesIndex:{}};var n=i.prototype;n.getIcons=function(){var t=this.model;var e=t.get("icon");var r={};a.each(t.get("type"),function(t){if(e[t]){r[t]=e[t]}});return r};var o={line:function(t,e,r,i){if(t==="bar"){return a.merge({id:e,type:"line",data:r.get("data"),stack:r.get("stack"),markPoint:r.get("markPoint"),markLine:r.get("markLine")},i.get("option.line")||{},true)}},bar:function(t,e,r,i){if(t==="line"){return a.merge({id:e,type:"bar",data:r.get("data"),stack:r.get("stack"),markPoint:r.get("markPoint"),markLine:r.get("markLine")},i.get("option.bar")||{},true)}},stack:function(t,e,r,i){if(t==="line"||t==="bar"){return a.merge({id:e,stack:"__ec_magicType_stack__"},i.get("option.stack")||{},true)}},tiled:function(t,e,r,i){if(t==="line"||t==="bar"){return a.merge({id:e,stack:""},i.get("option.tiled")||{},true)}}};var s=[["line","bar"],["stack","tiled"]];n.onclick=function(t,e,r){var i=this.model;var n=i.get("seriesIndex."+r);if(!o[r]){return}var l={series:[]};var u=function(t){var e=t.subType;var n=t.id;var s=o[r](e,n,t,i);if(s){a.defaults(s,t.option);l.series.push(s)}var u=t.coordinateSystem;if(u&&u.type==="cartesian2d"&&(r==="line"||r==="bar")){var h=u.getAxesByScale("ordinal")[0];if(h){var c=h.dim;var v=t.get(c+"AxisIndex");var f=c+"Axis";l[f]=l[f]||[];for(var d=0;d<=v;d++){l[f][v]=l[f][v]||{}}l[f][v].boundaryGap=r==="bar"?true:false}}};a.each(s,function(t){if(a.indexOf(t,r)>=0){a.each(t,function(t){i.setIconStatus(t,"normal")})}});i.setIconStatus(r,"emphasis");t.eachComponent({mainType:"series",query:n==null?null:{seriesIndex:n}},u);e.dispatchAction({type:"changeMagicType",currentType:r,newOption:l})};var l=r(1);l.registerAction({type:"changeMagicType",event:"magicTypeChanged",update:"prepareAndUpdate"},function(t,e){e.mergeOption(t.newOption)});r(333).register("magicType",i);t.exports=i},function(t,e,r){var a=r(3);var i=r(80);var n=new Array(60).join("-");var o="\t";function s(t){var e={};var r=[];var a=[];t.eachRawSeries(function(t){var i=t.coordinateSystem;if(i&&(i.type==="cartesian2d"||i.type==="polar")){var n=i.getBaseAxis();if(n.type==="category"){var o=n.dim+"_"+n.index;if(!e[o]){e[o]={categoryAxis:n,valueAxis:i.getOtherAxis(n),series:[]};a.push({axisDim:n.dim,axisIndex:n.index})}e[o].series.push(t)}else{r.push(t)}}else{r.push(t)}});return{seriesGroupByCategoryAxis:e,other:r,meta:a}}function l(t){var e=[];a.each(t,function(t,r){var i=t.categoryAxis;var n=t.valueAxis;var s=n.dim;var l=[" "].concat(a.map(t.series,function(t){return t.name}));var u=[i.model.getCategories()];a.each(t.series,function(t){u.push(t.getRawData().mapArray(s,function(t){return t}))});var h=[l.join(o)];for(var c=0;c<u[0].length;c++){var v=[];for(var f=0;f<u.length;f++){v.push(u[f][c])}h.push(v.join(o))}e.push(h.join("\n"))});return e.join("\n\n"+n+"\n\n")}function u(t){return a.map(t,function(t){var e=t.getRawData();var r=[t.name];var a=[];e.each(e.dimensions,function(){var t=arguments.length;var i=arguments[t-1];var n=e.getName(i);for(var s=0;s<t-1;s++){a[s]=arguments[s]}r.push((n?n+o:"")+a.join(o))});return r.join("\n")}).join("\n\n"+n+"\n\n")}function h(t){var e=s(t);return{value:a.filter([l(e.seriesGroupByCategoryAxis),u(e.other)],function(t){return t.replace(/[\n\t\s]/g,"")}).join("\n\n"+n+"\n\n"),meta:e.meta}}function c(t){return t.replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function v(t){var e=t.slice(0,t.indexOf("\n"));if(e.indexOf(o)>=0){return true}}var f=new RegExp("["+o+"]+","g");function d(t){var e=t.split(/\n+/g);var r=c(e.shift()).split(f);var i=[];var n=a.map(r,function(t){return{name:t,data:[]}});for(var o=0;o<e.length;o++){var s=c(e[o]).split(f);i.push(s.shift());for(var l=0;l<s.length;l++){n[l]&&(n[l].data[o]=s[l])}}return{series:n,categories:i}}function p(t){var e=t.split(/\n+/g);var r=c(e.shift());var a=[];for(var i=0;i<e.length;i++){var n=c(e[i]).split(f);var o="";var s;var l=false;if(isNaN(n[0])){l=true;o=n[0];n=n.slice(1);a[i]={name:o,value:[]};s=a[i].value}else{s=a[i]=[]}for(var u=0;u<n.length;u++){s.push(+n[u])}if(s.length===1){l?a[i].value=s[0]:a[i]=s[0]}}return{name:r,data:a}}function g(t,e){var r=t.split(new RegExp("\n*"+n+"\n*","g"));var i={series:[]};a.each(r,function(t,r){if(v(t)){var a=d(t);var n=e[r];var o=n.axisDim+"Axis";if(n){i[o]=i[o]||[];i[o][n.axisIndex]={data:a.categories};i.series=i.series.concat(a.series)}}else{var a=p(t);i.series.push(a)}});return i}function m(t){this._dom=null;this.model=t}m.defaultOption={show:true,readOnly:false,optionToContent:null,contentToOption:null,icon:"M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28",title:"数据视图",lang:["数据视图","关闭","刷新"],backgroundColor:"#fff",textColor:"#000",textareaColor:"#fff",textareaBorderColor:"#333",buttonColor:"#c23531",buttonTextColor:"#fff"};m.prototype.onclick=function(t,e){var r=e.getDom();var n=this.model;if(this._dom){r.removeChild(this._dom)}var s=document.createElement("div");s.style.cssText="position:absolute;left:5px;top:5px;bottom:5px;right:5px;";s.style.backgroundColor=n.get("backgroundColor")||"#fff";var l=document.createElement("h4");var u=n.get("lang")||[];l.innerHTML=u[0]||n.get("title");l.style.cssText="margin: 10px 20px;";l.style.color=n.get("textColor");var c=document.createElement("div");var v=document.createElement("textarea");c.style.cssText="display:block;width:100%;overflow:hidden;";var f=n.get("optionToContent");var d=n.get("contentToOption");var p=h(t);if(typeof f==="function"){var m=f(e.getOption());if(typeof m==="string"){c.innerHTML=m}else if(a.isDom(m)){c.appendChild(m)}}else{c.appendChild(v);v.readOnly=n.get("readOnly");v.style.cssText="width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;";v.style.color=n.get("textColor");v.style.borderColor=n.get("textareaBorderColor");v.style.backgroundColor=n.get("textareaColor");v.value=p.value}var y=p.meta;var x=document.createElement("div");x.style.cssText="position:absolute;bottom:0;left:0;right:0;";var _="float:right;margin-right:20px;border:none;"+"cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px";var w=document.createElement("div");var b=document.createElement("div");_+=";background-color:"+n.get("buttonColor");_+=";color:"+n.get("buttonTextColor");var M=this;function S(){r.removeChild(s);M._dom=null}i.addEventListener(w,"click",S);i.addEventListener(b,"click",function(){var t;try{if(typeof d==="function"){t=d(c,e.getOption())}else{t=g(v.value,y)}}catch(t){S();throw new Error("Data view format error "+t)}if(t){e.dispatchAction({type:"changeDataView",newOption:t})}S()});w.innerHTML=u[1];b.innerHTML=u[2];b.style.cssText=_;w.style.cssText=_;!n.get("readOnly")&&x.appendChild(b);x.appendChild(w);i.addEventListener(v,"keydown",function(t){if((t.keyCode||t.which)===9){var e=this.value;var r=this.selectionStart;var a=this.selectionEnd;this.value=e.substring(0,r)+o+e.substring(a);this.selectionStart=this.selectionEnd=r+1;i.stop(t)}});s.appendChild(l);s.appendChild(c);s.appendChild(x);c.style.height=r.clientHeight-80+"px";r.appendChild(s);this._dom=s};m.prototype.remove=function(t,e){this._dom&&e.getDom().removeChild(this._dom)};m.prototype.dispose=function(t,e){this.remove(t,e)};function y(t,e){return a.map(t,function(t,r){var i=e&&e[r];if(a.isObject(i)&&!a.isArray(i)){if(a.isObject(t)&&!a.isArray(t)){t=t.value}return a.defaults({value:t},i)}else{return t}})}r(333).register("dataView",m);r(1).registerAction({type:"changeDataView",event:"dataViewChanged",update:"prepareAndUpdate"},function(t,e){var r=[];a.each(t.newOption.series,function(t){var i=e.getSeriesByName(t.name)[0];if(!i){r.push(a.extend({type:"scatter"},t))}else{var n=i.get("data");r.push({name:t.name,data:y(t.data,n)})}});e.mergeOption(a.defaults({series:r},t.newOption))});t.exports=m},function(t,e,r){"use strict";var a=r(3);var i=r(7);var n=r(225);var o=r(15);var s=r(29);var l=r(340);var u=r(160);var h=a.each;var c=i.asc;r(341);var v="\0_ec_\0toolbox-dataZoom_";function f(t){this.model=t;this._controllerGroup;this._controller;this._isZoomActive}f.defaultOption={show:true,icon:{zoom:"M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1",back:"M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26"},title:{zoom:"区域缩放",back:"区域缩放还原"}};var d=f.prototype;d.render=function(t,e,r){_(t,e)};d.onclick=function(t,e,r){var a=this._controllerGroup;if(!this._controllerGroup){a=this._controllerGroup=new s;e.getZr().add(a)}p[r].call(this,a,this.model,t,e)};d.remove=function(t,e){this._disposeController();u.release("globalPan",e.getZr())};d.dispose=function(t,e){var r=e.getZr();u.release("globalPan",r);this._disposeController();this._controllerGroup&&r.remove(this._controllerGroup)};var p={zoom:function(t,e,r,a){var i=this._isZoomActive=!this._isZoomActive;var n=a.getZr();u[i?"take":"release"]("globalPan",n);e.setIconStatus("zoom",i?"emphasis":"normal");if(i){n.setDefaultCursorStyle("crosshair");this._createController(t,e,r,a)}else{n.setDefaultCursorStyle("default");this._disposeController()}},back:function(t,e,r,a){this._dispatchAction(l.pop(r),a)}};d._createController=function(t,e,r,i){var o=this._controller=new n("rect",i.getZr(),{lineWidth:3,stroke:"#333",fill:"rgba(0,0,0,0.2)"});o.on("selectEnd",a.bind(this._onSelected,this,o,e,r,i));o.enable(t,false)};d._disposeController=function(){var t=this._controller;if(t){t.off("selected");t.dispose()}};function g(t,e){var r=[{axisModel:t.getAxis("x").model,axisIndex:0},{axisModel:t.getAxis("y").model,axisIndex:0}];r.grid=t;e.eachComponent({mainType:"dataZoom",subType:"select"},function(t,a){if(m("xAxis",r[0].axisModel,t,e)){r[0].dataZoomModel=t}if(m("yAxis",r[1].axisModel,t,e)){r[1].dataZoomModel=t}});return r}function m(t,e,r,a){var i=r.get(t+"Index");return i!=null&&a.getComponent(t,i)===e}d._onSelected=function(t,e,r,a,i){if(!i.length){return}var n=i[0];t.update();var o={};r.eachComponent("grid",function(t,e){var a=t.coordinateSystem;var i=g(a,r);var s=y(n,i);if(s){var l=x(s,i,0,"x");var u=x(s,i,1,"y");l&&(o[l.dataZoomId]=l);u&&(o[u.dataZoomId]=u)}},this);l.push(r,o);this._dispatchAction(o,a)};function y(t,e){var r=e.grid;var a=new o(t[0][0],t[1][0],t[0][1]-t[0][0],t[1][1]-t[1][0]);if(!a.intersect(r.getRect())){return}var i=r.getCartesian(e[0].axisIndex,e[1].axisIndex);var n=i.pointToData([t[0][0],t[1][0]],true);var s=i.pointToData([t[0][1],t[1][1]],true);return[c([n[0],s[0]]),c([n[1],s[1]])]}function x(t,e,r,a){var i=e[r];var n=i.dataZoomModel;if(n){return{dataZoomId:n.id,startValue:t[r][0],endValue:t[r][1]}}}d._dispatchAction=function(t,e){var r=[];h(t,function(t){r.push(t)});r.length&&e.dispatchAction({type:"dataZoom",from:this.uid,batch:a.clone(r,true)})};function _(t,e){t.setIconStatus("back",l.count(e)>1?"emphasis":"normal")}r(333).register("dataZoom",f);r(1).registerPreprocessor(function(t){if(!t){return}var e=t.dataZoom||(t.dataZoom=[]);if(!a.isArray(e)){e=[e]}var r=t.toolbox;if(r){if(a.isArray(r)){r=r[0]}if(r&&r.feature){var i=r.feature.dataZoom;n("xAxis",i);n("yAxis",i)}}function n(t,r){if(!r){return}var i=t+"Index";var n=r[i];if(n!=null&&!a.isArray(n)){n=n===false?[]:[n]}o(t,function(r,o){if(n!=null&&a.indexOf(n,o)===-1){return}var s={type:"select",$fromToolbox:true,id:v+t+o};s[i]=o;e.push(s)})}function o(e,r){var i=t[e];if(!a.isArray(i)){i=i?[i]:[]}h(i,r)}});t.exports=f},function(t,e,r){var a=r(3);var i=a.each;var n="\0_ec_hist_store";var o={push:function(t,e){var r=s(t);i(e,function(e,a){var i=r.length-1;for(;i>=0;i--){var n=r[i];if(n[a]){break}}if(i<0){var o=t.queryComponents({mainType:"dataZoom",subType:"select",id:a})[0];if(o){var s=o.getPercentRange();r[0][a]={dataZoomId:a,start:s[0],end:s[1]}}}});r.push(e)},pop:function(t){var e=s(t);var r=e[e.length-1];e.length>1&&e.pop();var a={};i(r,function(t,r){for(var i=e.length-1;i>=0;i--){var t=e[i][r];if(t){a[r]=t;break}}});return a},clear:function(t){t[n]=null},count:function(t){return s(t).length}};function s(t){var e=t[n];if(!e){e=t[n]=[{}]}return e}t.exports=o},function(t,e,r){r(287);r(288);r(290);r(342);r(343);r(298);r(299)},function(t,e,r){var a=r(288);t.exports=a.extend({type:"dataZoom.select"})},function(t,e,r){t.exports=r(290).extend({type:"dataZoom.select"})},function(t,e,r){"use strict";var a=r(340);function i(t){this.model=t}i.defaultOption={show:true,icon:"M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5",title:"还原"};var n=i.prototype;n.onclick=function(t,e,r){a.clear(t);e.dispatchAction({type:"restore",from:this.uid})};r(333).register("restore",i);r(1).registerAction({type:"restore",event:"restore",update:"prepareAndUpdate"},function(t,e){e.resetOption("recreate")});t.exports=i},function(t,e,r){r(346);r(77).registerPainter("vml",r(348))},function(t,e,r){if(!r(78).canvasSupported){var a=r(16);var i=r(15);var n=r(48).CMD;var o=r(38);var s=r(14);var l=r(47);var u=r(45);var h=r(59);var c=r(62);var v=r(44);var f=r(4);var d=r(347);var p=Math.round;var g=Math.sqrt;var m=Math.abs;var y=Math.cos;var x=Math.sin;var _=Math.max;var w=a.applyTransform;var b=",";var M="progid:DXImageTransform.Microsoft";var S=21600;var I=S/2;var A=1e5;var T=1e3;var C=function(t){t.style.cssText="position:absolute;left:0;top:0;width:1px;height:1px;";t.coordsize=S+","+S;t.coordorigin="0,0"};var L=function(t){return String(t).replace(/&/g,"&amp;").replace(/"/g,"&quot;")};var D=function(t,e,r){return"rgb("+[t,e,r].join(",")+")"};var k=function(t,e){if(e&&t&&e.parentNode!==t){t.appendChild(e)}};var P=function(t,e){if(e&&t&&e.parentNode===t){t.removeChild(e)}};var z=function(t,e,r){return(parseFloat(t)||0)*A+(parseFloat(e)||0)*T+r};var R=function(t,e){if(typeof t==="string"){if(t.lastIndexOf("%")>=0){return parseFloat(t)/100*e}return parseFloat(t)}return t};var E=function(t,e,r){var a=o.parse(e);r=+r;if(isNaN(r)){r=1}if(a){t.color=D(a[0],a[1],a[2]);t.opacity=r*a[3]}};var O=function(t){var e=o.parse(t);return[D(e[0],e[1],e[2]),e[3]]};var V=function(t,e,r){var a=e.fill;if(a!=null){if(a instanceof f){var i;var n=0;var o=[0,0];var s=0;var l=1;var u=r.getBoundingRect();var h=u.width;var c=u.height;if(a.type==="linear"){i="gradient";var v=r.transform;var d=[a.x*h,a.y*c];var p=[a.x2*h,a.y2*c];if(v){w(d,d,v);w(p,p,v)}var g=p[0]-d[0];var m=p[1]-d[1];n=Math.atan2(g,m)*180/Math.PI;if(n<0){n+=360}if(n<1e-6){n=0}}else{i="gradientradial";var d=[a.x*h,a.y*c];var v=r.transform;var y=r.scale;var x=h;var b=c;o=[(d[0]-u.x)/x,(d[1]-u.y)/b];if(v){w(d,d,v)}x/=y[0]*S;b/=y[1]*S;var M=_(x,b);s=2*0/M;l=2*a.r/M-s}var I=a.colorStops.slice();I.sort(function(t,e){return t.offset-e.offset});var A=I.length;var T=[];var C=[];for(var L=0;L<A;L++){var D=I[L];var k=O(D.color);C.push(D.offset*l+s+" "+k[0]);if(L===0||L===A-1){T.push(k)}}if(A>=2){var P=T[0][0];var z=T[1][0];var R=T[0][1]*e.opacity;var V=T[1][1]*e.opacity;t.type=i;t.method="none";t.focus="100%";t.angle=n;t.color=P;t.color2=z;t.colors=C.join(",");t.opacity=V;t.opacity2=R}if(i==="radial"){t.focusposition=o.join(",")}}else{E(t,a,e.opacity)}}};var N=function(t,e){if(e.lineJoin!=null){t.joinstyle=e.lineJoin}if(e.miterLimit!=null){t.miterlimit=e.miterLimit*S}if(e.lineCap!=null){t.endcap=e.lineCap}if(e.lineDash!=null){t.dashstyle=e.lineDash.join(" ")}if(e.stroke!=null&&!(e.stroke instanceof f)){E(t,e.stroke,e.opacity)}};var B=function(t,e,r,a){var i=e=="fill";var n=t.getElementsByTagName(e)[0];if(r[e]!=null&&r[e]!=="none"&&(i||!i&&r.lineWidth)){t[i?"filled":"stroked"]="true";if(r[e]instanceof f){P(t,n)}if(!n){n=d.createNode(e)}i?V(n,r,a):N(n,r);k(t,n)}else{t[i?"filled":"stroked"]="false";P(t,n)}};var G=[[],[],[]];var F=function(t,e){var r=n.M;var a=n.C;var i=n.L;var o=n.A;var s=n.Q;var l=[];var u;var h;var c;var v;var f;var d;for(v=0;v<t.length;){c=t[v++];h="";u=0;switch(c){case r:h=" m ";u=1;f=t[v++];d=t[v++];G[0][0]=f;G[0][1]=d;break;case i:h=" l ";u=1;f=t[v++];d=t[v++];G[0][0]=f;G[0][1]=d;break;case s:case a:h=" c ";u=3;var m=t[v++];var _=t[v++];var M=t[v++];var A=t[v++];var T;var C;if(c===s){T=M;C=A;M=(M+2*m)/3;A=(A+2*_)/3;m=(f+2*m)/3;_=(d+2*_)/3}else{T=t[v++];C=t[v++]}G[0][0]=m;G[0][1]=_;G[1][0]=M;G[1][1]=A;G[2][0]=T;G[2][1]=C;f=T;d=C;break;case o:var L=0;var D=0;var k=1;var P=1;var z=0;if(e){L=e[4];D=e[5];k=g(e[0]*e[0]+e[1]*e[1]);P=g(e[2]*e[2]+e[3]*e[3]);z=Math.atan2(-e[1]/P,e[0]/k)}var R=t[v++];var E=t[v++];var O=t[v++];var V=t[v++];var N=t[v++]+z;var B=t[v++]+N+z;v++;var F=t[v++];var W=R+y(N)*O;var H=E+x(N)*V;var m=R+y(B)*O;var _=E+x(B)*V;var Z=F?" wa ":" at ";if(Math.abs(W-m)<1e-10&&F){W+=270/S}l.push(Z,p(((R-O)*k+L)*S-I),b,p(((E-V)*P+D)*S-I),b,p(((R+O)*k+L)*S-I),b,p(((E+V)*P+D)*S-I),b,p((W*k+L)*S-I),b,p((H*P+D)*S-I),b,p((m*k+L)*S-I),b,p((_*P+D)*S-I));f=m;d=_;break;case n.R:var q=G[0];var j=G[1];q[0]=t[v++];q[1]=t[v++];j[0]=q[0]+t[v++];j[1]=q[1]+t[v++];if(e){w(q,q,e);w(j,j,e)}q[0]=p(q[0]*S-I);j[0]=p(j[0]*S-I);q[1]=p(q[1]*S-I);j[1]=p(j[1]*S-I);l.push(" m ",q[0],b,q[1]," l ",j[0],b,q[1]," l ",j[0],b,j[1]," l ",q[0],b,j[1]);break;case n.Z:l.push(" x ")}if(u>0){l.push(h);for(var U=0;U<u;U++){var X=G[U];e&&w(X,X,e);l.push(p(X[0]*S-I),b,p(X[1]*S-I),U<u-1?b:"")}}}return l.join("")};v.prototype.brushVML=function(t){var e=this.style;var r=this._vmlEl;if(!r){r=d.createNode("shape");C(r);this._vmlEl=r}B(r,"fill",e,this);B(r,"stroke",e,this);var a=this.transform;var i=a!=null;var n=r.getElementsByTagName("stroke")[0];if(n){var o=e.lineWidth;if(i&&!e.strokeNoScale){var s=a[0]*a[3]-a[1]*a[2];o*=g(m(s))}n.weight=o+"px"}var l=this.path;if(this.__dirtyPath){l.beginPath();this.buildPath(l,this.shape);this.__dirtyPath=false}r.path=F(l.data,this.transform);r.style.zIndex=z(this.zlevel,this.z,this.z2);k(t,r);if(e.text){this.drawRectText(t,this.getBoundingRect())}};v.prototype.onRemove=function(t){P(t,this._vmlEl);this.removeRectText(t)};v.prototype.onAdd=function(t){k(t,this._vmlEl);this.appendRectText(t)};var W=function(t){return typeof t==="object"&&t.tagName&&t.tagName.toUpperCase()==="IMG"};h.prototype.brushVML=function(t){var e=this.style;var r=e.image;var a;var i;if(W(r)){var n=r.src;if(n===this._imageSrc){a=this._imageWidth;i=this._imageHeight}else{var o=r.runtimeStyle;var s=o.width;var l=o.height;o.width="auto";o.height="auto";a=r.width;i=r.height;o.width=s;o.height=l;this._imageSrc=n;this._imageWidth=a;this._imageHeight=i}r=n}else{if(r===this._imageSrc){a=this._imageWidth;i=this._imageHeight}}if(!r){return}var u=e.x||0;var h=e.y||0;var c=e.width;var v=e.height;var f=e.sWidth;var m=e.sHeight;var y=e.sx||0;var x=e.sy||0;var S=f&&m;var I=this._vmlEl;if(!I){I=d.doc.createElement("div");C(I);this._vmlEl=I}var A=I.style;var T=false;var L;var D=1;var P=1;if(this.transform){L=this.transform;D=g(L[0]*L[0]+L[1]*L[1]);P=g(L[2]*L[2]+L[3]*L[3]);T=L[1]||L[2]}if(T){var R=[u,h];var E=[u+c,h];var O=[u,h+v];var V=[u+c,h+v];w(R,R,L);w(E,E,L);w(O,O,L);w(V,V,L);var N=_(R[0],E[0],O[0],V[0]);var B=_(R[1],E[1],O[1],V[1]);var G=[];G.push("M11=",L[0]/D,b,"M12=",L[2]/P,b,"M21=",L[1]/D,b,"M22=",L[3]/P,b,"Dx=",p(u*D+L[4]),b,"Dy=",p(h*P+L[5]));A.padding="0 "+p(N)+"px "+p(B)+"px 0";A.filter=M+".Matrix("+G.join("")+", SizingMethod=clip)"}else{if(L){u=u*D+L[4];h=h*P+L[5]}A.filter="";A.left=p(u)+"px";A.top=p(h)+"px"}var F=this._imageEl;var H=this._cropEl;if(!F){F=d.doc.createElement("div");this._imageEl=F}var Z=F.style;if(S){if(!(a&&i)){var q=new Image;var j=this;q.onload=function(){q.onload=null;a=q.width;i=q.height;Z.width=p(D*a*c/f)+"px";Z.height=p(P*i*v/m)+"px";j._imageWidth=a;j._imageHeight=i;j._imageSrc=r};q.src=r}else{Z.width=p(D*a*c/f)+"px";Z.height=p(P*i*v/m)+"px"}if(!H){H=d.doc.createElement("div");H.style.overflow="hidden";this._cropEl=H}var U=H.style;U.width=p((c+y*c/f)*D);U.height=p((v+x*v/m)*P);U.filter=M+".Matrix(Dx="+-y*c/f*D+",Dy="+-x*v/m*P+")";if(!H.parentNode){I.appendChild(H)}if(F.parentNode!=H){H.appendChild(F)}}else{Z.width=p(D*c)+"px"
;Z.height=p(P*v)+"px";I.appendChild(F);if(H&&H.parentNode){I.removeChild(H);this._cropEl=null}}var X="";var Y=e.opacity;if(Y<1){X+=".Alpha(opacity="+p(Y*100)+") "}X+=M+".AlphaImageLoader(src="+r+", SizingMethod=scale)";Z.filter=X;I.style.zIndex=z(this.zlevel,this.z,this.z2);k(t,I);if(e.text){this.drawRectText(t,this.getBoundingRect())}};h.prototype.onRemove=function(t){P(t,this._vmlEl);this._vmlEl=null;this._cropEl=null;this._imageEl=null;this.removeRectText(t)};h.prototype.onAdd=function(t){k(t,this._vmlEl);this.appendRectText(t)};var H="normal";var Z={};var q=0;var j=100;var U=document.createElement("div");var X=function(t){var e=Z[t];if(!e){if(q>j){q=0;Z={}}var r=U.style;var a;try{r.font=t;a=r.fontFamily.split(",")[0]}catch(t){}e={style:r.fontStyle||H,variant:r.fontVariant||H,weight:r.fontWeight||H,size:parseFloat(r.fontSize||12)|0,family:a||"Microsoft YaHei"};Z[t]=e;q++}return e};var Y;s.measureText=function(t,e){var r=d.doc;if(!Y){Y=r.createElement("div");Y.style.cssText="position:absolute;top:-20000px;left:0;"+"padding:0;margin:0;border:none;white-space:pre;";d.doc.body.appendChild(Y)}try{Y.style.font=e}catch(t){}Y.innerHTML="";Y.appendChild(r.createTextNode(t));return{width:Y.offsetWidth}};var K=new i;var Q=function(t,e,r,a){var i=this.style;var n=i.text;if(!n){return}var o;var l;var u=i.textAlign;var h=X(i.textFont);var c=h.style+" "+h.variant+" "+h.weight+" "+h.size+'px "'+h.family+'"';var v=i.textBaseline;var f=i.textVerticalAlign;r=r||s.getBoundingRect(n,c,u,v);var g=this.transform;if(g&&!a){K.copy(e);K.applyTransform(g);e=K}if(!a){var m=i.textPosition;var y=i.textDistance;if(m instanceof Array){o=e.x+R(m[0],e.width);l=e.y+R(m[1],e.height);u=u||"left";v=v||"top"}else{var x=s.adjustTextPositionOnRect(m,e,r,y);o=x.x;l=x.y;u=u||x.textAlign;v=v||x.textBaseline}}else{o=e.x;l=e.y}if(f){switch(f){case"middle":l-=r.height/2;break;case"bottom":l-=r.height;break}v="top"}var _=h.size;switch(v){case"hanging":case"top":l+=_/1.75;break;case"middle":break;default:l-=_/2.25;break}switch(u){case"left":break;case"center":o-=r.width/2;break;case"right":o-=r.width;break}var M=d.createNode;var S=this._textVmlEl;var I;var A;var T;if(!S){S=M("line");I=M("path");A=M("textpath");T=M("skew");A.style["v-text-align"]="left";C(S);I.textpathok=true;A.on=true;S.from="0 0";S.to="1000 0.05";k(S,T);k(S,I);k(S,A);this._textVmlEl=S}else{T=S.firstChild;I=T.nextSibling;A=I.nextSibling}var D=[o,l];var P=S.style;if(g&&a){w(D,D,g);T.on=true;T.matrix=g[0].toFixed(3)+b+g[2].toFixed(3)+b+g[1].toFixed(3)+b+g[3].toFixed(3)+",0,0";T.offset=(p(D[0])||0)+","+(p(D[1])||0);T.origin="0 0";P.left="0px";P.top="0px"}else{T.on=false;P.left=p(o)+"px";P.top=p(l)+"px"}A.string=L(n);try{A.style.font=c}catch(t){}B(S,"fill",{fill:a?i.fill:i.textFill,opacity:i.opacity},this);B(S,"stroke",{stroke:a?i.stroke:i.textStroke,opacity:i.opacity,lineDash:i.lineDash},this);S.style.zIndex=z(this.zlevel,this.z,this.z2);k(t,S)};var $=function(t){P(t,this._textVmlEl);this._textVmlEl=null};var J=function(t){k(t,this._textVmlEl)};var tt=[l,u,h,v,c];for(var et=0;et<tt.length;et++){var rt=tt[et].prototype;rt.drawRectText=Q;rt.removeRectText=$;rt.appendRectText=J}c.prototype.brushVML=function(t){var e=this.style;if(e.text){this.drawRectText(t,{x:e.x||0,y:e.y||0,width:0,height:0},this.getBoundingRect(),true)}};c.prototype.onRemove=function(t){this.removeRectText(t)};c.prototype.onAdd=function(t){this.appendRectText(t)}}},function(t,e,r){if(!r(78).canvasSupported){var a="urn:schemas-microsoft-com:vml";var i;var n=window;var o=n.document;var s=false;try{!o.namespaces.zrvml&&o.namespaces.add("zrvml",a);i=function(t){return o.createElement("<zrvml:"+t+' class="zrvml">')}}catch(t){i=function(t){return o.createElement("<"+t+' xmlns="'+a+'" class="zrvml">')}}var l=function(){if(s){return}s=true;var t=o.styleSheets;if(t.length<31){o.createStyleSheet().addRule(".zrvml","behavior:url(#default#VML)")}else{t[0].addRule(".zrvml","behavior:url(#default#VML)")}};t.exports={doc:o,initVML:l,createNode:i}}},function(t,e,r){var a=r(39);var i=r(347);function n(t){return parseInt(t,10)}function o(t,e){i.initVML();this.root=t;this.storage=e;var r=document.createElement("div");var a=document.createElement("div");r.style.cssText="display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;";a.style.cssText="position:absolute;left:0;top:0;";t.appendChild(r);this._vmlRoot=a;this._vmlViewport=r;this.resize();var n=e.delFromMap;var o=e.addToMap;e.delFromMap=function(t){var r=e.get(t);n.call(e,t);if(r){r.onRemove&&r.onRemove(a)}};e.addToMap=function(t){t.onAdd&&t.onAdd(a);o.call(e,t)};this._firstPaint=true}o.prototype={constructor:o,getViewportRoot:function(){return this._vmlViewport},refresh:function(){var t=this.storage.getDisplayList(true,true);this._paintList(t)},_paintList:function(t){var e=this._vmlRoot;for(var r=0;r<t.length;r++){var a=t[r];if(a.invisible||a.ignore){if(!a.__alreadyNotVisible){a.onRemove(e)}a.__alreadyNotVisible=true}else{if(a.__alreadyNotVisible){a.onAdd(e)}a.__alreadyNotVisible=false;if(a.__dirty){a.beforeBrush&&a.beforeBrush();(a.brushVML||a.brush).call(a,e);a.afterBrush&&a.afterBrush()}}a.__dirty=false}if(this._firstPaint){this._vmlViewport.appendChild(e);this._firstPaint=false}},resize:function(){var t=this._getWidth();var e=this._getHeight();if(this._width!=t&&this._height!=e){this._width=t;this._height=e;var r=this._vmlViewport.style;r.width=t+"px";r.height=e+"px"}},dispose:function(){this.root.innerHTML="";this._vmlRoot=this._vmlViewport=this.storage=null},getWidth:function(){return this._width},getHeight:function(){return this._height},_getWidth:function(){var t=this.root;var e=t.currentStyle;return(t.clientWidth||n(e.width))-n(e.paddingLeft)-n(e.paddingRight)|0},_getHeight:function(){var t=this.root;var e=t.currentStyle;return(t.clientHeight||n(e.height))-n(e.paddingTop)-n(e.paddingBottom)|0}};function s(t){return function(){a('In IE8.0 VML mode painter not support method "'+t+'"')}}var l=["getLayer","insertLayer","eachLayer","eachBuildinLayer","eachOtherLayer","getLayers","modLayer","delLayer","clearLayer","toDataURL","pathToImage"];for(var u=0;u<l.length;u++){var h=l[u];o.prototype[h]=s(h)}t.exports=o}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
