$(document).ready(function(){$currentObj.init()});$currentObj=function(){var e={monitorAudioObj:-1};var t={};e.init=function(){$(".operateList > li.operate").click(function(){var e=$(this),i=e.parents(".exerciseOperateArea"),n=e.data("type"),a=i.data("resource_id"),s=i.data("resource_type"),d=i.data("exercise_id"),c=i.data("text_content"),l=i.data("img_urls"),u=i.data("audio_urls"),f=i.data("exercise_title");t={textContent:c,imgUrlsArr:l,audioUrlsArr:u,exerciseTitle:f};switch(n){case"look_exercise_content":o();break;case"delete_exercise":r(d);break;default:console.log("参数错误");break}});$("#closeExeDetailWindow").click(function(){baseUtils.hideWindow("lookExerciseDetailWindow")});$("#audioContentArea").on("click",".audioPlayStateIcon",function(){var e=$(this),t=e.parents(".audioController").siblings(".audioDom")[0],i=e.hasClass("playing");if(i){t.pause()}else{t.play()}});$("#closeExeDetailWindow").click(function(){$("#audioContentArea").html("")})};function i(t,i){clearInterval(e.monitorAudioObj);e.monitorAudioObj=setInterval(a,500,t,i);$("#audioContentArea").find(".audioPlayStateIcon").eq(t).removeClass("paused").addClass("playing")}function n(t,i,n){if(n){i.currentTime=0;$("#audioContentArea").find(".finishedProgress").eq(t).css({width:"0%"})}clearInterval(e.monitorAudioObj);$("#audioContentArea").find(".audioPlayStateIcon").eq(t).removeClass("playing").addClass("paused")}function a(e,t){var i=t.currentTime,n=t.duration,a=100*(i/n);$("#audioContentArea").find(".finishedProgress").eq(e).css({width:a+"%"})}function o(){$("#windowHeader").text(t.exerciseTitle);$("#textContentArea").text(t.textContent);if(t.imgUrlsArr.length>0){var e="";$.each(t.imgUrlsArr,function(t,i){e+='<div class="singleExeImg">'+'<img src="'+i+'">'+"</div>"});$("#imgContentArea").html(e)}else{$("#imgContentArea").html("")}if(t.audioUrlsArr.length>0){var a="";$.each(t.audioUrlsArr,function(e,t){a+='<div class="singleExeAudio">'+'<audio class="audioDom" src="'+t+'"></audio>'+'<div class="audioController">'+'<div class="audioPlayStateIcon paused"></div>'+'<div class="progressBar">'+'<span class="finishedProgress"></span>'+"</div>"+'<div class="audioLengthSecond"><span></span>"</div>'+"</div>"+"</div>"});$("#audioContentArea").html(a)}else{$("#audioContentArea").html("")}baseUtils.showWindow("lookExerciseDetailWindow");$.each(document.getElementsByTagName("audio"),function(e,t){t.addEventListener("playing",function(){i(e,t)});t.addEventListener("play",function(){i(e,t)});t.addEventListener("pause",function(){n(e,t)});t.addEventListener("ended",function(){n(e,t,true)});t.addEventListener("canplay",function(){$("#audioContentArea").find(".audioLengthSecond>span").eq(e).text(parseInt(t.duration))})})}function r(e){$.alert("是否确认删除",{btn:3,onOk:function(){s(e)}})}function s(e){$.ajax("/exercise/change_exercise_state",{type:"POST",dataType:"json",data:{state:2,exercise_id:e,exercise_book_id:GetQueryString("exercise_book_id")},success:function(e){if(e.code==0){baseUtils.show.blueTip("删除成功");window.location.reload()}else{alert("网络问题，请稍后再试")}},error:function(e,t,i){console.log(i);alert("服务器出小差了，请稍后再试！")}})}return e}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
