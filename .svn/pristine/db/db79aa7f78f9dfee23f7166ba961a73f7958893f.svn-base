<?php
/**
 * Created by PhpStorm.
 * User: fuhaiwen
 * Date: 2017/2/21
 * Time: 11:13
 */

namespace App\Http\Controllers;

use App\Http\Controllers\Tools\AccountSystem;
use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\StringConstants;
use App\Http\Controllers\Tools\Utils;
use EasyWeChat\Foundation\Application;
use EasyWeChat\Payment\Order;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;

class WalletController extends Controller
{

	private $request;
	private $app_id;

	public function __construct (Request $request)
	{
		$this->request = $request;
		//        $this->app_id = AppUtils::getAppID();
	}

	/**
	 * 微信预支付请求
	 */
	public function pre_wechatPay ()
	{

		$params     = [];
		$order_id   = Utils::getOrderId();
		$app_id     = AppUtils::getAppID();
		$order_type = Input::get('type', '1');//1-充值;2:开通成长版;3:开通专业版;
		$price      = Input::get('price', '1');//金额;
		$created_at = Utils::getTime();

		// 从数据库t_app_conf中获取前端传来的app_id对应的version_type
		$user_local_version         = \DB::connection('mysql_config')->table('t_app_conf')->where('app_id', $app_id)->where('wx_app_type', '1')
			->pluck('version_type');
		$data['user_local_version'] = $user_local_version;
		// return $this->result($data);

		//TODO:测试
		//$price = 1;

		if (!Utils::isValidNumber($price)) {
			return response()->json(Utils::pack(1, StringConstants::Code_Failed, "订单价格格式错误!"));
		}
		if (Utils::isEmptyString($order_type)) {
			return response()->json(Utils::pack("0", StringConstants::Code_Failed, "订单类型为空!"));
		}

		$order_name = '';
		if ($order_type == 1) {
			$order_name = "账户充值";
			if ($price < 10000) {
				return response()->json(Utils::pack(1, StringConstants::Code_Failed, "充值金额不能低于100!"));
			}
		} else if ($order_type == 2) {
			$order_name = "开通成长版";
			$price      = env('GROWUP_PRICE');//单位分:价格100元
		} else if ($order_type == 3) {
			$order_name = "开通专业版";
			$price      = env('VIP_PRICE');//单位分:价格4800元

		}

		//TODO:测试
		//        $price = 1;//单位:分

		//生成内部订单
		$params['order_id']   = $order_id;
		$params['app_id']     = $app_id;
		$params['order_type'] = $order_type;
		$params['price']      = $price;
		$params['created_at'] = $created_at;
		$params['order_name'] = $order_name;
		// $params['user_charge_version']=$user_charge_version;

		$result_order = \DB::connection('db_ex_finance')->table('t_balance_orders')->insert($params);

		if (empty($result_order)) {
			return response()->json(Utils::pack(1, StringConstants::Code_Failed, "生成订单失败!"));
		}

		//使用easywechat
		$attributes = [
			'trade_type'       => 'NATIVE', // JSAPI，NATIVE，APP...
			'body'             => $order_name,
			'detail'           => '测试测试',
			'out_trade_no'     => $order_id,
			'total_fee'        => $price,
			'notify_url'       => env('ADMIN_HTTPS') . 'wechatPay_hook', // 支付结果通知网址，如果不设置则会使用配置里的默认地址
			'spbill_create_ip' => Utils::getIp(), //
			'product_id'       => $order_id, // 商户id
			// ...
		];



		$app     = $this->get_app_wechat();
		$payment = $app->payment;

		$order = new Order($attributes);

		$result = $payment->prepare($order);;

		if ($result->return_code == 'SUCCESS' && $result->result_code == 'SUCCESS') {


			$prepayId = $result->prepay_id;
			$code_url = $result->code_url;

			//将微信预支付单号更新至t_balance_orders表
			$update_result = \DB::connection('db_ex_finance')->update("update t_balance_orders set out_order_id = '$prepayId' where app_id = '$app_id' and order_id = '$order_id'");

			if ($update_result == 0) {
				return response()->json(Utils::pack(1, StringConstants::Code_Failed, "更新订单失败!"));
			}
			$data['code_url'] = $code_url;
			$data['order_id'] = $order_id;

			return $this->result($data);
		}

	}

	/**
	 * 配置wechat扫码支付
	 */
	private function get_app_wechat ()
	{

		$options = [

			'app_id' => env('WECHAT_APPID', 'wxcac9950395da04f5'),

			'payment' => [
				'merchant_id' => env('WECHAT_PAYMENT_MERCHANT_ID', '1339282101'),
				'key'         => env('WECHAT_PAYMENT_KEY', '26530270744115114155411024646395'),
			],
		];

		$app = new Application($options);

		return $app;
	}

	public function result ($data)
	{
		if (Utils::isEmptyString($data)) {
			return response()->json(Utils::pack("", StringConstants::Code_Failed, StringConstants::Msg_Failed));
		} else {
			return response()->json(Utils::pack($data));
		}
	}

	public function wechatPay_hook ()
	{


		//        $wechat = app('wechat');
		$app = $this->get_app_wechat();


		$response = $app->payment->handleNotify(function($notify, $successful) {

			// 使用通知里的 "微信支付订单号" 或者 "商户订单号" 去自己的数据库找到订单

			//            $app_id = AppUtils::getAppID();

			$order_id = $notify->out_trade_no;
			$order    = $this->queryOrder($order_id);
			if (count($order) == 0) { // 如果订单不存在
				return 'Order not exist.'; // 告诉微信，我已经处理完了，订单没找到，别再通知我了
			}
			// 如果订单存在
			// 检查订单是否已经更新过支付状态
			if ($order->order_state == 1) { // 假设订单字段“支付时间”不为空代表已经支付
				return true; // 已经支付成功了就不再更新了
			}
			// 用户是否支付成功
			if ($successful) {
				// 不是已经支付状态则修改为已经支付状态
				$order_state = 1;//订单支付成功
			} else { // 用户支付失败
				$order_state = 2;//订单支付失败
			}
			// 保存订单
			//添加事务,以下步骤一步出错全部回滚
			\DB::beginTransaction();
			$update_result = \DB::update("update db_ex_finance.t_balance_orders set order_state = '$order_state' where order_id = '$order_id'");

			if ($update_result == 0) {
				return response()->json(Utils::pack(1, StringConstants::Code_Failed, "更新订单失败!"));
			} else {
				if ($order_state == 1) {
					if ($order->order_type != 1) {//非账户充值

						$result = $this->updateAccountStauts($order->price, $order->order_type, $order_id);
					} else {//账户充值
						$result = $this->updateAccountAmount($order->price, $order_id);
					}

					if ($result) {//操作成功
						//提交事务
						\DB::commit();
					} else {//操作失败
						//回滚
						\DB::rollBack();
					}
				} else {
					//订单支付失败,事务提交
					\DB::commit();
				}
			}

			return true; // 返回处理完成
		});

		return $response;
	}

	/**
	 * 查询订单是否存在
	 */
	private function queryOrder ($order_id)
	{
		$result = \DB::connection('db_ex_finance')
			->table('t_balance_orders')
			->where('order_id', '=', $order_id)
			->first();

		return $result;
	}

	/**
	 * 更新客户版本
	 */
	private function updateAccountStauts ($fee, $order_type, $order_id)
	{

		$app_id = $this->getAppIdByOrderId($order_id);

		$params = [];

		$params['app_id'] = $app_id;
		//        \DB::beginTransaction();

		try {
			$account_recharge = 0;
			if ($order_type == 2) {//购买成长型

				$channelType      = AccountSystem::TYPE_GROWUP_OPEN_PRESENT;
				$recharge_fee     = 5000;//单位:分 送50
				$account_recharge = 10000;////账户充值100
				$version_type     = 2;

				$params['gift_buy']     = 1;//赠送好友
				$params['try_audio']    = 1;//试听分享
				$params['has_activity'] = 1;//活动管理
				$params['has_que']      = 1;//付费问答

				//用户定向推送(即将上线)
				//首页分类导航(即将上线)
				//会员(按时长收费)(即将上线)

				$result_insert_recharge = AccountSystem::account_money_record($app_id, AccountSystem::TYPE_OPEN_RECHARGE, $account_recharge, $order_id);//账户充值

			} else if ($order_type == 3) {//购买尊享型

				$params['gift_buy']     = 1;//赠送好友
				$params['try_audio']    = 1;//试听分享
				$params['has_activity'] = 1;//活动管理
				$params['has_que']      = 1;//付费问答

				//用户定向推送(即将上线)
				//首页分类导航(即将上线)
				//会员(按时长收费)(即将上线)
				$params['if_caption_define'] = 1;//首页名称自定义
				$params['daily_sign']        = 1;//日签分享
				//                $params['daily_sign_text'] = 1;//日签底部的提示语
				//                $params['lucky_money'] = 1;//分享红包
				//                $params['subscribe_task'] = 1;//新增用户分析
				$params['alive_by_video'] = 1;//视频直播
				//视频推流+直播互动(即将上线)
				//视频推流+直播互动(即将上线)
				//新功能首发试用
				//定期回访
				//运营数据分析+j建议

				//获取客户配置信息
				$recharge_fee = 45000;//单位:分
				$app_info     = AppUtils::getAppConfInfo($app_id);
				if ($app_info) {
					if ($app_info->version_type == 1) {
						$recharge_fee = 45000;//单位:分
					} else if ($app_info->version_type == 2) {
						$recharge_fee = 40000;//单位:分
					}
				}

				//                if(session('version_type') == 1){
				//                    $recharge_fee = 45000;//单位:分
				//                }elseif(session('version_type') == 2){
				//                    $recharge_fee = 40000;//单位:分
				//                }
				$channelType  = AccountSystem::TYPE_VIP_OPEN_PRESENT;
				$version_type = 3;

				//开通充值4800

				$result_insert_recharge = AccountSystem::account_money_record($app_id, AccountSystem::TYPE_OPEN_RECHARGE, 480000, $order_id);//开通充值
				$result_insert_charge   = AccountSystem::account_money_record($app_id, AccountSystem::TYPE_CHARGE_OPEN, 480000, $order_id);//开通扣费

			}

			//记录开通成长版赠送流水记录
			$result_insert = AccountSystem::account_money_record($app_id, $channelType, $recharge_fee, $order_id, $order_id);

			if ($result_insert) {
				//更新客户使用版本
				$expire_time = date('Y-m-d H:i:s', strtotime('+1 year'));

				//,balance = balance+'$recharge_fee'+'$account_recharge'
				//                $result_update = \DB::connection('mysql_config')->update("update t_app_conf set version_type = '$version_type',balance = balance+'$recharge_fee' where app_id = '$app_id' and wx_app_type=1");
				$result_update = \DB::update("update db_ex_config.t_app_conf set version_type = '$version_type',expire_time='$expire_time' where app_id = '$app_id' and wx_app_type=1");
				if ($result_update) {

					//打开相对应的开关,即往表t_app_module中插入一条/更新字段
					//                    $result_app_module = \DB::connection('mysql_config')->table('t_app_module')->where('app_id','=',$app_id)->first();
					$result_app_module = \DB::select("select * from db_ex_config.t_app_module where app_id = '$app_id' limit 1");
					if ($result_app_module) {
						//更新

						$now = $params['updated_at'] = Utils::getTime();

						//                        $result_app = \DB::connection('mysql_config')
						//                            ->table('t_app_module')
						//                            ->where('app_id','=',$app_id)
						//                            ->update($params);
						if ($version_type == 2) {//成长版

							//                        $params['gift_buy'] = 1;//赠送好友
							//                        $params['try_audio'] = 1;//试听分享

							$result_kaiguan = \DB::update("update db_ex_config.t_app_module set updated_at = '$now',
gift_buy = 1,try_audio = 1,has_activity=1,has_que=1 where app_id = '$app_id'");
						} else if ($version_type == 3) {//专业版

							$params['gift_buy']  = 1;//赠送好友
							$params['try_audio'] = 1;//试听分享
							//用户定向推送(即将上线)
							//首页分类导航(即将上线)
							//会员(按时长收费)(即将上线)
							$params['if_caption_define'] = 1;//首页名称自定义
							$params['daily_sign']        = 1;//日签分享
							$params['alive_by_video']    = 1;//视频直播

							//                            $params['daily_sign_text'] = 1;//日签底部的提示语
							//                            $params['lucky_money'] = 1;//分享红包
							//                            $params['subscribe_task'] = 1;//新增用户分析
							//视频推流+直播互动(即将上线)
							//视频推流+直播互动(即将上线)
							//新功能首发试用
							//定期回访
							//运营数据分析+j建议

							$result_kaiguan = \DB::update("update db_ex_config.t_app_module set updated_at = '$now',
gift_buy = 1,try_audio = 1,if_caption_define = 1,has_que=1,alive_by_video=1,daily_sign = 1,has_activity=1 where app_id = '$app_id'");
						}


					} else {
						//插入

						$now = Utils::getTime();
						//                        $result_app = \DB::connection('mysql_config')->table('t_app_module')->insert($params);
						if ($order_type == 2) {//成长版
							$result_kaiguan = \DB::insert("insert into db_ex_config.t_app_module(app_id,has_que,has_activity,gift_buy,try_audio,created_at,updated_at)VALUES ('$app_id','1','1','1','1','$now','$now')");
						} else if ($order_type == 3) {//专业版
							$result_kaiguan = \DB::insert("insert into db_ex_config.t_app_module(app_id,has_que,has_activity,gift_buy,try_audio,created_at,updated_at,if_caption_define,daily_sign,alive_by_video)
                                      VALUES ('$app_id','1','1','1','1','$now','$now','1','1','1')");
						}
					}

					if ($result_kaiguan) {
						//设置session

						//                        session(['version_type'=>$version_type]);
						//                        \DB::commit();
						return true;
					} else {

						//                        \DB::rollBack();
						return false;
					}
				} else {

					//                    \DB::rollBack();
					return false;
				}
			} else {
				//                \DB::rollBack();
				return false;
			}

		} catch (\Exception $ex) {

			//            DB::rollBack();
			return false;
		}
	}

	private function getAppIdByOrderId ($order_id)
	{
		$result = $this->queryOrder($order_id);
		$app_id = '';
		if ($result) {
			$app_id = $result->app_id;
		}

		return $app_id;
	}

	/**
	 * 更新账户余额
	 */
	private function updateAccountAmount ($price, $order_id)
	{
		//.账户充值；

		//        \DB::beginTransaction();

		$app_id = $this->getAppIdByOrderId($order_id);
		$amount = $price;

		$charge_type = AccountSystem::TYPE_ACCOUNT_RECHARGE;

		//记录账户充值流水
		$resultWater = AccountSystem::account_money_record($app_id, $charge_type, $amount, $order_id);


		if (!empty($resultWater)) {
			//更新客户余额
			//            $result_update = \DB::connection('mysql_config')->update("update t_app_conf set balance = balance + '$price' where app_id='$app_id' and wx_app_type=1");
			//            $result_update = \DB::update("update db_ex_config.t_app_conf set balance = balance + '$price' where app_id='$app_id' and wx_app_type=1");
			//            if($result_update){
			//
			//                \DB::commit();
			//                return true;
			//            }else{
			//                \DB::rollBack();
			//                return false;
			//            }

			//                \DB::commit();
			return true;

		} else {

			//            \DB::rollBack();
			return false;
		}

	}

	/**
	 * 获取订单支付状态
	 */
	public function getPayResult ()
	{
		$order_id = Input::get('order_id', '');

		//后台主动查询订单支付状态
		$app = $this->get_app_wechat();

		$order_info = $this->queryOrder($order_id);
		if ($order_info) {
			if ($order_info->order_state == 1) {
				return $this->result("支付成功!");
			}
		}

		//查询该用户的订单(order_type = 2、3)
		$order_list = $this->queryAppOrderList($order_info->order_type);

		if ($order_list) {
			foreach ($order_list as $key => $order) {
				$order_id = $order->order_id;

				$order_info = $this->queryOrder($order_id);
				$result_pay = $app->payment->query($order_id);

				if ($result_pay["return_code"] == "SUCCESS"
					&& $result_pay["result_code"] == "SUCCESS"
					&& $result_pay["trade_state"] == "SUCCESS") {
					if ($result_pay["total_fee"] == $order_info->price) {


						//支付成功

						$ret = $this->opeator_pay_success($order_id);
						if ($ret) {
							return $this->result("支付成功!");

						} else {
							return response()->json(Utils::pack("0", StringConstants::Code_Failed, "支付尚未成功!"));

						}

					}
				}

				//获取支付结果
				$orderStatus = $this->queryOrder($order_id);
				if ($orderStatus->order_state == 1) {
					//支付成功
					return $this->result("支付成功!");
					//            return response()->json(Utils::pack("1", StringConstants::Code_Succeed, "支付成功!"));
				} else if ($orderStatus->order_state == 2) {
					//支付未成功
					//            return Utils::jsonResponse("支付尚未成功", StringConstants::Code_Error_Pay_Failed, StringConstants::Msg_Error_Pay_Failed);
					return response()->json(Utils::pack("0", StringConstants::Code_Failed, "支付尚未成功!"));
				}
			}
		}
	}

	private function queryAppOrderList ($order_type)
	{
		$app_id = AppUtils::getAppID();

		$order_list = \DB::table("db_ex_finance.t_balance_orders")
			->where("app_id", '=', $app_id)
			->where("order_type", '=', $order_type)
			->where("order_state", '=', 0)
			->get();

		return $order_list;
	}

	/**
	 * 微信支付结果回调异步通知请求
	 */

	private function opeator_pay_success ($order_id)
	{

		// 使用通知里的 "微信支付订单号" 或者 "商户订单号" 去自己的数据库找到订单

		//            $app_id = AppUtils::getAppID();

		$order = $this->queryOrder($order_id);
		if (count($order) == 0) { // 如果订单不存在
			return 'Order not exist.'; // 告诉微信，我已经处理完了，订单没找到，别再通知我了
		}
		// 如果订单存在
		// 检查订单是否已经更新过支付状态
		if ($order->order_state == 1) { // 假设订单字段“支付时间”不为空代表已经支付
			return false; // 已经支付成功了就不再更新了
		}
		// 用户是否支付成功

		$order_state = 1;//订单支付成功

		// 保存订单
		$update_result = \DB::connection('db_ex_finance')->update("update t_balance_orders set order_state = '$order_state' where order_id = '$order_id'");

		if ($update_result == 0) {
			return response()->json(Utils::pack(1, StringConstants::Code_Failed, "更新订单失败!"));
		} else {
			if ($order_state == 1) {
				if ($order->order_type != 1) {//非账户充值

					$result = $this->updateAccountStauts($order->price, $order->order_type, $order_id);
				} else {//账户充值
					$result = $this->updateAccountAmount($order->price, $order_id);
				}
			}
		}

		return true;
	}

}