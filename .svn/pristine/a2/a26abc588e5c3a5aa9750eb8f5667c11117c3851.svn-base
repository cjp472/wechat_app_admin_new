<?php

namespace App\Http\Controllers\Users;

use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\StringConstants;
use App\Http\Controllers\Tools\Utils;
use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;

class MiniProgramController extends Controller
{
    //
    protected $app_id;
    public function __construct(){
        $this->app_id = AppUtils::getAppID();
    }

    //小程序配置页
    public function configure(){
        //查询是否有独立小程序,获取小程序审核状态
        $url = env('MINI_STATUS','')."?app_id={$this->app_id}";
        $status_info = json_decode(file_get_contents($url));
        if ($status_info){
            if (is_object($status_info)
                &&property_exists($status_info,"code")
                &&$status_info->code === 0){
                $result_data = $status_info->data;
                if(is_object($result_data)
                    &&property_exists($result_data,"current_status")){
                    $status = $status_info->data->current_status->operate_type;
                }else{
                    $status = -1;
                }
            }else {
                $status = -1;
            }
        }else {
            $status = -1;
        }

        return $status==7?$this->index($status_info):$this->person();
    }

    // 小程序集
    public function person(){

        $switch = DB::connection('mysql_config')->table('t_app_module')
            ->where('app_id',$this->app_id)
            ->value('has_app_collection');


        $info = DB::connection("mysql_config")->table("t_app_conf")
            ->where('app_id','=',$this->app_id)
            ->where('wx_app_type', 0)
            ->first();

        // 获取小程序二维码url
        $url = env('QRCODE_PERSON_MINI_URL','')."?app_id={$this->app_id}";
//        dump($url);
//        exit;
        $img_info = json_decode(file_get_contents($url));
        if ($img_info){
            if ($img_info->code === 0){
                $img = $img_info->data;
            }else {
                $img = '';
            }
        }else {
            $img = '';
        }

        //如果不存在微信小程序的记录则插入
        if (empty($info)) {
            DB::connection('mysql_config')->insert("
                INSERT INTO t_app_conf (
                    app_id,
                    wx_app_type,
                    secrete_key,
                    set_id,
                    merchant_id,
                    wx_app_name,
                    wx_access_token_refresh_at,
                    wx_js_ticket,
                    wx_share_title,
                    wx_share_content,
                    wx_share_image,
                    created_at
                ) SELECT
                    app_id,
                    0,
                    secrete_key,
                    set_id,
                    merchant_id,
                    wx_app_name,
                    wx_access_token_refresh_at,
                    wx_js_ticket,
                    wx_share_title,
                    wx_share_content,
                    wx_share_image,
                    now()
                FROM
                    t_app_conf
                WHERE
                    app_id = '{$this->app_id}'
                AND wx_app_type = 1
            ");
            $info = DB::connection('mysql_config')->table('t_app_conf')->where('app_id',$this->app_id)->where('wx_app_type',0)->first();
        }


        return view('admin.accountSetting.mini.person',[
            'info' => $info,
            'switch' => $switch,
            'img'=>$img,
        ]);
    }

    // 小程序集开关
    public function personSwitch(Request $request){

        $switch = $request->input('switch',0);
        $old_switch = DB::connection('mysql_config')->table('t_app_module')
            ->where('app_id',$this->app_id)
            ->value('has_app_collection');
        if ($switch == $old_switch){
            return json_encode(['code'  => -1, 'msg'   => '参数错误', 'data'  =>[]]);
        }else {
            $update = DB::connection('mysql_config')->table('t_app_module')
                ->where('app_id',$this->app_id)
                ->update(['has_app_collection'=>$switch]);
            if ($update){
                return json_encode(['code'  => 0, 'msg'   => '变更成功', 'data'  =>[]]);
            }else {
                return json_encode(['code'  => -2, 'msg'   => '操作失败', 'data'  =>[]]);
            }
        }

    }

    // 独立小程序
    public function index($status_info = null){
        // 获取小程序和公众号配置信息
        $info = DB::connection('mysql_config')->table('t_app_conf')
            ->where('app_id',$this->app_id)
//            ->where('wx_app_type',0)
            ->get();

        // 获取小程序二维码url
        $url = env('QRCODE_MINI_URL','')."?app_id={$this->app_id}";
        $img_info = json_decode(file_get_contents($url));
        if ($img_info){
            if ($img_info->code === 0){
                $img = $img_info->data;
            }else {
                $img = '';
            }
        }else {
            $img = '';
        }

        if(empty($status_info)){
            // 获取小程序审核状态
            $url = env('MINI_STATUS','')."?app_id={$this->app_id}";
            $status_info = json_decode(file_get_contents($url));
        }
        if ($status_info){
            if ($status_info->code === 0){
                $status = $status_info->data->current_status->operate_type;
            }else {
                $status = -1;
            }
        }else {
            $status = -1;
        }


        foreach($info as $v){
            if ($v->wx_app_type == 1){
                $use_collection = $v->use_collection;
            }else {
                $info = $v;
            }
        }

        //查询是否开启付费内容
        $pay_switch = 0;
        $app_module = DB::select("SELECT * FROM db_ex_config.t_app_module_little_program WHERE app_id = ? limit 1 ;",[$this->app_id]);
        if(count($app_module)>0){
           if($app_module[0]->buy_android==1&&$app_module[0]->buy_ios==1){
               $pay_switch = 1;
           }
        }else{
            $pay_switch = -1;
        }
        return view('admin.accountSetting.mini.index',[
            'info' => $info,
            'status' => $status,
            'img' => $img,
            'use_collection' => $use_collection,
            'pay_switch'=>$pay_switch
        ]);
    }


    //引导页
    public function guide(){
        $auth = DB::connection('mysql_config')->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type',0)
            ->value('ifauth');

        return view('admin.accountSetting.mini.guide',[
            'auth'=>$auth,
            'app_id'=>$this->app_id
        ]);
    }

    // 授权   更新授权态
    public function authority(){
        $time = date('Y-m-d H:i:s');
        $ifauth = DB::connection('mysql_config')->table('t_app_conf')
            ->where('wx_app_type',0)
            ->where('app_id',$this->app_id)
            ->value('ifauth');
        $data = [];

        // 只有用户第一次授权的时候，会置位用户验证的状态
        if (!$ifauth){
            $data['pay_directory_verified'] = 0;
        }

        // 更新授权态
        $data['ifauth'] = 1;
        $data['updated_at'] = $time;
        $update=DB::connection("mysql_config")->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type',0)
            ->update($data);

        if($update) {
            return json_encode(['code'  => 0, 'msg'   => '更新成功', 'data'  =>[]]);
        } else {
            return json_encode(['code'  => -1, 'msg'   => '更新失败', 'data'  =>[]]);
        }
    }

    // 验证授权
    // 如果授权成功  会更新wx_app_id
    public function checkAuth(){
        $wx_app_id = DB::connection("mysql_config")->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type','=',0)
            ->value('wx_app_id');
        if($wx_app_id){
            return json_encode(['code'  => 0, 'msg'   => '授权成功', 'data'  =>[]]);
        } else {
            return json_encode(['code'  => -1, 'msg'   => '授权失败', 'data'  =>[]]);
        }
    }

    // 用户绑定开放平台有误，数据写入失败，重新更新写入状态
    public function updateBind(){
        $has_union_id = DB::connection('mysql_config')->table('t_app_module')
            ->where('app_id',$this->app_id)
            ->value('has_union_id');
        if ($has_union_id != 2) return json_encode(['code'  => -2, 'msg'   => '数据错误', 'data'  =>[]]);

        $update = DB::connection('mysql_config')->table('t_app_module')
            ->where('app_id',$this->app_id)
            ->update(['has_union_id'=>1]);
        if ($update){
            return json_encode(['code'  => 0, 'msg'   => '更新成功', 'data'  =>[]]);
        }else {
            return json_encode(['code'  => -1, 'msg'   => '更新失败', 'data'  =>[]]);
        }
    }

    //配置详情
    public function info(){
        $wx_app_id = DB::connection('mysql_config')->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type',1)
            ->value('wx_app_id');
        $info = DB::connection('mysql_config')->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type',0)
            ->first();
        $has_union_id = DB::connection('mysql_config')->table('t_app_module')
            ->where('app_id',$this->app_id)
            ->value('has_union_id');


        // 获取小程序状态，及数据写入状态
        $url = env('MINI_STATUS','')."?app_id={$this->app_id}";

        $status_info = json_decode(file_get_contents($url));
        $operate_at = "0000-00-00:00:00";
        $audited_fail_reason = "";
        if ($status_info){
            if ($status_info->code === 0){
                $status = $status_info->data->current_status->operate_type;
                $is_update = $status_info->data->union_id_updated;
                $operate_at = $status_info->data->current_status->operate_at;
                $audited_fail_reason = $status_info->data->current_status->audited_fail_reason;
            }else {
                $status = -1;
                $is_update = false;
            }
        }else {
            $status = -1;
            $is_update = false;
        }

        return view('admin.accountSetting.mini.info', [
            'info' => $info,
            'wx_app_id'=>$wx_app_id,
            'status'=>$status,
            'is_update'=>$is_update,
            'has_union_id'=> $has_union_id,
            'operate_at'=>$operate_at,
            'audited_fail_reason'=>$audited_fail_reason
        ]);
    }

    // 用户信息验证
    public function userCheck(Request $request){

//        DB::enableQueryLog();
        // 设定变量判定结果
        $result = false;
        $record = DB::connection('mysql')->select("SELECT * from t_users WHERE app_id = ? and  wx_app_open_id IS NOT NULL and wx_app_open_id != '' and wx_union_id IS NOT NULL and wx_union_id !='' and wx_open_id IS NOT NULL and wx_open_id !='';",[$this->app_id]);
        if(count($record)>0){
            $result = true;
        }
        if ($result){
            DB::connection('mysql_config')->table('t_app_conf')
                ->where('app_id',$this->app_id)
                ->where('wx_app_type',0)
                ->update([
                    'pay_directory_verified'=> 1,
                    'use_collection' => 0
                ]);
            return json_encode(['code'  => 0, 'msg'   => '验证成功', 'data'  =>[]]);
        }else {
            return json_encode(['code'  => -1, 'msg'   => '验证失败', 'data'  =>[]]);
        }


    }

    //商户配置
    public function merchantCheck(Request $request){
        $wx_mchid=$request->input("wx_mchid");
        $wx_mchkey=$request->input("wx_mchkey");

//        dump($request->all());

        if (!Utils::isValidId($wx_mchid) || !Utils::isValidId($wx_mchkey)) {
            return json_encode(['code'  => -1,'msg'=>"输入的微信商户API密钥不能为空,请重新输入"]);
        }

        // 更新数据库t_app_conf 配置
        $update=DB::connection("mysql_config")->table('t_app_conf')
            ->where('app_id',$this->app_id)
            ->where('wx_app_type',0)
            ->update([
                'wx_mchid'=>$wx_mchid,
                'wx_mchkey'=>$wx_mchkey,
                'updated_at'=>date('Y-m-d H:i:s')
            ]);

        if($update >= 0) {

            $wholeUrl = env('APP_HTTPS')."/{$this->app_id}/0";
            $result = file_get_contents($wholeUrl);
            $ret = json_decode($result);

            if(array_key_exists('code',$ret)){
                if($ret->code == 0){
                    return json_encode(['code'  => 0, 'msg'   => '请求成功', 'data'  =>[]]);

                }else{
                    //将支付配置的相关信息清空
                    $update=DB::connection("mysql_config")->table('t_app_conf')
                        ->where('app_id',$this->app_id)
                        ->where('wx_app_type',0)
                        ->update([
                            'wx_mchid' => '',
                            'wx_mchkey' => '',
                        ]);

                    return json_encode(['code'  => -1,'msg'=>"输入的微信商户API密钥错误,请重新输入"]);
                }
            }else{
                return json_encode(['code'  => -2,'msg'=>"保存失败"]);
            }
        } else {
            return json_encode(['ret'=>-3,'msg'=>"更新商户信息失败,请重试"]);
        }
    }

    public function reSubmitAudit(){
        //重新提交审核
        $url = env('MINI_RESUBMIT','')."?app_id={$this->app_id}";
        $result = json_decode(file_get_contents($url));

        if ($result){
            if ($result->code === 0){
                return json_encode(['code'  => 0, 'msg'   => '重新提交审核成功', 'data'  =>[]]);
            }
        }
        return json_encode(['code'  => -1, 'msg'   => '重新提交审核失败', 'data'  =>[]]);
    }

    //设置显示和隐藏付费内容
    public function changePayShow(Request $request ){
        $app_id = $this->app_id;
        $pay_switch = $request->input("pay_switch");
        $result = DB::update("update db_ex_config.t_app_module_little_program  SET buy_android = ?,buy_ios = ? WHERE app_id = ? limit 1",[$pay_switch,$pay_switch,$app_id]);
        if($result>0){
            return  json_encode(['code'  => 0, 'msg'   => '修改成功', 'data'  =>[]]);
        }else{
            return  json_encode(['code'  => -1, 'msg'   => '修改失败', 'data'  =>[]]);
        }

    }
}
