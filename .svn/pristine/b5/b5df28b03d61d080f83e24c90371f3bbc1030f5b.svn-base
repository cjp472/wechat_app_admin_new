$(document).ready(function(){individualModel.init()});var individualModel=function(){var t={};var e={start_time:"",end_time:""};var i=1,a=true,n=false,r="",o=new Array,l=0;t.init=function(){setTopUrlCookie("payadmin_listop","财务管理");var t=new pickerDateRange("SelectData",{isTodayValid:true,defaultText:" ~ ",inputTrigger:"optional",theme:"ta",success:function(t){e={start_time:t.startDate,end_time:t.endDate};c(e)}});$("#SelectRange").on("click","li",function(t){var i=$(this),a=i.data("type"),n=i.text();if(a=="all"){e={start_time:"",end_time:""}}else if(a=="nowMonth"){e={start_time:getNowMonth(),end_time:getNowDay()}}c(e)});$("#optional").click(function(){$("#dropdown-toggle").dropdown("toggle")});$("#SelectData").off("click").text("全部订单");$("#pay_search_btn").click(function(){showLoading();spliceSearchParams(e)});d();c(e)};function c(t){$("#startTime").val(t.start_time);$("#endTime").val(t.end_time);if(t.start_time&&t.start_time!="2016"){$("#SelectData").text(t.start_time+" ~ "+t.end_time)}else{$("#SelectData").text("全部订单")}}function d(){var t=GetQueryString("start_time"),i=GetQueryString("end_time");e={start_time:t||"",end_time:i||""}}return t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
