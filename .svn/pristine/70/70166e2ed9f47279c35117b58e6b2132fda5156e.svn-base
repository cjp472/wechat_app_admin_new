<?php

namespace App\Http\Controllers\Users;

use App\Http\Controllers\Controller;
use App\Http\Controllers\Tools\APIUtils;
use App\Http\Controllers\Tools\AppUtils;
use App\Http\Controllers\Tools\Mobile_Detect;
use App\Http\Controllers\Tools\SuperUtils;
use App\Http\Controllers\Tools\Utils;
use Hash;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\DB;

class RegisterController extends Controller
{

	//微信扫描二维码 注册，登陆
	public function codeinfo (Request $request)
	{

		$code         = $request->input("code");//扫码
		$version_type = $request->input("version_type");//购买套餐类型

		//根据code获取access_token和openid
		$url         = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=" . env('QRCODE_APP_ID', '')
			. "&secret=" . env('QRCODE_SECRET', '') . "&code=" . $code . "&grant_type=authorization_code";
		$resultArray = json_decode(file_get_contents($url), true);
		//根据access_token和openid获取用户所有信息
		$infoUrl   = "https://api.weixin.qq.com/sns/userinfo?access_token=" . $resultArray["access_token"]
			. "&openid=" . $resultArray["openid"];
		$infoArray = json_decode(file_get_contents($infoUrl), true);

		$unionid  = $infoArray['unionid'];
		$openid   = $infoArray['openid'];
		$nickname = $infoArray['nickname'];
		$gender   = $infoArray['sex'];
		$logo     = $infoArray['headimgurl'];

		// 7-19
		// 已注册 两种
		// 管理端注册：1，新用户 有union_id,openid;                无 mobile_openid
		// 手机端注册：1, 新用户 有union_id,mobile_openid,         无openid

		// 未注册：
		// 1，未注册
		// 2，老用户，以前只是登陆过，未完成注册，但是没有merchant_id;
		// 判断用户是否注册
		$mgr_config = DB::connection('mysql_config')->table('t_mgr_login')
			->where('union_id', $unionid)
			->orWhere('openid', $openid)
			->first();

		if ($mgr_config) {
			// 手机端注册用户第一次登陆管理管，无openid,无商户信息
			if (($mgr_config->union_id) && (!($mgr_config->openid))) {
				try {
					$update = DB::connection('mysql_config')->table('t_mgr_login')->where('union_id', $unionid)->update(['openid' => $openid]);
				} catch (\Exception $e) {
				}
			}

			$merchant_id = $mgr_config->merchant_id;
			// 兼容历史用户，只登陆 未注册过   没有商户id 的用户
			if (!$merchant_id) {
				// 生成商户id
				$merchant_id = 'mch' . str_random(8);

				// 补入merchant_id
				$updateSql = "update t_mgr_login set merchant_id = '{$merchant_id}' WHERE openid = '{$openid}' limit 1";
				$update    = DB::connection('mysql_config')->update($updateSql);

				// 完成注册
				if ($merchant_id) $data = APIUtils::api_sign($merchant_id);
			}
		} else {
			// 添加登陆表记录
			$merchant_id = APIUtils::addLogin($unionid, $openid, '', $nickname, $gender, $logo);
			// 完成注册
			if ($merchant_id) $data = APIUtils::api_sign($merchant_id);
		}

		//判断扫码用户是否超级管理员
		if (SuperUtils::checkIsAdmin($infoArray["openid"])) {
			AppUtils::setSuperOpenId($infoArray["openid"]);

			return redirect('/to_super_page');
		}

		// 设定session merchant_id
		$request->session()->put('merchant_id', $merchant_id);
		// 判断用户是否有完整的商户信息配置
		$merchant_config = DB::connection('mysql_config')->table('t_merchant_conf')
			->select('name', 'phone', 'wx_app_name')
			->where('merchant_id', $merchant_id)
			->first();
		if (!($merchant_config->phone)) {
			return redirect('/sign?version_type=' . $version_type);
		}

		//设置登录态,先看有没有红包模块的功能
		AppUtils::setLoginStatus($openid, $nickname, $gender, $logo, AppUtils::getAccessAuth(AppUtils::getAppIdByOpenId($openid), null, 0));
		AppUtils::setScanOpenid($openid);

		// 判断是否有购买更高级的版本
		if ($version_type == 2) {
			if (session("version_type") < 2) {
				return redirect('/open_growUp_version_page');
			} else {
				return redirect('/index');
			}
		} else if ($version_type == 3) {
			if (session("version_type") < 3) {
				return redirect('/open_vip_version_page');
			} else {
				return redirect('/index');
			}
		} else {
			return redirect('/index');
		}
	}

	//微信黑色二维扫码页面
	public function signUp ()
	{
		$redirect_uri = env('QRCODE_REDIRECT_URL', '');
		$redirect_uri = urlencode($redirect_uri);
		$appID        = env('QRCODE_APP_ID', '');
		$scope        = "snsapi_login";
		$url          = "https://open.weixin.qq.com/connect/qrconnect?appid=" . $appID
			. "&redirect_uri=" . $redirect_uri
			. "&response_type=code&scope=" . $scope
			. "&state=STATE#wechat_redirect";
		$result       = file_get_contents($url);
		//替换文本
		$result = str_replace("/connect/qrcode/", "https://open.weixin.qq.com/connect/qrcode/", $result);

		return $result; //返回页面
	}

	//账号密码登陆验证
	public function doLogin (Request $request)
	{
		$username = trim($request->input("username"));
		$password = trim($request->input("password"));
		if (empty($username) || empty($password)) {
			return response()->json(['ret' => 2]);
		}
		//从主账号判断
		$exist = DB::connection("mysql_config")->select("select * from t_mgr_login where name = ?", [$username]);
		if ($exist) {
			if (Hash::check($password, $exist[0]->password)) {
				// 设置登陆态
				AppUtils::setLoginStatus($exist[0]->openid,
					$exist[0]->nick_name,
					$exist[0]->gender,
					$exist[0]->logo,
					AppUtils::getAccessAuth(AppUtils::getAppIdByOpenId($exist[0]->openid), null, 0)
				);

				if ($username == 'test') {//测试账号头像特殊化
					session(['wx_app_name' => env('TEST_NICK_NAME', '')]);
					session(['wx_share_image' => env('TEST_LOGO', '')]);
				}

				return response()->json(['ret' => 0, 'current_version_type' => session("version_type")]);
			} else {
				return response()->json(['ret' => 1]);
			}
		} else {//从子账号表判断
			$otherCheck = DB::connection("mysql_config")->select("select * from t_admin_user
            where username = ? and is_deleted = 0 ", [$username]);
			if ($otherCheck) {
				if (Hash::check($password, $otherCheck[0]->password_encrypt)) {
					//先去找主账户信息
					$loginInfo = \DB::connection("mysql_config")->select("
                    select openid,nick_name,gender,logo 
                    from ( select merchant_id,app_id from t_app_conf where app_id = ? and wx_app_type = '1')t1
                    left join ( select merchant_id,openid,nick_name,gender,logo from t_mgr_login )t2
                        on t1.merchant_id=t2.merchant_id
                    where t2.merchant_id is not null", [$otherCheck[0]->app_id]);

					if (count($loginInfo) == 0) {
						return response()->json(['ret' => 1]);
					}

					AppUtils::setLoginStatus($loginInfo[0]->openid, $loginInfo[0]->nick_name, $loginInfo[0]->gender,
						$loginInfo[0]->logo, AppUtils::getAccessAuth($otherCheck[0]->app_id, $otherCheck[0]->id, 1));
					AppUtils::setSubName($username);
					if ($otherCheck[0]->app_id == env("TEST_APP_ID"))//测试账号特殊化
					{
						session(['wx_app_name' => env('TEST_NICK_NAME', '')]);
						session(['wx_share_image' => env('TEST_LOGO', '')]);
					}

					return response()->json(['ret' => 0, 'current_version_type' => session("version_type")]);
				} else {
					return response()->json(['ret' => 1]);
				}
			} else {
				return response()->json(['ret' => 1]);
			}
		}
	}

	//登陆跳转
	public function login (Request $request)
	{
		// 体验账户判断
		$type         = $request->input('type');
		$version_type = $request->input("version_type", null);

		// 手机检测类
		$mobileDetect = new Mobile_Detect();
		$isMobile     = $mobileDetect->isMobile();

		$app_id = $request->session()->get('app_id', '');
		//体验账号
		if ($type == 1) {
			return view('admin.login', compact('type', 'isMobile'));
		} else {
			if ($app_id) {
				//                dump($app_id);
				//                exit;
				if ($app_id == env('TEST_APP_ID')) {
					return view('admin.login', compact('type', 'isMobile'));
				}

				$current_type = session("version_type", null);
				if ($version_type > $current_type) {
					if ($version_type == 2) {
						return redirect('/open_growUp_version_page');
					} else if ($version_type == 3) {
						return redirect('/open_vip_version_page');
					}
				} else {
					return redirect('/index');
				}
			} else {
				return view('admin.login', compact('type', 'isMobile'));
			}
		}
	}

	//退出登录
	public function loginOut (Request $request)
	{
		//        AppUtils::clearLoginStatus();
		$request->session()->flush();
		Cookie::forget("with_app_id");

		return response()->json(['ret' => 0]);
	}

	//补填商户配置信息页面
	public function sign (Request $request)
	{
		return View('admin.sign');
	}

	//补全商户信息
	public function identifySubmit (Request $request)
	{
		$merchant_id = $request->session()->pull('merchant_id', '');
		$code        = trim($request->input('Checkcode'));
		$name        = trim($request->input('contactPerson'));
		$phone       = trim($request->input('phoneInIdentify'));
		$wx_app_name = trim($request->input('officialAccount'));
		if ($merchant_id) {
			//更新商户配置表
			$merchantConfig                = [];
			$merchantConfig['name']        = $name;
			$merchantConfig['phone']       = $phone;
			$merchantConfig['wx_app_name'] = $wx_app_name;
			DB::connection('mysql_config')->table('t_merchant_conf')
				->where('merchant_id', $merchant_id)
				->update($merchantConfig);

			//更新应用配置表的wx_app_name
			$update = DB::connection('mysql_config')->table('t_app_conf')
				->where('wx_app_type', 1)
				->where('merchant_id', $merchant_id)
				->update(['wx_app_name' => $wx_app_name]);
			//更新验证码表
			$updateCode = DB::connection('mysql_config')->table('t_mgr_verify_codes')
				->where('code', $code)
				->update(['used' => 1]);
		} else {

			return response()->json(['ret' => -2, 'msg' => "用户信息不存在"]);
		}

		// 设置登陆态
		$info = DB::connection('mysql_config')->table('t_mgr_login')->where('merchant_id', $merchant_id)->first();
		AppUtils::setLoginStatus($info->openid, $info->nick_name, $info->gender, $info->logo, AppUtils::getAccessAuth(AppUtils::getAppIdByOpenId($info->openid), null, 0));

		return response()->json(['ret' => 0]);
	}

	//发送验证码
	public function sendMsg (Request $request)
	{
		$phone     = $request->input("phone");//手机号码
		$checkCode = random_int(100000, 999999);//验证码
		$minutes   = '5';//失效分钟

		$sdkappid = "1400014102";
		$appkey   = "878d0c777c06a29eff31a6302d4140f7";
		$rnd      = random_int(100000, 999999);
		$wholeUrl = "https://yun.tim.qq.com/v3/tlssmssvr/sendsms?sdkappid=" . $sdkappid . "&random=" . $rnd;

		$tel              = new \stdClass();
		$tel->nationcode  = "86";
		$tel->phone       = $phone;
		$jsondata         = new \stdClass();
		$jsondata->tel    = $tel;
		$jsondata->type   = "0";
		$jsondata->msg    = $checkCode . "为您的登录验证码，请于" . $minutes . "分钟内填写。如非本人操作，请忽略本短信。";
		$jsondata->sig    = md5($appkey . $phone);
		$jsondata->extend = "";     // 根据需要添加，一般保持默认
		$jsondata->ext    = "";        // 根据需要添加，一般保持默认
		//包体
		$curlPost = json_encode($jsondata);
		//发包
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $wholeUrl);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		$ret = curl_exec($ch);

		if ($ret === false) {
			return response()->json(['ret' => 1]);
		} else {
			//插验证码的表
			$codeInfo               = [];
			$codeInfo['openid']     = AppUtils::getOpenId();
			$codeInfo['type']       = '0';
			$codeInfo['used']       = '0';
			$codeInfo['phone']      = $phone;
			$codeInfo['code']       = $checkCode;
			$codeInfo['expire_at']  = date('Y-m-d H:i:s', time() + 5 * 60);
			$codeInfo['created_at'] = date('Y-m-d H:i:s', time());
			$insert                 = DB::connection("mysql_config")->table("t_mgr_verify_codes")->insertGetId($codeInfo);

			return response()->json(['ret' => 0]);
		}
	}

	//校验短信码
	public function identify (Request $request)
	{
		$check = DB::connection("mysql_config")->
		select("select id from t_mgr_verify_codes where openid = ? and used = '0' and phone =? and code = ? and expire_at > now()",
			[
				AppUtils::getOpenId(),
				$request->input("phoneInIdentify"),
				$request->input("code"),
			]);

		if ($check) {
			return response()->json(['ret' => 0]);
		} else {
			return response()->json(['ret' => 1]);
		}
	}

	/*  // 生成所有 没有app_module记录 的用户的 t_app_module 记录
	  public static function supplyModule(){
		  $sql = "
			  select DISTINCT app_id from t_app_conf where app_id not in ( select app_id from t_app_module);
		  ";

		  $id_arr = DB::connection('mysql_config')->select($sql);
		  $count = count($id_arr);
  //        dump($id_arr);
		  $i = 0;
		  $j = 0;
		  foreach ($id_arr as $v){
			  $info = [];
			  $info['app_id'] = $v->app_id;
			  $info['created_at'] = date('Y-m-d H:i:s');
			  $info['updated_at'] = date('Y-m-d H:i:s');

			  $i++;
			  $insert = DB::connection('mysql_config')->table('t_app_module')->insert($info);
			  if ($insert){
			  } else {
				  $j++;
			  }
		  }

	  }*/

}
