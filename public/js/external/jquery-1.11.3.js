(function(e,t){if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){var n=[];var i=n.slice;var r=n.concat;var o=n.push;var a=n.indexOf;var s={};var u=s.toString;var l=s.hasOwnProperty;var f={};var c="1.11.3",d=function(e,t){return new d.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,h=/^-ms-/,m=/-([\da-z])/gi,g=function(e,t){return t.toUpperCase()};d.fn=d.prototype={jquery:c,constructor:d,selector:"",length:0,toArray:function(){return i.call(this)},get:function(e){return e!=null?e<0?this[e+this.length]:this[e]:i.call(this)},pushStack:function(e){var t=d.merge(this.constructor(),e);t.prevObject=this;t.context=this.context;return t},each:function(e,t){return d.each(this,e,t)},map:function(e){return this.pushStack(d.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:o,sort:n.sort,splice:n.splice};d.extend=d.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,u=arguments.length,l=false;if(typeof a==="boolean"){l=a;a=arguments[s]||{};s++}if(typeof a!=="object"&&!d.isFunction(a)){a={}}if(s===u){a=this;s--}for(;s<u;s++){if((r=arguments[s])!=null){for(i in r){e=a[i];n=r[i];if(a===n){continue}if(l&&n&&(d.isPlainObject(n)||(t=d.isArray(n)))){if(t){t=false;o=e&&d.isArray(e)?e:[]}else{o=e&&d.isPlainObject(e)?e:{}}a[i]=d.extend(l,o,n)}else if(n!==undefined){a[i]=n}}}}return a};d.extend({expando:"jQuery"+(c+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return d.type(e)==="function"},isArray:Array.isArray||function(e){return d.type(e)==="array"},isWindow:function(e){return e!=null&&e==e.window},isNumeric:function(e){return!d.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e){return false}return true},isPlainObject:function(e){var t;if(!e||d.type(e)!=="object"||e.nodeType||d.isWindow(e)){return false}try{if(e.constructor&&!l.call(e,"constructor")&&!l.call(e.constructor.prototype,"isPrototypeOf")){return false}}catch(e){return false}if(f.ownLast){for(t in e){return l.call(e,t)}}for(t in e){}return t===undefined||l.call(e,t)},type:function(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?s[u.call(e)]||"object":typeof e},globalEval:function(t){if(t&&d.trim(t)){(e.execScript||function(t){e["eval"].call(e,t)})(t)}},camelCase:function(e){return e.replace(h,"ms-").replace(m,g)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var i,r=0,o=e.length,a=y(e);if(n){if(a){for(;r<o;r++){i=t.apply(e[r],n);if(i===false){break}}}else{for(r in e){i=t.apply(e[r],n);if(i===false){break}}}}else{if(a){for(;r<o;r++){i=t.call(e[r],r,e[r]);if(i===false){break}}}else{for(r in e){i=t.call(e[r],r,e[r]);if(i===false){break}}}}return e},trim:function(e){return e==null?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];if(e!=null){if(y(Object(e))){d.merge(n,typeof e==="string"?[e]:e)}else{o.call(n,e)}}return n},inArray:function(e,t,n){var i;if(t){if(a){return a.call(t,e,n)}i=t.length;n=n?n<0?Math.max(0,i+n):n:0;for(;n<i;n++){if(n in t&&t[n]===e){return n}}}return-1},merge:function(e,t){var n=+t.length,i=0,r=e.length;while(i<n){e[r++]=t[i++]}if(n!==n){while(t[i]!==undefined){e[r++]=t[i++]}}e.length=r;return e},grep:function(e,t,n){var i,r=[],o=0,a=e.length,s=!n;for(;o<a;o++){i=!t(e[o],o);if(i!==s){r.push(e[o])}}return r},map:function(e,t,n){var i,o=0,a=e.length,s=y(e),u=[];if(s){for(;o<a;o++){i=t(e[o],o,n);if(i!=null){u.push(i)}}}else{for(o in e){i=t(e[o],o,n);if(i!=null){u.push(i)}}}return r.apply([],u)},guid:1,proxy:function(e,t){var n,r,o;if(typeof t==="string"){o=e[t];t=e;e=o}if(!d.isFunction(e)){return undefined}n=i.call(arguments,2);r=function(){return e.apply(t||this,n.concat(i.call(arguments)))};r.guid=e.guid=e.guid||d.guid++;return r},now:function(){return+new Date},support:f});d.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){s["[object "+t+"]"]=t.toLowerCase()});function y(e){var t="length"in e&&e.length,n=d.type(e);if(n==="function"||d.isWindow(e)){return false}if(e.nodeType===1&&t){return true}return n==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var v=function(e){var t,n,i,r,o,a,s,u,l,f,c,d,p,h,m,g,y,v,b,x="sizzle"+1*new Date,w=e.document,T=0,C=0,N=ae(),E=ae(),k=ae(),S=function(e,t){if(e===t){c=true}return 0},A=1<<31,D={}.hasOwnProperty,j=[],L=j.pop,H=j.push,q=j.push,_=j.slice,M=function(e,t){var n=0,i=e.length;for(;n<i;n++){if(e[n]===t){return n}}return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",P=B.replace("w","w#"),R="\\["+O+"*("+B+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+O+"*\\]",W=":("+B+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|"+".*"+")\\)|)",$=new RegExp(O+"+","g"),z=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),I=new RegExp("^"+O+"*,"+O+"*"),X=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),U=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),V=new RegExp(W),J=new RegExp("^"+P+"$"),Y={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B.replace("w","w*")+")"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=/'|\\/g,ne=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),ie=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)},re=function(){d()};try{q.apply(j=_.call(w.childNodes),w.childNodes);j[w.childNodes.length].nodeType}catch(e){q={apply:j.length?function(e,t){H.apply(e,_.call(t))}:function(e,t){var n=e.length,i=0;while(e[n++]=t[i++]){}e.length=n-1}}}function oe(e,t,i,r){var o,s,l,f,c,h,y,v,T,C;if((t?t.ownerDocument||t:w)!==p){d(t)}t=t||p;i=i||[];f=t.nodeType;if(typeof e!=="string"||!e||f!==1&&f!==9&&f!==11){return i}if(!r&&m){if(f!==11&&(o=Z.exec(e))){if(l=o[1]){if(f===9){s=t.getElementById(l);if(s&&s.parentNode){if(s.id===l){i.push(s);return i}}else{return i}}else{if(t.ownerDocument&&(s=t.ownerDocument.getElementById(l))&&b(t,s)&&s.id===l){i.push(s);return i}}}else if(o[2]){q.apply(i,t.getElementsByTagName(e));return i}else if((l=o[3])&&n.getElementsByClassName){q.apply(i,t.getElementsByClassName(l));return i}}if(n.qsa&&(!g||!g.test(e))){v=y=x;T=t;C=f!==1&&e;if(f===1&&t.nodeName.toLowerCase()!=="object"){h=a(e);if(y=t.getAttribute("id")){v=y.replace(te,"\\$&")}else{t.setAttribute("id",v)}v="[id='"+v+"'] ";c=h.length;while(c--){h[c]=v+ge(h[c])}T=ee.test(e)&&he(t.parentNode)||t;C=h.join(",")}if(C){try{q.apply(i,T.querySelectorAll(C));return i}catch(e){}finally{if(!y){t.removeAttribute("id")}}}}}return u(e.replace(z,"$1"),t,i,r)}function ae(){var e=[];function t(n,r){if(e.push(n+" ")>i.cacheLength){delete t[e.shift()]}return t[n+" "]=r}return t}function se(e){e[x]=true;return e}function ue(e){var t=p.createElement("div");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function le(e,t){var n=e.split("|"),r=e.length;while(r--){i.attrHandle[n[r]]=t}}function fe(e,t){var n=t&&e,i=n&&e.nodeType===1&&t.nodeType===1&&(~t.sourceIndex||A)-(~e.sourceIndex||A);if(i){return i}if(n){while(n=n.nextSibling){if(n===t){return-1}}}return e?1:-1}function ce(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function pe(e){return se(function(t){t=+t;return se(function(n,i){var r,o=e([],n.length,t),a=o.length;while(a--){if(n[r=o[a]]){n[r]=!(i[r]=n[r])}}})})}function he(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}n=oe.support={};o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=oe.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;if(a===p||a.nodeType!==9||!a.documentElement){return p}p=a;h=a.documentElement;r=a.defaultView;if(r&&r!==r.top){if(r.addEventListener){r.addEventListener("unload",re,false)}else if(r.attachEvent){r.attachEvent("onunload",re)}}m=!o(a);n.attributes=ue(function(e){e.className="i";return!e.getAttribute("className")});n.getElementsByTagName=ue(function(e){e.appendChild(a.createComment(""));return!e.getElementsByTagName("*").length});n.getElementsByClassName=K.test(a.getElementsByClassName);n.getById=ue(function(e){h.appendChild(e).id=x;return!a.getElementsByName||!a.getElementsByName(x).length});if(n.getById){i.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}};i.filter["ID"]=function(e){var t=e.replace(ne,ie);return function(e){return e.getAttribute("id")===t}}}else{delete i.find["ID"];i.filter["ID"]=function(e){var t=e.replace(ne,ie);return function(e){var n=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return n&&n.value===t}}}i.find["TAG"]=n.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(n.qsa){return t.querySelectorAll(e)}}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if(e==="*"){while(n=o[r++]){if(n.nodeType===1){i.push(n)}}return i}return o};i.find["CLASS"]=n.getElementsByClassName&&function(e,t){if(m){return t.getElementsByClassName(e)}};y=[];g=[];if(n.qsa=K.test(a.querySelectorAll)){ue(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a>"+"<select id='"+x+"-\f]' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){g.push("[*^$]="+O+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){g.push("\\["+O+"*(?:value|"+F+")")}if(!e.querySelectorAll("[id~="+x+"-]").length){g.push("~=")}if(!e.querySelectorAll(":checked").length){g.push(":checked")}if(!e.querySelectorAll("a#"+x+"+*").length){g.push(".#.+[+~]")}});ue(function(e){var t=a.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){g.push("name"+O+"*[*^$|!~]?=")}if(!e.querySelectorAll(":enabled").length){g.push(":enabled",":disabled")}e.querySelectorAll("*,:x");g.push(",.*:")})}if(n.matchesSelector=K.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector)){ue(function(e){n.disconnectedMatch=v.call(e,"div");v.call(e,"[s!='']:x");y.push("!=",W)})}g=g.length&&new RegExp(g.join("|"));y=y.length&&new RegExp(y.join("|"));t=K.test(h.compareDocumentPosition);b=t||K.test(h.contains)?function(e,t){var n=e.nodeType===9?e.documentElement:e,i=t&&t.parentNode;return e===i||!!(i&&i.nodeType===1&&(n.contains?n.contains(i):e.compareDocumentPosition&&e.compareDocumentPosition(i)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};S=t?function(e,t){if(e===t){c=true;return 0}var i=!e.compareDocumentPosition-!t.compareDocumentPosition;if(i){return i}i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(i&1||!n.sortDetached&&t.compareDocumentPosition(e)===i){if(e===a||e.ownerDocument===w&&b(w,e)){return-1}if(t===a||t.ownerDocument===w&&b(w,t)){return 1}return f?M(f,e)-M(f,t):0}return i&4?-1:1}:function(e,t){if(e===t){c=true;return 0}var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],u=[t];if(!r||!o){return e===a?-1:t===a?1:r?-1:o?1:f?M(f,e)-M(f,t):0}else if(r===o){return fe(e,t)}n=e;while(n=n.parentNode){s.unshift(n)}n=t;while(n=n.parentNode){u.unshift(n)}while(s[i]===u[i]){i++}return i?fe(s[i],u[i]):s[i]===w?-1:u[i]===w?1:0};return a};oe.matches=function(e,t){return oe(e,null,null,t)};oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p){d(e)}t=t.replace(U,"='$1']");if(n.matchesSelector&&m&&(!y||!y.test(t))&&(!g||!g.test(t))){try{var i=v.call(e,t);if(i||n.disconnectedMatch||e.document&&e.document.nodeType!==11){return i}}catch(e){}}return oe(t,p,null,[e]).length>0};oe.contains=function(e,t){if((e.ownerDocument||e)!==p){d(e)}return b(e,t)};oe.attr=function(e,t){if((e.ownerDocument||e)!==p){d(e)}var r=i.attrHandle[t.toLowerCase()],o=r&&D.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):undefined;return o!==undefined?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null};oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};oe.uniqueSort=function(e){var t,i=[],r=0,o=0;c=!n.detectDuplicates;f=!n.sortStable&&e.slice(0);e.sort(S);if(c){while(t=e[o++]){if(t===e[o]){r=i.push(o)}}while(r--){e.splice(i[r],1)}}f=null;return e};r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(!o){while(t=e[i++]){n+=r(t)}}else if(o===1||o===9||o===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){n+=r(e)}}}else if(o===3||o===4){return e.nodeValue}return n};i=oe.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(ne,ie);e[3]=(e[3]||e[4]||e[5]||"").replace(ne,ie);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){oe.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){oe.error(e[0])}return e},PSEUDO:function(e){var t,n=!e[6]&&e[2];if(Y["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(n&&V.test(n)&&(t=a(n,true))&&(t=n.indexOf(")",n.length-t)-n.length)){e[0]=e[0].slice(0,t);e[2]=n.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(ne,ie).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=N[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&N(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);if(r==null){return t==="!="}if(!t){return true}r+="";return t==="="?r===n:t==="!="?r!==n:t==="^="?n&&r.indexOf(n)===0:t==="*="?n&&r.indexOf(n)>-1:t==="$="?n&&r.slice(-n.length)===n:t==="~="?(" "+r.replace($," ")+" ").indexOf(n)>-1:t==="|="?r===n||r.slice(0,n.length+1)===n+"-":false}},CHILD:function(e,t,n,i,r){var o=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",s=t==="of-type";return i===1&&r===0?function(e){return!!e.parentNode}:function(t,n,u){var l,f,c,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(g){if(o){while(m){c=t;while(c=c[m]){if(s?c.nodeName.toLowerCase()===y:c.nodeType===1){return false}}h=m=e==="only"&&!h&&"nextSibling"}return true}h=[a?g.firstChild:g.lastChild];if(a&&v){f=g[x]||(g[x]={});l=f[e]||[];p=l[0]===T&&l[1];d=l[0]===T&&l[2];c=p&&g.childNodes[p];while(c=++p&&c&&c[m]||(d=p=0)||h.pop()){if(c.nodeType===1&&++d&&c===t){f[e]=[T,p,d];break}}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===T){d=l[1]}else{while(c=++p&&c&&c[m]||(d=p=0)||h.pop()){if((s?c.nodeName.toLowerCase()===y:c.nodeType===1)&&++d){if(v){(c[x]||(c[x]={}))[e]=[T,d]}if(c===t){break}}}}d-=r;return d===i||d%i===0&&d/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);if(r[x]){return r(t)}if(r.length>1){n=[e,e,"",t];return i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var i,o=r(e,t),a=o.length;while(a--){i=M(e,o[a]);e[i]=!(n[i]=o[a])}}):function(e){return r(e,0,n)}}return r}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(z,"$1"));return i[x]?se(function(e,t,n,r){var o,a=i(e,null,r,[]),s=e.length;while(s--){if(o=a[s]){e[s]=!(t[s]=o)}}}):function(e,r,o){t[0]=e;i(t,null,o,n);t[0]=null;return!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){e=e.replace(ne,ie);return function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){if(!J.test(e||"")){oe.error("unsupported lang: "+e)}e=e.replace(ne,ie).toLowerCase();return function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){n=n.toLowerCase();return n===e||n.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===false},disabled:function(e){return e.disabled===true},checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!i.pseudos["empty"](e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){var n=0;for(;n<t;n+=2){e.push(n)}return e}),odd:pe(function(e,t){var n=1;for(;n<t;n+=2){e.push(n)}return e}),lt:pe(function(e,t,n){var i=n<0?n+t:n;for(;--i>=0;){e.push(i)}return e}),gt:pe(function(e,t,n){var i=n<0?n+t:n;for(;++i<t;){e.push(i)}return e})}};i.pseudos["nth"]=i.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){i.pseudos[t]=ce(t)}for(t in{submit:true,reset:true}){i.pseudos[t]=de(t)}function me(){}me.prototype=i.filters=i.pseudos;i.setFilters=new me;a=oe.tokenize=function(e,t){var n,r,o,a,s,u,l,f=E[e+" "];if(f){return t?0:f.slice(0)}s=e;u=[];l=i.preFilter;while(s){if(!n||(r=I.exec(s))){if(r){s=s.slice(r[0].length)||s}u.push(o=[])}n=false;if(r=X.exec(s)){n=r.shift();o.push({value:n,type:r[0].replace(z," ")});s=s.slice(n.length)}for(a in i.filter){if((r=Y[a].exec(s))&&(!l[a]||(r=l[a](r)))){n=r.shift();o.push({value:n,type:a,matches:r});s=s.slice(n.length)}}if(!n){break}}return t?s.length:s?oe.error(e):E(e,u).slice(0)};function ge(e){var t=0,n=e.length,i="";for(;t<n;t++){i+=e[t].value}return i}function ye(e,t,n){var i=t.dir,r=n&&i==="parentNode",o=C++;return t.first?function(t,n,o){while(t=t[i]){if(t.nodeType===1||r){return e(t,n,o)}}}:function(t,n,a){var s,u,l=[T,o];if(a){while(t=t[i]){if(t.nodeType===1||r){if(e(t,n,a)){return true}}}}else{while(t=t[i]){if(t.nodeType===1||r){u=t[x]||(t[x]={});if((s=u[i])&&s[0]===T&&s[1]===o){return l[2]=s[2]}else{u[i]=l;if(l[2]=e(t,n,a)){return true}}}}}}}function ve(e){return e.length>1?function(t,n,i){var r=e.length;while(r--){if(!e[r](t,n,i)){return false}}return true}:e[0]}function be(e,t,n){var i=0,r=t.length;for(;i<r;i++){oe(e,t[i],n)}return n}function xe(e,t,n,i,r){var o,a=[],s=0,u=e.length,l=t!=null;for(;s<u;s++){if(o=e[s]){if(!n||n(o,i,r)){a.push(o);if(l){t.push(s)}}}}return a}function we(e,t,n,i,r,o){if(i&&!i[x]){i=we(i)}if(r&&!r[x]){r=we(r,o)}return se(function(o,a,s,u){var l,f,c,d=[],p=[],h=a.length,m=o||be(t||"*",s.nodeType?[s]:s,[]),g=e&&(o||!t)?xe(m,d,e,s,u):m,y=n?r||(o?e:h||i)?[]:a:g;if(n){n(g,y,s,u)}if(i){l=xe(y,p);i(l,[],s,u);f=l.length;while(f--){if(c=l[f]){y[p[f]]=!(g[p[f]]=c)}}}if(o){if(r||e){if(r){l=[];f=y.length;while(f--){if(c=y[f]){l.push(g[f]=c)}}r(null,y=[],l,u)}f=y.length;while(f--){if((c=y[f])&&(l=r?M(o,c):d[f])>-1){o[l]=!(a[l]=c)}}}}else{y=xe(y===a?y.splice(h,y.length):y);if(r){r(null,a,y,u)}else{q.apply(a,y)}}})}function Te(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],u=a?1:0,f=ye(function(e){return e===t},s,true),c=ye(function(e){return M(t,e)>-1},s,true),d=[function(e,n,i){var r=!a&&(i||n!==l)||((t=n).nodeType?f(e,n,i):c(e,n,i));t=null;return r}];for(;u<o;u++){if(n=i.relative[e[u].type]){d=[ye(ve(d),n)]}else{n=i.filter[e[u].type].apply(null,e[u].matches);if(n[x]){r=++u;for(;r<o;r++){if(i.relative[e[r].type]){break}}return we(u>1&&ve(d),u>1&&ge(e.slice(0,u-1).concat({value:e[u-2].type===" "?"*":""})).replace(z,"$1"),n,u<r&&Te(e.slice(u,r)),r<o&&Te(e=e.slice(r)),r<o&&ge(e))}d.push(n)}}return ve(d)}function Ce(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,u,f){var c,d,h,m=0,g="0",y=o&&[],v=[],b=l,x=o||r&&i.find["TAG"]("*",f),w=T+=b==null?1:Math.random()||.1,C=x.length;if(f){l=a!==p&&a}for(;g!==C&&(c=x[g])!=null;g++){if(r&&c){d=0;while(h=e[d++]){if(h(c,a,s)){u.push(c);break}}if(f){T=w}}if(n){if(c=!h&&c){m--}if(o){y.push(c)}}}m+=g;if(n&&g!==m){d=0;while(h=t[d++]){h(y,v,a,s)}if(o){if(m>0){while(g--){if(!(y[g]||v[g])){v[g]=L.call(u)}}}v=xe(v)}q.apply(u,v);if(f&&!o&&v.length>0&&m+t.length>1){oe.uniqueSort(u)}}if(f){T=w;l=b}return y};return n?se(o):o}s=oe.compile=function(e,t){var n,i=[],r=[],o=k[e+" "];if(!o){if(!t){t=a(e)}n=t.length;while(n--){o=Te(t[n]);if(o[x]){i.push(o)}else{r.push(o)}}o=k(e,Ce(r,i));o.selector=e}return o};u=oe.select=function(e,t,r,o){var u,l,f,c,d,p=typeof e==="function"&&e,h=!o&&a(e=p.selector||e);r=r||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(f=l[0]).type==="ID"&&n.getById&&t.nodeType===9&&m&&i.relative[l[1].type]){t=(i.find["ID"](f.matches[0].replace(ne,ie),t)||[])[0];if(!t){return r}else if(p){t=t.parentNode}e=e.slice(l.shift().value.length)}u=Y["needsContext"].test(e)?0:l.length;while(u--){f=l[u];if(i.relative[c=f.type]){break}if(d=i.find[c]){if(o=d(f.matches[0].replace(ne,ie),ee.test(l[0].type)&&he(t.parentNode)||t)){l.splice(u,1);e=o.length&&ge(l);if(!e){q.apply(r,o);return r}break}}}}(p||s(e,h))(o,t,!m,r,ee.test(e)&&he(t.parentNode)||t);return r};n.sortStable=x.split("").sort(S).join("")===x;n.detectDuplicates=!!c;d();n.sortDetached=ue(function(e){return e.compareDocumentPosition(p.createElement("div"))&1});if(!ue(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){le("type|href|height|width",function(e,t,n){if(!n){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!ue(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){le("value",function(e,t,n){if(!n&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!ue(function(e){return e.getAttribute("disabled")==null})){le(F,function(e,t,n){var i;if(!n){return e[t]===true?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}})}return oe}(e);d.find=v;d.expr=v.selectors;d.expr[":"]=d.expr.pseudos;d.unique=v.uniqueSort;d.text=v.getText;d.isXMLDoc=v.isXML;d.contains=v.contains;var b=d.expr.match.needsContext;var x=/^<(\w+)\s*\/?>(?:<\/\1>|)$/;var w=/^.[^:#\[\.,]*$/;function T(e,t,n){if(d.isFunction(t)){return d.grep(e,function(e,i){return!!t.call(e,i,e)!==n})}if(t.nodeType){return d.grep(e,function(e){return e===t!==n})}if(typeof t==="string"){if(w.test(t)){return d.filter(t,e,n)}t=d.filter(t,e)}return d.grep(e,function(e){return d.inArray(e,t)>=0!==n})}d.filter=function(e,t,n){var i=t[0];if(n){e=":not("+e+")"}return t.length===1&&i.nodeType===1?d.find.matchesSelector(i,e)?[i]:[]:d.find.matches(e,d.grep(t,function(e){return e.nodeType===1}))};d.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if(typeof e!=="string"){return this.pushStack(d(e).filter(function(){for(t=0;t<r;t++){if(d.contains(i[t],this)){return true}}}))}for(t=0;t<r;t++){d.find(e,i[t],n)}n=this.pushStack(r>1?d.unique(n):n);n.selector=this.selector?this.selector+" "+e:e;return n},filter:function(e){return this.pushStack(T(this,e||[],false))},not:function(e){return this.pushStack(T(this,e||[],true))},is:function(e){return!!T(this,typeof e==="string"&&b.test(e)?d(e):e||[],false).length}});var C,N=e.document,E=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,k=d.fn.init=function(e,t){var n,i;if(!e){return this}if(typeof e==="string"){if(e.charAt(0)==="<"&&e.charAt(e.length-1)===">"&&e.length>=3){n=[null,e,null]}else{n=E.exec(e)}if(n&&(n[1]||!t)){if(n[1]){t=t instanceof d?t[0]:t;d.merge(this,d.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:N,true));if(x.test(n[1])&&d.isPlainObject(t)){for(n in t){if(d.isFunction(this[n])){this[n](t[n])}else{this.attr(n,t[n])}}}return this}else{i=N.getElementById(n[2]);if(i&&i.parentNode){if(i.id!==n[2]){return C.find(e)}this.length=1;this[0]=i}this.context=N;this.selector=e;return this}}else if(!t||t.jquery){return(t||C).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this.context=this[0]=e;this.length=1;return this}else if(d.isFunction(e)){return typeof C.ready!=="undefined"?C.ready(e):e(d)}if(e.selector!==undefined){this.selector=e.selector;this.context=e.context}return d.makeArray(e,this)};k.prototype=d.fn;C=d(N);var S=/^(?:parents|prev(?:Until|All))/,A={children:true,contents:true,next:true,prev:true};d.extend({dir:function(e,t,n){var i=[],r=e[t];while(r&&r.nodeType!==9&&(n===undefined||r.nodeType!==1||!d(r).is(n))){if(r.nodeType===1){i.push(r)}r=r[t]}return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){n.push(e)}}return n}});d.fn.extend({has:function(e){var t,n=d(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++){if(d.contains(this,n[t])){return true}}})},closest:function(e,t){var n,i=0,r=this.length,o=[],a=b.test(e)||typeof e!=="string"?d(e,t||this.context):0;for(;i<r;i++){for(n=this[i];n&&n!==t;n=n.parentNode){if(n.nodeType<11&&(a?a.index(n)>-1:n.nodeType===1&&d.find.matchesSelector(n,e))){o.push(n);break}}}return this.pushStack(o.length>1?d.unique(o):o)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return d.inArray(this[0],d(e))}return d.inArray(e.jquery?e[0]:e,this)},add:function(e,t){return this.pushStack(d.unique(d.merge(this.get(),d(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function D(e,t){do{e=e[t]}while(e&&e.nodeType!==1);return e}d.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return d.dir(e,"parentNode")},parentsUntil:function(e,t,n){return d.dir(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return d.dir(e,"nextSibling")},prevAll:function(e){return d.dir(e,"previousSibling")},nextUntil:function(e,t,n){return d.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return d.dir(e,"previousSibling",n)},siblings:function(e){return d.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return d.sibling(e.firstChild)},contents:function(e){return d.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:d.merge([],e.childNodes)}},function(e,t){d.fn[e]=function(n,i){var r=d.map(this,t,n);if(e.slice(-5)!=="Until"){i=n}if(i&&typeof i==="string"){r=d.filter(i,r)}if(this.length>1){if(!A[e]){r=d.unique(r)}if(S.test(e)){r=r.reverse()}}return this.pushStack(r)}});var j=/\S+/g;var L={};function H(e){var t=L[e]={};d.each(e.match(j)||[],function(e,n){t[n]=true});return t}d.Callbacks=function(e){e=typeof e==="string"?L[e]||H(e):d.extend({},e);var t,n,i,r,o,a,s=[],u=!e.once&&[],l=function(c){n=e.memory&&c;i=true;o=a||0;a=0;r=s.length;t=true;for(;s&&o<r;o++){if(s[o].apply(c[0],c[1])===false&&e.stopOnFalse){n=false;break}}t=false;if(s){if(u){if(u.length){l(u.shift())}}else if(n){s=[]}else{f.disable()}}},f={add:function(){if(s){var i=s.length;(function t(n){d.each(n,function(n,i){var r=d.type(i);if(r==="function"){if(!e.unique||!f.has(i)){s.push(i)}}else if(i&&i.length&&r!=="string"){t(i)}})})(arguments);if(t){r=s.length}else if(n){a=i;l(n)}}return this},remove:function(){if(s){d.each(arguments,function(e,n){var i;while((i=d.inArray(n,s,i))>-1){s.splice(i,1);if(t){if(i<=r){r--}if(i<=o){o--}}}})}return this},has:function(e){return e?d.inArray(e,s)>-1:!!(s&&s.length)},empty:function(){s=[];r=0;return this},disable:function(){s=u=n=undefined;return this},disabled:function(){return!s},lock:function(){u=undefined;if(!n){f.disable()}return this},locked:function(){return!u},fireWith:function(e,n){if(s&&(!i||u)){n=n||[];n=[e,n.slice?n.slice():n];if(t){u.push(n)}else{l(n)}}return this},fire:function(){f.fireWith(this,arguments);return this},fired:function(){return!!i}};return f};d.extend({Deferred:function(e){var t=[["resolve","done",d.Callbacks("once memory"),"resolved"],["reject","fail",d.Callbacks("once memory"),"rejected"],["notify","progress",d.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){r.done(arguments).fail(arguments);return this},then:function(){var e=arguments;return d.Deferred(function(n){d.each(t,function(t,o){var a=d.isFunction(e[t])&&e[t];r[o[1]](function(){var e=a&&a.apply(this,arguments);if(e&&d.isFunction(e.promise)){e.promise().done(n.resolve).fail(n.reject).progress(n.notify)}else{n[o[0]+"With"](this===i?n.promise():this,a?[e]:arguments)}})});e=null}).promise()},promise:function(e){return e!=null?d.extend(e,i):i}},r={};i.pipe=i.then;d.each(t,function(e,o){var a=o[2],s=o[3];i[o[1]]=a.add;if(s){a.add(function(){n=s},t[e^1][2].disable,t[2][2].lock)}r[o[0]]=function(){r[o[0]+"With"](this===r?i:this,arguments);return this};r[o[0]+"With"]=a.fireWith});i.promise(r);if(e){e.call(r,r)}return r},when:function(e){var t=0,n=i.call(arguments),r=n.length,o=r!==1||e&&d.isFunction(e.promise)?r:0,a=o===1?e:d.Deferred(),s=function(e,t,n){return function(r){t[e]=this;n[e]=arguments.length>1?i.call(arguments):r;if(n===u){a.notifyWith(t,n)}else if(!--o){a.resolveWith(t,n)}}},u,l,f;if(r>1){u=new Array(r);l=new Array(r);f=new Array(r);for(;t<r;t++){if(n[t]&&d.isFunction(n[t].promise)){n[t].promise().done(s(t,f,n)).fail(a.reject).progress(s(t,l,u))}else{--o}}}if(!o){a.resolveWith(f,n)}return a.promise()}});var q;d.fn.ready=function(e){d.ready.promise().done(e);return this};d.extend({isReady:false,readyWait:1,holdReady:function(e){if(e){d.readyWait++}else{d.ready(true)}},ready:function(e){if(e===true?--d.readyWait:d.isReady){return}if(!N.body){return setTimeout(d.ready)}d.isReady=true;if(e!==true&&--d.readyWait>0){return}q.resolveWith(N,[d]);if(d.fn.triggerHandler){d(N).triggerHandler("ready");d(N).off("ready")}}});function _(){if(N.addEventListener){N.removeEventListener("DOMContentLoaded",M,false);e.removeEventListener("load",M,false)}else{N.detachEvent("onreadystatechange",M);e.detachEvent("onload",M)}}function M(){if(N.addEventListener||event.type==="load"||N.readyState==="complete"){_();d.ready()}}d.ready.promise=function(t){if(!q){q=d.Deferred();if(N.readyState==="complete"){setTimeout(d.ready)}else if(N.addEventListener){N.addEventListener("DOMContentLoaded",M,false);e.addEventListener("load",M,false)}else{N.attachEvent("onreadystatechange",M);e.attachEvent("onload",M);var n=false;try{n=e.frameElement==null&&N.documentElement
}catch(e){}if(n&&n.doScroll){(function e(){if(!d.isReady){try{n.doScroll("left")}catch(t){return setTimeout(e,50)}_();d.ready()}})()}}}return q.promise(t)};var F=typeof undefined;var O;for(O in d(f)){break}f.ownLast=O!=="0";f.inlineBlockNeedsLayout=false;d(function(){var e,t,n,i;n=N.getElementsByTagName("body")[0];if(!n||!n.style){return}t=N.createElement("div");i=N.createElement("div");i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px";n.appendChild(i).appendChild(t);if(typeof t.style.zoom!==F){t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";f.inlineBlockNeedsLayout=e=t.offsetWidth===3;if(e){n.style.zoom=1}}n.removeChild(i)});(function(){var e=N.createElement("div");if(f.deleteExpando==null){f.deleteExpando=true;try{delete e.test}catch(e){f.deleteExpando=false}}e=null})();d.acceptData=function(e){var t=d.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return n!==1&&n!==9?false:!t||t!==true&&e.getAttribute("classid")===t};var B=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,P=/([A-Z])/g;function R(e,t,n){if(n===undefined&&e.nodeType===1){var i="data-"+t.replace(P,"-$1").toLowerCase();n=e.getAttribute(i);if(typeof n==="string"){try{n=n==="true"?true:n==="false"?false:n==="null"?null:+n+""===n?+n:B.test(n)?d.parseJSON(n):n}catch(e){}d.data(e,t,n)}else{n=undefined}}return n}function W(e){var t;for(t in e){if(t==="data"&&d.isEmptyObject(e[t])){continue}if(t!=="toJSON"){return false}}return true}function $(e,t,i,r){if(!d.acceptData(e)){return}var o,a,s=d.expando,u=e.nodeType,l=u?d.cache:e,f=u?e[s]:e[s]&&s;if((!f||!l[f]||!r&&!l[f].data)&&i===undefined&&typeof t==="string"){return}if(!f){if(u){f=e[s]=n.pop()||d.guid++}else{f=s}}if(!l[f]){l[f]=u?{}:{toJSON:d.noop}}if(typeof t==="object"||typeof t==="function"){if(r){l[f]=d.extend(l[f],t)}else{l[f].data=d.extend(l[f].data,t)}}a=l[f];if(!r){if(!a.data){a.data={}}a=a.data}if(i!==undefined){a[d.camelCase(t)]=i}if(typeof t==="string"){o=a[t];if(o==null){o=a[d.camelCase(t)]}}else{o=a}return o}function z(e,t,n){if(!d.acceptData(e)){return}var i,r,o=e.nodeType,a=o?d.cache:e,s=o?e[d.expando]:d.expando;if(!a[s]){return}if(t){i=n?a[s]:a[s].data;if(i){if(!d.isArray(t)){if(t in i){t=[t]}else{t=d.camelCase(t);if(t in i){t=[t]}else{t=t.split(" ")}}}else{t=t.concat(d.map(t,d.camelCase))}r=t.length;while(r--){delete i[t[r]]}if(n?!W(i):!d.isEmptyObject(i)){return}}}if(!n){delete a[s].data;if(!W(a[s])){return}}if(o){d.cleanData([e],true)}else if(f.deleteExpando||a!=a.window){delete a[s]}else{a[s]=null}}d.extend({cache:{},noData:{"applet ":true,"embed ":true,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){e=e.nodeType?d.cache[e[d.expando]]:e[d.expando];return!!e&&!W(e)},data:function(e,t,n){return $(e,t,n)},removeData:function(e,t){return z(e,t)},_data:function(e,t,n){return $(e,t,n,true)},_removeData:function(e,t){return z(e,t,true)}});d.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(e===undefined){if(this.length){r=d.data(o);if(o.nodeType===1&&!d._data(o,"parsedAttrs")){n=a.length;while(n--){if(a[n]){i=a[n].name;if(i.indexOf("data-")===0){i=d.camelCase(i.slice(5));R(o,i,r[i])}}}d._data(o,"parsedAttrs",true)}}return r}if(typeof e==="object"){return this.each(function(){d.data(this,e)})}return arguments.length>1?this.each(function(){d.data(this,e,t)}):o?R(o,e,d.data(o,e)):undefined},removeData:function(e){return this.each(function(){d.removeData(this,e)})}});d.extend({queue:function(e,t,n){var i;if(e){t=(t||"fx")+"queue";i=d._data(e,t);if(n){if(!i||d.isArray(n)){i=d._data(e,t,d.makeArray(n))}else{i.push(n)}}return i||[]}},dequeue:function(e,t){t=t||"fx";var n=d.queue(e,t),i=n.length,r=n.shift(),o=d._queueHooks(e,t),a=function(){d.dequeue(e,t)};if(r==="inprogress"){r=n.shift();i--}if(r){if(t==="fx"){n.unshift("inprogress")}delete o.stop;r.call(e,a,o)}if(!i&&o){o.empty.fire()}},_queueHooks:function(e,t){var n=t+"queueHooks";return d._data(e,n)||d._data(e,n,{empty:d.Callbacks("once memory").add(function(){d._removeData(e,t+"queue");d._removeData(e,n)})})}});d.fn.extend({queue:function(e,t){var n=2;if(typeof e!=="string"){t=e;e="fx";n--}if(arguments.length<n){return d.queue(this[0],e)}return t===undefined?this:this.each(function(){var n=d.queue(this,e,t);d._queueHooks(this,e);if(e==="fx"&&n[0]!=="inprogress"){d.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){d.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=d.Deferred(),o=this,a=this.length,s=function(){if(!--i){r.resolveWith(o,[o])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){n=d._data(o[a],e+"queueHooks");if(n&&n.empty){i++;n.empty.add(s)}}s();return r.promise(t)}});var I=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var X=["Top","Right","Bottom","Left"];var U=function(e,t){e=t||e;return d.css(e,"display")==="none"||!d.contains(e.ownerDocument,e)};var V=d.access=function(e,t,n,i,r,o,a){var s=0,u=e.length,l=n==null;if(d.type(n)==="object"){r=true;for(s in n){d.access(e,t,s,n[s],true,o,a)}}else if(i!==undefined){r=true;if(!d.isFunction(i)){a=true}if(l){if(a){t.call(e,i);t=null}else{l=t;t=function(e,t,n){return l.call(d(e),n)}}}if(t){for(;s<u;s++){t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)))}}}return r?e:l?t.call(e):u?t(e[0],n):o};var J=/^(?:checkbox|radio)$/i;(function(){var e=N.createElement("input"),t=N.createElement("div"),n=N.createDocumentFragment();t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";f.leadingWhitespace=t.firstChild.nodeType===3;f.tbody=!t.getElementsByTagName("tbody").length;f.htmlSerialize=!!t.getElementsByTagName("link").length;f.html5Clone=N.createElement("nav").cloneNode(true).outerHTML!=="<:nav></:nav>";e.type="checkbox";e.checked=true;n.appendChild(e);f.appendChecked=e.checked;t.innerHTML="<textarea>x</textarea>";f.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue;n.appendChild(t);t.innerHTML="<input type='radio' checked='checked' name='t'/>";f.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;f.noCloneEvent=true;if(t.attachEvent){t.attachEvent("onclick",function(){f.noCloneEvent=false});t.cloneNode(true).click()}if(f.deleteExpando==null){f.deleteExpando=true;try{delete t.test}catch(e){f.deleteExpando=false}}})();(function(){var t,n,i=N.createElement("div");for(t in{submit:true,change:true,focusin:true}){n="on"+t;if(!(f[t+"Bubbles"]=n in e)){i.setAttribute(n,"t");f[t+"Bubbles"]=i.attributes[n].expando===false}}i=null})();var Y=/^(?:input|select|textarea)$/i,G=/^key/,Q=/^(?:mouse|pointer|contextmenu)|click/,K=/^(?:focusinfocus|focusoutblur)$/,Z=/^([^.]*)(?:\.(.+)|)$/;function ee(){return true}function te(){return false}function ne(){try{return N.activeElement}catch(e){}}d.event={global:{},add:function(e,t,n,i,r){var o,a,s,u,l,f,c,p,h,m,g,y=d._data(e);if(!y){return}if(n.handler){u=n;n=u.handler;r=u.selector}if(!n.guid){n.guid=d.guid++}if(!(a=y.events)){a=y.events={}}if(!(f=y.handle)){f=y.handle=function(e){return typeof d!==F&&(!e||d.event.triggered!==e.type)?d.event.dispatch.apply(f.elem,arguments):undefined};f.elem=e}t=(t||"").match(j)||[""];s=t.length;while(s--){o=Z.exec(t[s])||[];h=g=o[1];m=(o[2]||"").split(".").sort();if(!h){continue}l=d.event.special[h]||{};h=(r?l.delegateType:l.bindType)||h;l=d.event.special[h]||{};c=d.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&d.expr.match.needsContext.test(r),namespace:m.join(".")},u);if(!(p=a[h])){p=a[h]=[];p.delegateCount=0;if(!l.setup||l.setup.call(e,i,m,f)===false){if(e.addEventListener){e.addEventListener(h,f,false)}else if(e.attachEvent){e.attachEvent("on"+h,f)}}}if(l.add){l.add.call(e,c);if(!c.handler.guid){c.handler.guid=n.guid}}if(r){p.splice(p.delegateCount++,0,c)}else{p.push(c)}d.event.global[h]=true}e=null},remove:function(e,t,n,i,r){var o,a,s,u,l,f,c,p,h,m,g,y=d.hasData(e)&&d._data(e);if(!y||!(f=y.events)){return}t=(t||"").match(j)||[""];l=t.length;while(l--){s=Z.exec(t[l])||[];h=g=s[1];m=(s[2]||"").split(".").sort();if(!h){for(h in f){d.event.remove(e,h+t[l],n,i,true)}continue}c=d.event.special[h]||{};h=(i?c.delegateType:c.bindType)||h;p=f[h]||[];s=s[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)");u=o=p.length;while(o--){a=p[o];if((r||g===a.origType)&&(!n||n.guid===a.guid)&&(!s||s.test(a.namespace))&&(!i||i===a.selector||i==="**"&&a.selector)){p.splice(o,1);if(a.selector){p.delegateCount--}if(c.remove){c.remove.call(e,a)}}}if(u&&!p.length){if(!c.teardown||c.teardown.call(e,m,y.handle)===false){d.removeEvent(e,h,y.handle)}delete f[h]}}if(d.isEmptyObject(f)){delete y.handle;d._removeData(e,"events")}},trigger:function(t,n,i,r){var o,a,s,u,f,c,p,h=[i||N],m=l.call(t,"type")?t.type:t,g=l.call(t,"namespace")?t.namespace.split("."):[];s=c=i=i||N;if(i.nodeType===3||i.nodeType===8){return}if(K.test(m+d.event.triggered)){return}if(m.indexOf(".")>=0){g=m.split(".");m=g.shift();g.sort()}a=m.indexOf(":")<0&&"on"+m;t=t[d.expando]?t:new d.Event(m,typeof t==="object"&&t);t.isTrigger=r?2:3;t.namespace=g.join(".");t.namespace_re=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=i}n=n==null?[t]:d.makeArray(n,[t]);f=d.event.special[m]||{};if(!r&&f.trigger&&f.trigger.apply(i,n)===false){return}if(!r&&!f.noBubble&&!d.isWindow(i)){u=f.delegateType||m;if(!K.test(u+m)){s=s.parentNode}for(;s;s=s.parentNode){h.push(s);c=s}if(c===(i.ownerDocument||N)){h.push(c.defaultView||c.parentWindow||e)}}p=0;while((s=h[p++])&&!t.isPropagationStopped()){t.type=p>1?u:f.bindType||m;o=(d._data(s,"events")||{})[t.type]&&d._data(s,"handle");if(o){o.apply(s,n)}o=a&&s[a];if(o&&o.apply&&d.acceptData(s)){t.result=o.apply(s,n);if(t.result===false){t.preventDefault()}}}t.type=m;if(!r&&!t.isDefaultPrevented()){if((!f._default||f._default.apply(h.pop(),n)===false)&&d.acceptData(i)){if(a&&i[m]&&!d.isWindow(i)){c=i[a];if(c){i[a]=null}d.event.triggered=m;try{i[m]()}catch(e){}d.event.triggered=undefined;if(c){i[a]=c}}}}return t.result},dispatch:function(e){e=d.event.fix(e);var t,n,r,o,a,s=[],u=i.call(arguments),l=(d._data(this,"events")||{})[e.type]||[],f=d.event.special[e.type]||{};u[0]=e;e.delegateTarget=this;if(f.preDispatch&&f.preDispatch.call(this,e)===false){return}s=d.event.handlers.call(this,e,l);t=0;while((o=s[t++])&&!e.isPropagationStopped()){e.currentTarget=o.elem;a=0;while((r=o.handlers[a++])&&!e.isImmediatePropagationStopped()){if(!e.namespace_re||e.namespace_re.test(r.namespace)){e.handleObj=r;e.data=r.data;n=((d.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,u);if(n!==undefined){if((e.result=n)===false){e.preventDefault();e.stopPropagation()}}}}}if(f.postDispatch){f.postDispatch.call(this,e)}return e.result},handlers:function(e,t){var n,i,r,o,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&(!e.button||e.type!=="click")){for(;u!=this;u=u.parentNode||this){if(u.nodeType===1&&(u.disabled!==true||e.type!=="click")){r=[];for(o=0;o<s;o++){i=t[o];n=i.selector+" ";if(r[n]===undefined){r[n]=i.needsContext?d(n,this).index(u)>=0:d.find(n,this,null,[u]).length}if(r[n]){r.push(i)}}if(r.length){a.push({elem:u,handlers:r})}}}}if(s<t.length){a.push({elem:this,handlers:t.slice(s)})}return a},fix:function(e){if(e[d.expando]){return e}var t,n,i,r=e.type,o=e,a=this.fixHooks[r];if(!a){this.fixHooks[r]=a=Q.test(r)?this.mouseHooks:G.test(r)?this.keyHooks:{}}i=a.props?this.props.concat(a.props):this.props;e=new d.Event(o);t=i.length;while(t--){n=i[t];e[n]=o[n]}if(!e.target){e.target=o.srcElement||N}if(e.target.nodeType===3){e.target=e.target.parentNode}e.metaKey=!!e.metaKey;return a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){if(e.which==null){e.which=t.charCode!=null?t.charCode:t.keyCode}return e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button,a=t.fromElement;if(e.pageX==null&&t.clientX!=null){i=e.target.ownerDocument||N;r=i.documentElement;n=i.body;e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0);e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)}if(!e.relatedTarget&&a){e.relatedTarget=a===e.target?t.toElement:a}if(!e.which&&o!==undefined){e.which=o&1?1:o&2?3:o&4?2:0}return e}},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==ne()&&this.focus){try{this.focus();return false}catch(e){}}},delegateType:"focusin"},blur:{trigger:function(){if(this===ne()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(d.nodeName(this,"input")&&this.type==="checkbox"&&this.click){this.click();return false}},_default:function(e){return d.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}},simulate:function(e,t,n,i){var r=d.extend(new d.Event,n,{type:e,isSimulated:true,originalEvent:{}});if(i){d.event.trigger(r,null,t)}else{d.event.dispatch.call(t,r)}if(r.isDefaultPrevented()){n.preventDefault()}}};d.removeEvent=N.removeEventListener?function(e,t,n){if(e.removeEventListener){e.removeEventListener(t,n,false)}}:function(e,t,n){var i="on"+t;if(e.detachEvent){if(typeof e[i]===F){e[i]=null}e.detachEvent(i,n)}};d.Event=function(e,t){if(!(this instanceof d.Event)){return new d.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?ee:te}else{this.type=e}if(t){d.extend(this,t)}this.timeStamp=e&&e.timeStamp||d.now();this[d.expando]=true};d.Event.prototype={isDefaultPrevented:te,isPropagationStopped:te,isImmediatePropagationStopped:te,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ee;if(!e){return}if(e.preventDefault){e.preventDefault()}else{e.returnValue=false}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ee;if(!e){return}if(e.stopPropagation){e.stopPropagation()}e.cancelBubble=true},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ee;if(e&&e.stopImmediatePropagation){e.stopImmediatePropagation()}this.stopPropagation()}};d.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){d.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;if(!r||r!==i&&!d.contains(i,r)){e.type=o.origType;n=o.handler.apply(this,arguments);e.type=t}return n}}});if(!f.submitBubbles){d.event.special.submit={setup:function(){if(d.nodeName(this,"form")){return false}d.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=d.nodeName(t,"input")||d.nodeName(t,"button")?t.form:undefined;if(n&&!d._data(n,"submitBubbles")){d.event.add(n,"submit._submit",function(e){e._submit_bubble=true});d._data(n,"submitBubbles",true)}})},postDispatch:function(e){if(e._submit_bubble){delete e._submit_bubble;if(this.parentNode&&!e.isTrigger){d.event.simulate("submit",this.parentNode,e,true)}}},teardown:function(){if(d.nodeName(this,"form")){return false}d.event.remove(this,"._submit")}}}if(!f.changeBubbles){d.event.special.change={setup:function(){if(Y.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio"){d.event.add(this,"propertychange._change",function(e){if(e.originalEvent.propertyName==="checked"){this._just_changed=true}});d.event.add(this,"click._change",function(e){if(this._just_changed&&!e.isTrigger){this._just_changed=false}d.event.simulate("change",this,e,true)})}return false}d.event.add(this,"beforeactivate._change",function(e){var t=e.target;if(Y.test(t.nodeName)&&!d._data(t,"changeBubbles")){d.event.add(t,"change._change",function(e){if(this.parentNode&&!e.isSimulated&&!e.isTrigger){d.event.simulate("change",this.parentNode,e,true)}});d._data(t,"changeBubbles",true)}})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||t.type!=="radio"&&t.type!=="checkbox"){return e.handleObj.handler.apply(this,arguments)}},teardown:function(){d.event.remove(this,"._change");return!Y.test(this.nodeName)}}}if(!f.focusinBubbles){d.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){d.event.simulate(t,e.target,d.event.fix(e),true)};d.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=d._data(i,t);if(!r){i.addEventListener(e,n,true)}d._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=d._data(i,t)-1;if(!r){i.removeEventListener(e,n,true);d._removeData(i,t)}else{d._data(i,t,r)}}}})}d.fn.extend({on:function(e,t,n,i,r){var o,a;if(typeof e==="object"){if(typeof t!=="string"){n=n||t;t=undefined}for(o in e){this.on(o,t,n,e[o],r)}return this}if(n==null&&i==null){i=t;n=t=undefined}else if(i==null){if(typeof t==="string"){i=n;n=undefined}else{i=n;n=t;t=undefined}}if(i===false){i=te}else if(!i){return this}if(r===1){a=i;i=function(e){d().off(e);return a.apply(this,arguments)};i.guid=a.guid||(a.guid=d.guid++)}return this.each(function(){d.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj){i=e.handleObj;d(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);return this}if(typeof e==="object"){for(r in e){this.off(r,t,e[r])}return this}if(t===false||typeof t==="function"){n=t;t=undefined}if(n===false){n=te}return this.each(function(){d.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){d.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n){return d.event.trigger(e,t,n,true)}}});function ie(e){var t=re.split("|"),n=e.createDocumentFragment();if(n.createElement){while(t.length){n.createElement(t.pop())}}return n}var re="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|"+"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",oe=/ jQuery\d+="(?:null|\d+)"/g,ae=new RegExp("<(?:"+re+")[\\s/>]","i"),se=/^\s+/,ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,le=/<([\w:]+)/,fe=/<tbody/i,ce=/<|&#?\w+;/,de=/<(?:script|style|link)/i,pe=/checked\s*(?:[^=]|=\s*.checked.)/i,he=/^$|\/(?:java|ecma)script/i,me=/^true\/(.*)/,ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ye={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:f.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},ve=ie(N),be=ve.appendChild(N.createElement("div"));ye.optgroup=ye.option;ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead;ye.th=ye.td;function xe(e,t){var n,i,r=0,o=typeof e.getElementsByTagName!==F?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==F?e.querySelectorAll(t||"*"):undefined;if(!o){for(o=[],n=e.childNodes||e;(i=n[r])!=null;r++){if(!t||d.nodeName(i,t)){o.push(i)}else{d.merge(o,xe(i,t))}}}return t===undefined||t&&d.nodeName(e,t)?d.merge([e],o):o}function we(e){if(J.test(e.type)){e.defaultChecked=e.checked}}function Te(e,t){return d.nodeName(e,"table")&&d.nodeName(t.nodeType!==11?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ce(e){e.type=(d.find.attr(e,"type")!==null)+"/"+e.type;return e}function Ne(e){var t=me.exec(e.type);if(t){e.type=t[1]}else{e.removeAttribute("type")}return e}function Ee(e,t){var n,i=0;for(;(n=e[i])!=null;i++){d._data(n,"globalEval",!t||d._data(t[i],"globalEval"))}}function ke(e,t){if(t.nodeType!==1||!d.hasData(e)){return}var n,i,r,o=d._data(e),a=d._data(t,o),s=o.events;if(s){delete a.handle;a.events={};for(n in s){for(i=0,r=s[n].length;i<r;i++){d.event.add(t,n,s[n][i])}}}if(a.data){a.data=d.extend({},a.data)}}function Se(e,t){var n,i,r;if(t.nodeType!==1){return}n=t.nodeName.toLowerCase();if(!f.noCloneEvent&&t[d.expando]){r=d._data(t);for(i in r.events){d.removeEvent(t,i,r.handle)}t.removeAttribute(d.expando)}if(n==="script"&&t.text!==e.text){Ce(t).text=e.text;Ne(t)}else if(n==="object"){if(t.parentNode){t.outerHTML=e.outerHTML}if(f.html5Clone&&(e.innerHTML&&!d.trim(t.innerHTML))){t.innerHTML=e.innerHTML}}else if(n==="input"&&J.test(e.type)){t.defaultChecked=t.checked=e.checked;if(t.value!==e.value){t.value=e.value}}else if(n==="option"){t.defaultSelected=t.selected=e.defaultSelected}else if(n==="input"||n==="textarea"){t.defaultValue=e.defaultValue}}d.extend({clone:function(e,t,n){var i,r,o,a,s,u=d.contains(e.ownerDocument,e);if(f.html5Clone||d.isXMLDoc(e)||!ae.test("<"+e.nodeName+">")){o=e.cloneNode(true)}else{be.innerHTML=e.outerHTML;be.removeChild(o=be.firstChild)}if((!f.noCloneEvent||!f.noCloneChecked)&&(e.nodeType===1||e.nodeType===11)&&!d.isXMLDoc(e)){i=xe(o);s=xe(e);for(a=0;(r=s[a])!=null;++a){if(i[a]){Se(r,i[a])}}}if(t){if(n){s=s||xe(e);i=i||xe(o);for(a=0;(r=s[a])!=null;a++){ke(r,i[a])}}else{ke(e,o)}}i=xe(o,"script");if(i.length>0){Ee(i,!u&&xe(e,"script"))}i=s=r=null;return o},buildFragment:function(e,t,n,i){var r,o,a,s,u,l,c,p=e.length,h=ie(t),m=[],g=0;for(;g<p;g++){o=e[g];if(o||o===0){if(d.type(o)==="object"){d.merge(m,o.nodeType?[o]:o)}else if(!ce.test(o)){m.push(t.createTextNode(o))}else{s=s||h.appendChild(t.createElement("div"));u=(le.exec(o)||["",""])[1].toLowerCase();c=ye[u]||ye._default;s.innerHTML=c[1]+o.replace(ue,"<$1></$2>")+c[2];r=c[0];while(r--){s=s.lastChild}if(!f.leadingWhitespace&&se.test(o)){m.push(t.createTextNode(se.exec(o)[0]))}if(!f.tbody){o=u==="table"&&!fe.test(o)?s.firstChild:c[1]==="<table>"&&!fe.test(o)?s:0;r=o&&o.childNodes.length;while(r--){if(d.nodeName(l=o.childNodes[r],"tbody")&&!l.childNodes.length){o.removeChild(l)}}}d.merge(m,s.childNodes);s.textContent="";while(s.firstChild){s.removeChild(s.firstChild)}s=h.lastChild}}}if(s){h.removeChild(s)}if(!f.appendChecked){d.grep(xe(m,"input"),we)}g=0;while(o=m[g++]){if(i&&d.inArray(o,i)!==-1){continue}a=d.contains(o.ownerDocument,o);s=xe(h.appendChild(o),"script");if(a){Ee(s)}if(n){r=0;while(o=s[r++]){if(he.test(o.type||"")){n.push(o)}}}}s=null;return h},cleanData:function(e,t){var i,r,o,a,s=0,u=d.expando,l=d.cache,c=f.deleteExpando,p=d.event.special;for(;(i=e[s])!=null;s++){if(t||d.acceptData(i)){o=i[u];a=o&&l[o];if(a){if(a.events){for(r in a.events){if(p[r]){d.event.remove(i,r)}else{d.removeEvent(i,r,a.handle)}}}if(l[o]){delete l[o];if(c){delete i[u]}else if(typeof i.removeAttribute!==F){i.removeAttribute(u)}else{i[u]=null}n.push(o)}}}}}});d.fn.extend({text:function(e){return V(this,function(e){return e===undefined?d.text(this):this.empty().append((this[0]&&this[0].ownerDocument||N).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Te(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Te(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return this.domManip(arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},remove:function(e,t){var n,i=e?d.filter(e,this):this,r=0;for(;(n=i[r])!=null;r++){if(!t&&n.nodeType===1){d.cleanData(xe(n))}if(n.parentNode){if(t&&d.contains(n.ownerDocument,n)){Ee(xe(n,"script"))}n.parentNode.removeChild(n)}}return this},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){d.cleanData(xe(e,false))}while(e.firstChild){e.removeChild(e.firstChild)}if(e.options&&d.nodeName(e,"select")){e.options.length=0}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return d.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,i=this.length;if(e===undefined){return t.nodeType===1?t.innerHTML.replace(oe,""):undefined}if(typeof e==="string"&&!de.test(e)&&(f.htmlSerialize||!ae.test(e))&&(f.leadingWhitespace||!se.test(e))&&!ye[(le.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(ue,"<$1></$2>");try{for(;n<i;n++){t=this[n]||{};if(t.nodeType===1){d.cleanData(xe(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];this.domManip(arguments,function(t){e=this.parentNode;d.cleanData(xe(this));if(e){e.replaceChild(t,this)}});return e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,true)},domManip:function(e,t){e=r.apply([],e);var n,i,o,a,s,u,l=0,c=this.length,p=this,h=c-1,m=e[0],g=d.isFunction(m);if(g||c>1&&typeof m==="string"&&!f.checkClone&&pe.test(m)){return this.each(function(n){var i=p.eq(n);if(g){e[0]=m.call(this,n,i.html())}i.domManip(e,t)})}if(c){u=d.buildFragment(e,this[0].ownerDocument,false,this);n=u.firstChild;if(u.childNodes.length===1){u=n}if(n){a=d.map(xe(u,"script"),Ce);o=a.length;for(;l<c;l++){i=u;if(l!==h){i=d.clone(i,true,true);if(o){d.merge(a,xe(i,"script"))}}t.call(this[l],i,l)}if(o){s=a[a.length-1].ownerDocument;d.map(a,Ne);for(l=0;l<o;l++){i=a[l];if(he.test(i.type||"")&&!d._data(i,"globalEval")&&d.contains(s,i)){if(i.src){if(d._evalUrl){d._evalUrl(i.src)}}else{d.globalEval((i.text||i.textContent||i.innerHTML||"").replace(ge,""))}}}}u=n=null}}return this}});d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){d.fn[e]=function(e){var n,i=0,r=[],a=d(e),s=a.length-1;for(;i<=s;i++){n=i===s?this:this.clone(true);d(a[i])[t](n);o.apply(r,n.get())}return this.pushStack(r)}});var Ae,De={};function je(t,n){var i,r=d(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(i=e.getDefaultComputedStyle(r[0]))?i.display:d.css(r[0],"display");r.detach();return o}function Le(e){var t=N,n=De[e];if(!n){n=je(e,t);if(n==="none"||!n){Ae=(Ae||d("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement);t=(Ae[0].contentWindow||Ae[0].contentDocument).document;t.write();t.close();n=je(e,t);Ae.detach()}De[e]=n}return n}(function(){var e;f.shrinkWrapBlocks=function(){if(e!=null){return e}e=false;var t,n,i;n=N.getElementsByTagName("body")[0];if(!n||!n.style){return}t=N.createElement("div");i=N.createElement("div");i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px";n.appendChild(i).appendChild(t);if(typeof t.style.zoom!==F){t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;"+"box-sizing:content-box;display:block;margin:0;border:0;"+"padding:1px;width:1px;zoom:1";t.appendChild(N.createElement("div")).style.width="5px";e=t.offsetWidth!==3}n.removeChild(i);return e}})();var He=/^margin/;var qe=new RegExp("^("+I+")(?!px)[a-z%]+$","i");var _e,Me,Fe=/^(top|right|bottom|left)$/;if(e.getComputedStyle){_e=function(t){if(t.ownerDocument.defaultView.opener){return t.ownerDocument.defaultView.getComputedStyle(t,null)}return e.getComputedStyle(t,null)};Me=function(e,t,n){var i,r,o,a,s=e.style;n=n||_e(e);a=n?n.getPropertyValue(t)||n[t]:undefined;if(n){if(a===""&&!d.contains(e.ownerDocument,e)){a=d.style(e,t)}if(qe.test(a)&&He.test(t)){i=s.width;r=s.minWidth;o=s.maxWidth;s.minWidth=s.maxWidth=s.width=a;a=n.width;s.width=i;s.minWidth=r;s.maxWidth=o}}return a===undefined?a:a+""}}else if(N.documentElement.currentStyle){_e=function(e){return e.currentStyle};Me=function(e,t,n){var i,r,o,a,s=e.style;n=n||_e(e);a=n?n[t]:undefined;if(a==null&&s&&s[t]){a=s[t]}if(qe.test(a)&&!Fe.test(t)){i=s.left;r=e.runtimeStyle;o=r&&r.left;if(o){r.left=e.currentStyle.left}s.left=t==="fontSize"?"1em":a;a=s.pixelLeft+"px";s.left=i;if(o){r.left=o}}return a===undefined?a:a+""||"auto"}}function Oe(e,t){return{get:function(){var n=e();if(n==null){return}if(n){delete this.get;return}return(this.get=t).apply(this,arguments)}}}(function(){var t,n,i,r,o,a,s;t=N.createElement("div");t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";i=t.getElementsByTagName("a")[0];n=i&&i.style;if(!n){return}n.cssText="float:left;opacity:.5";f.opacity=n.opacity==="0.5";f.cssFloat=!!n.cssFloat;t.style.backgroundClip="content-box";t.cloneNode(true).style.backgroundClip="";f.clearCloneStyle=t.style.backgroundClip==="content-box";f.boxSizing=n.boxSizing===""||n.MozBoxSizing===""||n.WebkitBoxSizing==="";d.extend(f,{reliableHiddenOffsets:function(){if(a==null){u()}return a},boxSizingReliable:function(){if(o==null){u()}return o},pixelPosition:function(){if(r==null){u()}return r},reliableMarginRight:function(){if(s==null){u()}return s}});function u(){var t,n,i,u;n=N.getElementsByTagName("body")[0];if(!n||!n.style){return}t=N.createElement("div");i=N.createElement("div");i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px";n.appendChild(i).appendChild(t);t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;"+"box-sizing:border-box;display:block;margin-top:1%;top:1%;"+"border:1px;padding:1px;width:4px;position:absolute";r=o=false;s=true;if(e.getComputedStyle){r=(e.getComputedStyle(t,null)||{}).top!=="1%";o=(e.getComputedStyle(t,null)||{width:"4px"}).width==="4px";u=t.appendChild(N.createElement("div"));u.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;"+"box-sizing:content-box;display:block;margin:0;border:0;padding:0";u.style.marginRight=u.style.width="0";t.style.width="1px";s=!parseFloat((e.getComputedStyle(u,null)||{}).marginRight);t.removeChild(u)}t.innerHTML="<table><tr><td></td><td>t</td></tr></table>";u=t.getElementsByTagName("td");u[0].style.cssText="margin:0;border:0;padding:0;display:none";a=u[0].offsetHeight===0;if(a){u[0].style.display="";u[1].style.display="none";a=u[0].offsetHeight===0}n.removeChild(i)}})();d.swap=function(e,t,n,i){var r,o,a={};for(o in t){a[o]=e.style[o];e.style[o]=t[o]}r=n.apply(e,i||[]);for(o in t){e.style[o]=a[o]}return r};var Be=/alpha\([^)]*\)/i,Pe=/opacity\s*=\s*([^)]*)/,Re=/^(none|table(?!-c[ea]).+)/,We=new RegExp("^("+I+")(.*)$","i"),$e=new RegExp("^([+-])=("+I+")","i"),ze={position:"absolute",visibility:"hidden",display:"block"},Ie={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","O","Moz","ms"];function Ue(e,t){if(t in e){return t}var n=t.charAt(0).toUpperCase()+t.slice(1),i=t,r=Xe.length;while(r--){t=Xe[r]+n;if(t in e){return t}}return i}function Ve(e,t){var n,i,r,o=[],a=0,s=e.length;for(;a<s;a++){i=e[a];if(!i.style){continue}o[a]=d._data(i,"olddisplay");n=i.style.display;if(t){if(!o[a]&&n==="none"){i.style.display=""}if(i.style.display===""&&U(i)){o[a]=d._data(i,"olddisplay",Le(i.nodeName))}}else{r=U(i);if(n&&n!=="none"||!r){d._data(i,"olddisplay",r?n:d.css(i,"display"))}}}for(a=0;a<s;a++){i=e[a];if(!i.style){continue}if(!t||i.style.display==="none"||i.style.display===""){i.style.display=t?o[a]||"":"none"}}return e}function Je(e,t,n){var i=We.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function Ye(e,t,n,i,r){var o=n===(i?"border":"content")?4:t==="width"?1:0,a=0;for(;o<4;o+=2){if(n==="margin"){a+=d.css(e,n+X[o],true,r)}if(i){if(n==="content"){a-=d.css(e,"padding"+X[o],true,r)}if(n!=="margin"){a-=d.css(e,"border"+X[o]+"Width",true,r)}}else{a+=d.css(e,"padding"+X[o],true,r);if(n!=="padding"){a+=d.css(e,"border"+X[o]+"Width",true,r)}}}return a}function Ge(e,t,n){var i=true,r=t==="width"?e.offsetWidth:e.offsetHeight,o=_e(e),a=f.boxSizing&&d.css(e,"boxSizing",false,o)==="border-box";if(r<=0||r==null){r=Me(e,t,o);if(r<0||r==null){r=e.style[t]}if(qe.test(r)){return r}i=a&&(f.boxSizingReliable()||r===e.style[t]);r=parseFloat(r)||0}
return r+Ye(e,t,n||(a?"border":"content"),i,o)+"px"}d.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Me(e,"opacity");return n===""?"1":n}}}},cssNumber:{columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{float:f.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var r,o,a,s=d.camelCase(t),u=e.style;t=d.cssProps[s]||(d.cssProps[s]=Ue(u,s));a=d.cssHooks[t]||d.cssHooks[s];if(n!==undefined){o=typeof n;if(o==="string"&&(r=$e.exec(n))){n=(r[1]+1)*r[2]+parseFloat(d.css(e,t));o="number"}if(n==null||n!==n){return}if(o==="number"&&!d.cssNumber[s]){n+="px"}if(!f.clearCloneStyle&&n===""&&t.indexOf("background")===0){u[t]="inherit"}if(!a||!("set"in a)||(n=a.set(e,n,i))!==undefined){try{u[t]=n}catch(e){}}}else{if(a&&"get"in a&&(r=a.get(e,false,i))!==undefined){return r}return u[t]}},css:function(e,t,n,i){var r,o,a,s=d.camelCase(t);t=d.cssProps[s]||(d.cssProps[s]=Ue(e.style,s));a=d.cssHooks[t]||d.cssHooks[s];if(a&&"get"in a){o=a.get(e,true,n)}if(o===undefined){o=Me(e,t,i)}if(o==="normal"&&t in Ie){o=Ie[t]}if(n===""||n){r=parseFloat(o);return n===true||d.isNumeric(r)?r||0:o}return o}});d.each(["height","width"],function(e,t){d.cssHooks[t]={get:function(e,n,i){if(n){return Re.test(d.css(e,"display"))&&e.offsetWidth===0?d.swap(e,ze,function(){return Ge(e,t,i)}):Ge(e,t,i)}},set:function(e,n,i){var r=i&&_e(e);return Je(e,n,i?Ye(e,t,i,f.boxSizing&&d.css(e,"boxSizing",false,r)==="border-box",r):0)}}});if(!f.opacity){d.cssHooks.opacity={get:function(e,t){return Pe.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=d.isNumeric(t)?"alpha(opacity="+t*100+")":"",o=i&&i.filter||n.filter||"";n.zoom=1;if((t>=1||t==="")&&d.trim(o.replace(Be,""))===""&&n.removeAttribute){n.removeAttribute("filter");if(t===""||i&&!i.filter){return}}n.filter=Be.test(o)?o.replace(Be,r):o+" "+r}}}d.cssHooks.marginRight=Oe(f.reliableMarginRight,function(e,t){if(t){return d.swap(e,{display:"inline-block"},Me,[e,"marginRight"])}});d.each({margin:"",padding:"",border:"Width"},function(e,t){d.cssHooks[e+t]={expand:function(n){var i=0,r={},o=typeof n==="string"?n.split(" "):[n];for(;i<4;i++){r[e+X[i]+t]=o[i]||o[i-2]||o[0]}return r}};if(!He.test(e)){d.cssHooks[e+t].set=Je}});d.fn.extend({css:function(e,t){return V(this,function(e,t,n){var i,r,o={},a=0;if(d.isArray(t)){i=_e(e);r=t.length;for(;a<r;a++){o[t[a]]=d.css(e,t[a],false,i)}return o}return n!==undefined?d.style(e,t,n):d.css(e,t)},e,t,arguments.length>1)},show:function(){return Ve(this,true)},hide:function(){return Ve(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(U(this)){d(this).show()}else{d(this).hide()}})}});function Qe(e,t,n,i,r){return new Qe.prototype.init(e,t,n,i,r)}d.Tween=Qe;Qe.prototype={constructor:Qe,init:function(e,t,n,i,r,o){this.elem=e;this.prop=n;this.easing=r||"swing";this.options=t;this.start=this.now=this.cur();this.end=i;this.unit=o||(d.cssNumber[n]?"":"px")},cur:function(){var e=Qe.propHooks[this.prop];return e&&e.get?e.get(this):Qe.propHooks._default.get(this)},run:function(e){var t,n=Qe.propHooks[this.prop];if(this.options.duration){this.pos=t=d.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{Qe.propHooks._default.set(this)}return this}};Qe.prototype.init.prototype=Qe.prototype;Qe.propHooks={_default:{get:function(e){var t;if(e.elem[e.prop]!=null&&(!e.elem.style||e.elem.style[e.prop]==null)){return e.elem[e.prop]}t=d.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(d.fx.step[e.prop]){d.fx.step[e.prop](e)}else if(e.elem.style&&(e.elem.style[d.cssProps[e.prop]]!=null||d.cssHooks[e.prop])){d.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};Qe.propHooks.scrollTop=Qe.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};d.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}};d.fx=Qe.prototype.init;d.fx.step={};var Ke,Ze,et=/^(?:toggle|show|hide)$/,tt=new RegExp("^(?:([+-])=|)("+I+")([a-z%]*)$","i"),nt=/queueHooks$/,it=[ut],rt={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=tt.exec(t),o=r&&r[3]||(d.cssNumber[e]?"":"px"),a=(d.cssNumber[e]||o!=="px"&&+i)&&tt.exec(d.css(n.elem,e)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3];r=r||[];a=+i||1;do{s=s||".5";a=a/s;d.style(n.elem,e,a+o)}while(s!==(s=n.cur()/i)&&s!==1&&--u)}if(r){a=n.start=+a||+i||0;n.unit=o;n.end=r[1]?a+(r[1]+1)*r[2]:+r[2]}return n}]};function ot(){setTimeout(function(){Ke=undefined});return Ke=d.now()}function at(e,t){var n,i={height:e},r=0;t=t?1:0;for(;r<4;r+=2-t){n=X[r];i["margin"+n]=i["padding"+n]=e}if(t){i.opacity=i.width=e}return i}function st(e,t,n){var i,r=(rt[t]||[]).concat(rt["*"]),o=0,a=r.length;for(;o<a;o++){if(i=r[o].call(n,t,e)){return i}}}function ut(e,t,n){var i,r,o,a,s,u,l,c,p=this,h={},m=e.style,g=e.nodeType&&U(e),y=d._data(e,"fxshow");if(!n.queue){s=d._queueHooks(e,"fx");if(s.unqueued==null){s.unqueued=0;u=s.empty.fire;s.empty.fire=function(){if(!s.unqueued){u()}}}s.unqueued++;p.always(function(){p.always(function(){s.unqueued--;if(!d.queue(e,"fx").length){s.empty.fire()}})})}if(e.nodeType===1&&("height"in t||"width"in t)){n.overflow=[m.overflow,m.overflowX,m.overflowY];l=d.css(e,"display");c=l==="none"?d._data(e,"olddisplay")||Le(e.nodeName):l;if(c==="inline"&&d.css(e,"float")==="none"){if(!f.inlineBlockNeedsLayout||Le(e.nodeName)==="inline"){m.display="inline-block"}else{m.zoom=1}}}if(n.overflow){m.overflow="hidden";if(!f.shrinkWrapBlocks()){p.always(function(){m.overflow=n.overflow[0];m.overflowX=n.overflow[1];m.overflowY=n.overflow[2]})}}for(i in t){r=t[i];if(et.exec(r)){delete t[i];o=o||r==="toggle";if(r===(g?"hide":"show")){if(r==="show"&&y&&y[i]!==undefined){g=true}else{continue}}h[i]=y&&y[i]||d.style(e,i)}else{l=undefined}}if(!d.isEmptyObject(h)){if(y){if("hidden"in y){g=y.hidden}}else{y=d._data(e,"fxshow",{})}if(o){y.hidden=!g}if(g){d(e).show()}else{p.done(function(){d(e).hide()})}p.done(function(){var t;d._removeData(e,"fxshow");for(t in h){d.style(e,t,h[t])}});for(i in h){a=st(g?y[i]:0,i,p);if(!(i in y)){y[i]=a.start;if(g){a.end=a.start;a.start=i==="width"||i==="height"?1:0}}}}else if((l==="none"?Le(e.nodeName):l)==="inline"){m.display=l}}function lt(e,t){var n,i,r,o,a;for(n in e){i=d.camelCase(n);r=t[i];o=e[n];if(d.isArray(o)){r=o[1];o=e[n]=o[0]}if(n!==i){e[i]=o;delete e[n]}a=d.cssHooks[i];if(a&&"expand"in a){o=a.expand(o);delete e[i];for(n in o){if(!(n in e)){e[n]=o[n];t[n]=r}}}else{t[i]=r}}}function ft(e,t,n){var i,r,o=0,a=it.length,s=d.Deferred().always(function(){delete u.elem}),u=function(){if(r){return false}var t=Ke||ot(),n=Math.max(0,l.startTime+l.duration-t),i=n/l.duration||0,o=1-i,a=0,u=l.tweens.length;for(;a<u;a++){l.tweens[a].run(o)}s.notifyWith(e,[l,o,n]);if(o<1&&u){return n}else{s.resolveWith(e,[l]);return false}},l=s.promise({elem:e,props:d.extend({},t),opts:d.extend(true,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Ke||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var i=d.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);l.tweens.push(i);return i},stop:function(t){var n=0,i=t?l.tweens.length:0;if(r){return this}r=true;for(;n<i;n++){l.tweens[n].run(1)}if(t){s.resolveWith(e,[l,t])}else{s.rejectWith(e,[l,t])}return this}}),f=l.props;lt(f,l.opts.specialEasing);for(;o<a;o++){i=it[o].call(l,e,f,l.opts);if(i){return i}}d.map(f,st,l);if(d.isFunction(l.opts.start)){l.opts.start.call(e,l)}d.fx.timer(d.extend(u,{elem:e,anim:l,queue:l.opts.queue}));return l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}d.Animation=d.extend(ft,{tweener:function(e,t){if(d.isFunction(e)){t=e;e=["*"]}else{e=e.split(" ")}var n,i=0,r=e.length;for(;i<r;i++){n=e[i];rt[n]=rt[n]||[];rt[n].unshift(t)}},prefilter:function(e,t){if(t){it.unshift(e)}else{it.push(e)}}});d.speed=function(e,t,n){var i=e&&typeof e==="object"?d.extend({},e):{complete:n||!n&&t||d.isFunction(e)&&e,duration:e,easing:n&&t||t&&!d.isFunction(t)&&t};i.duration=d.fx.off?0:typeof i.duration==="number"?i.duration:i.duration in d.fx.speeds?d.fx.speeds[i.duration]:d.fx.speeds._default;if(i.queue==null||i.queue===true){i.queue="fx"}i.old=i.complete;i.complete=function(){if(d.isFunction(i.old)){i.old.call(this)}if(i.queue){d.dequeue(this,i.queue)}};return i};d.fn.extend({fadeTo:function(e,t,n,i){return this.filter(U).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=d.isEmptyObject(e),o=d.speed(t,n,i),a=function(){var t=ft(this,d.extend({},e),o);if(r||d._data(this,"finish")){t.stop(true)}};a.finish=a;return r||o.queue===false?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop;t(n)};if(typeof e!=="string"){n=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,r=e!=null&&e+"queueHooks",o=d.timers,a=d._data(this);if(r){if(a[r]&&a[r].stop){i(a[r])}}else{for(r in a){if(a[r]&&a[r].stop&&nt.test(r)){i(a[r])}}}for(r=o.length;r--;){if(o[r].elem===this&&(e==null||o[r].queue===e)){o[r].anim.stop(n);t=false;o.splice(r,1)}}if(t||!n){d.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,n=d._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=d.timers,a=i?i.length:0;n.finish=true;d.queue(this,e,[]);if(r&&r.stop){r.stop.call(this,true)}for(t=o.length;t--;){if(o[t].elem===this&&o[t].queue===e){o[t].anim.stop(true);o.splice(t,1)}}for(t=0;t<a;t++){if(i[t]&&i[t].finish){i[t].finish.call(this)}}delete n.finish})}});d.each(["toggle","show","hide"],function(e,t){var n=d.fn[t];d.fn[t]=function(e,i,r){return e==null||typeof e==="boolean"?n.apply(this,arguments):this.animate(at(t,true),e,i,r)}});d.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){d.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}});d.timers=[];d.fx.tick=function(){var e,t=d.timers,n=0;Ke=d.now();for(;n<t.length;n++){e=t[n];if(!e()&&t[n]===e){t.splice(n--,1)}}if(!t.length){d.fx.stop()}Ke=undefined};d.fx.timer=function(e){d.timers.push(e);if(e()){d.fx.start()}else{d.timers.pop()}};d.fx.interval=13;d.fx.start=function(){if(!Ze){Ze=setInterval(d.fx.tick,d.fx.interval)}};d.fx.stop=function(){clearInterval(Ze);Ze=null};d.fx.speeds={slow:600,fast:200,_default:400};d.fn.delay=function(e,t){e=d.fx?d.fx.speeds[e]||e:e;t=t||"fx";return this.queue(t,function(t,n){var i=setTimeout(t,e);n.stop=function(){clearTimeout(i)}})};(function(){var e,t,n,i,r;t=N.createElement("div");t.setAttribute("className","t");t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";i=t.getElementsByTagName("a")[0];n=N.createElement("select");r=n.appendChild(N.createElement("option"));e=t.getElementsByTagName("input")[0];i.style.cssText="top:1px";f.getSetAttribute=t.className!=="t";f.style=/top/.test(i.getAttribute("style"));f.hrefNormalized=i.getAttribute("href")==="/a";f.checkOn=!!e.value;f.optSelected=r.selected;f.enctype=!!N.createElement("form").enctype;n.disabled=true;f.optDisabled=!r.disabled;e=N.createElement("input");e.setAttribute("value","");f.input=e.getAttribute("value")==="";e.value="t";e.setAttribute("type","radio");f.radioValue=e.value==="t"})();var ct=/\r/g;d.fn.extend({val:function(e){var t,n,i,r=this[0];if(!arguments.length){if(r){t=d.valHooks[r.type]||d.valHooks[r.nodeName.toLowerCase()];if(t&&"get"in t&&(n=t.get(r,"value"))!==undefined){return n}n=r.value;return typeof n==="string"?n.replace(ct,""):n==null?"":n}return}i=d.isFunction(e);return this.each(function(n){var r;if(this.nodeType!==1){return}if(i){r=e.call(this,n,d(this).val())}else{r=e}if(r==null){r=""}else if(typeof r==="number"){r+=""}else if(d.isArray(r)){r=d.map(r,function(e){return e==null?"":e+""})}t=d.valHooks[this.type]||d.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,r,"value")===undefined){this.value=r}})}});d.extend({valHooks:{option:{get:function(e){var t=d.find.attr(e,"value");return t!=null?t:d.trim(d.text(e))}},select:{get:function(e){var t,n,i=e.options,r=e.selectedIndex,o=e.type==="select-one"||r<0,a=o?null:[],s=o?r+1:i.length,u=r<0?s:o?r:0;for(;u<s;u++){n=i[u];if((n.selected||u===r)&&(f.optDisabled?!n.disabled:n.getAttribute("disabled")===null)&&(!n.parentNode.disabled||!d.nodeName(n.parentNode,"optgroup"))){t=d(n).val();if(o){return t}a.push(t)}}return a},set:function(e,t){var n,i,r=e.options,o=d.makeArray(t),a=r.length;while(a--){i=r[a];if(d.inArray(d.valHooks.option.get(i),o)>=0){try{i.selected=n=true}catch(e){i.scrollHeight}}else{i.selected=false}}if(!n){e.selectedIndex=-1}return r}}}});d.each(["radio","checkbox"],function(){d.valHooks[this]={set:function(e,t){if(d.isArray(t)){return e.checked=d.inArray(d(e).val(),t)>=0}}};if(!f.checkOn){d.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});var dt,pt,ht=d.expr.attrHandle,mt=/^(?:checked|selected)$/i,gt=f.getSetAttribute,yt=f.input;d.fn.extend({attr:function(e,t){return V(this,d.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){d.removeAttr(this,e)})}});d.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(!e||o===3||o===8||o===2){return}if(typeof e.getAttribute===F){return d.prop(e,t,n)}if(o!==1||!d.isXMLDoc(e)){t=t.toLowerCase();i=d.attrHooks[t]||(d.expr.match.bool.test(t)?pt:dt)}if(n!==undefined){if(n===null){d.removeAttr(e,t)}else if(i&&"set"in i&&(r=i.set(e,n,t))!==undefined){return r}else{e.setAttribute(t,n+"");return n}}else if(i&&"get"in i&&(r=i.get(e,t))!==null){return r}else{r=d.find.attr(e,t);return r==null?undefined:r}},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(j);if(o&&e.nodeType===1){while(n=o[r++]){i=d.propFix[n]||n;if(d.expr.match.bool.test(n)){if(yt&&gt||!mt.test(n)){e[i]=false}else{e[d.camelCase("default-"+n)]=e[i]=false}}else{d.attr(e,n,"")}e.removeAttribute(gt?n:i)}}},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&t==="radio"&&d.nodeName(e,"input")){var n=e.value;e.setAttribute("type",t);if(n){e.value=n}return t}}}}});pt={set:function(e,t,n){if(t===false){d.removeAttr(e,n)}else if(yt&&gt||!mt.test(n)){e.setAttribute(!gt&&d.propFix[n]||n,n)}else{e[d.camelCase("default-"+n)]=e[n]=true}return n}};d.each(d.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||d.find.attr;ht[t]=yt&&gt||!mt.test(t)?function(e,t,i){var r,o;if(!i){o=ht[t];ht[t]=r;r=n(e,t,i)!=null?t.toLowerCase():null;ht[t]=o}return r}:function(e,t,n){if(!n){return e[d.camelCase("default-"+t)]?t.toLowerCase():null}}});if(!yt||!gt){d.attrHooks.value={set:function(e,t,n){if(d.nodeName(e,"input")){e.defaultValue=t}else{return dt&&dt.set(e,t,n)}}}}if(!gt){dt={set:function(e,t,n){var i=e.getAttributeNode(n);if(!i){e.setAttributeNode(i=e.ownerDocument.createAttribute(n))}i.value=t+="";if(n==="value"||t===e.getAttribute(n)){return t}}};ht.id=ht.name=ht.coords=function(e,t,n){var i;if(!n){return(i=e.getAttributeNode(t))&&i.value!==""?i.value:null}};d.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified){return n.value}},set:dt.set};d.attrHooks.contenteditable={set:function(e,t,n){dt.set(e,t===""?false:t,n)}};d.each(["width","height"],function(e,t){d.attrHooks[t]={set:function(e,n){if(n===""){e.setAttribute(t,"auto");return n}}}})}if(!f.style){d.attrHooks.style={get:function(e){return e.style.cssText||undefined},set:function(e,t){return e.style.cssText=t+""}}}var vt=/^(?:input|select|textarea|button|object)$/i,bt=/^(?:a|area)$/i;d.fn.extend({prop:function(e,t){return V(this,d.prop,e,t,arguments.length>1)},removeProp:function(e){e=d.propFix[e]||e;return this.each(function(){try{this[e]=undefined;delete this[e]}catch(e){}})}});d.extend({propFix:{for:"htmlFor",class:"className"},prop:function(e,t,n){var i,r,o,a=e.nodeType;if(!e||a===3||a===8||a===2){return}o=a!==1||!d.isXMLDoc(e);if(o){t=d.propFix[t]||t;r=d.propHooks[t]}if(n!==undefined){return r&&"set"in r&&(i=r.set(e,n,t))!==undefined?i:e[t]=n}else{return r&&"get"in r&&(i=r.get(e,t))!==null?i:e[t]}},propHooks:{tabIndex:{get:function(e){var t=d.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}}});if(!f.hrefNormalized){d.each(["href","src"],function(e,t){d.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})}if(!f.optSelected){d.propHooks.selected={get:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}return null}}}d.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){d.propFix[this.toLowerCase()]=this});if(!f.enctype){d.propFix.enctype="encoding"}var xt=/[\t\r\n\f]/g;d.fn.extend({addClass:function(e){var t,n,i,r,o,a,s=0,u=this.length,l=typeof e==="string"&&e;if(d.isFunction(e)){return this.each(function(t){d(this).addClass(e.call(this,t,this.className))})}if(l){t=(e||"").match(j)||[];for(;s<u;s++){n=this[s];i=n.nodeType===1&&(n.className?(" "+n.className+" ").replace(xt," "):" ");if(i){o=0;while(r=t[o++]){if(i.indexOf(" "+r+" ")<0){i+=r+" "}}a=d.trim(i);if(n.className!==a){n.className=a}}}}return this},removeClass:function(e){var t,n,i,r,o,a,s=0,u=this.length,l=arguments.length===0||typeof e==="string"&&e;if(d.isFunction(e)){return this.each(function(t){d(this).removeClass(e.call(this,t,this.className))})}if(l){t=(e||"").match(j)||[];for(;s<u;s++){n=this[s];i=n.nodeType===1&&(n.className?(" "+n.className+" ").replace(xt," "):"");if(i){o=0;while(r=t[o++]){while(i.indexOf(" "+r+" ")>=0){i=i.replace(" "+r+" "," ")}}a=e?d.trim(i):"";if(n.className!==a){n.className=a}}}}return this},toggleClass:function(e,t){var n=typeof e;if(typeof t==="boolean"&&n==="string"){return t?this.addClass(e):this.removeClass(e)}if(d.isFunction(e)){return this.each(function(n){d(this).toggleClass(e.call(this,n,this.className,t),t)})}return this.each(function(){if(n==="string"){var t,i=0,r=d(this),o=e.match(j)||[];while(t=o[i++]){if(r.hasClass(t)){r.removeClass(t)}else{r.addClass(t)}}}else if(n===F||n==="boolean"){if(this.className){d._data(this,"__className__",this.className)}this.className=this.className||e===false?"":d._data(this,"__className__")||""}})},hasClass:function(e){var t=" "+e+" ",n=0,i=this.length;for(;n<i;n++){if(this[n].nodeType===1&&(" "+this[n].className+" ").replace(xt," ").indexOf(t)>=0){return true}}return false}});d.each(("blur focus focusin focusout load resize scroll unload click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup error contextmenu").split(" "),function(e,t){d.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});d.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)}});var wt=d.now();var Tt=/\?/;var Ct=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;d.parseJSON=function(t){if(e.JSON&&e.JSON.parse){return e.JSON.parse(t+"")}var n,i=null,r=d.trim(t+"");return r&&!d.trim(r.replace(Ct,function(e,t,r,o){if(n&&t){i=0}if(i===0){return e}n=r||t;i+=!o-!r;return""}))?Function("return "+r)():d.error("Invalid JSON: "+t)};d.parseXML=function(t){var n,i;if(!t||typeof t!=="string"){return null}try{if(e.DOMParser){i=new DOMParser;n=i.parseFromString(t,"text/xml")}else{n=new ActiveXObject("Microsoft.XMLDOM");n.async="false";n.loadXML(t)}}catch(e){n=undefined}if(!n||!n.documentElement||n.getElementsByTagName("parsererror").length){d.error("Invalid XML: "+t)}return n};var Nt,Et,kt=/#.*$/,St=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,jt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Ht=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,qt={},_t={},Mt="*/".concat("*");try{Et=location.href}catch(e){Et=N.createElement("a");Et.href="";Et=Et.href}Nt=Ht.exec(Et.toLowerCase())||[];function Ft(e){return function(t,n){if(typeof t!=="string"){n=t;t="*"}var i,r=0,o=t.toLowerCase().match(j)||[];if(d.isFunction(n)){while(i=o[r++]){if(i.charAt(0)==="+"){i=i.slice(1)||"*";(e[i]=e[i]||[]).unshift(n)}else{(e[i]=e[i]||[]).push(n)}}}}}function Ot(e,t,n,i){var r={},o=e===_t;function a(s){var u;r[s]=true;d.each(e[s]||[],function(e,s){var l=s(t,n,i);if(typeof l==="string"&&!o&&!r[l]){t.dataTypes.unshift(l);a(l);return false}else if(o){return!(u=l)}});return u}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Bt(e,t){var n,i,r=d.ajaxSettings.flatOptions||{};for(i in t){if(t[i]!==undefined){(r[i]?e:n||(n={}))[i]=t[i]}}if(n){d.extend(true,e,n)}return e}function Pt(e,t,n){var i,r,o,a,s=e.contents,u=e.dataTypes;while(u[0]==="*"){u.shift();if(r===undefined){r=e.mimeType||t.getResponseHeader("Content-Type")}}if(r){for(a in s){if(s[a]&&s[a].test(r)){u.unshift(a);break}}}if(u[0]in n){o=u[0]}else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){o=a;break}if(!i){i=a}}o=o||i}if(o){if(o!==u[0]){u.unshift(o)}return n[o]}}function Rt(e,t,n,i){var r,o,a,s,u,l={},f=e.dataTypes.slice();if(f[1]){for(a in e.converters){l[a.toLowerCase()]=e.converters[a]}}o=f.shift();while(o){if(e.responseFields[o]){n[e.responseFields[o]]=t}if(!u&&i&&e.dataFilter){t=e.dataFilter(t,e.dataType)}u=o;o=f.shift();if(o){if(o==="*"){o=u}else if(u!=="*"&&u!==o){a=l[u+" "+o]||l["* "+o];if(!a){for(r in l){s=r.split(" ");if(s[1]===o){a=l[u+" "+s[0]]||l["* "+s[0]];if(a){if(a===true){a=l[r]}else if(l[r]!==true){o=s[0];f.unshift(s[1])}break}}}}if(a!==true){if(a&&e["throws"]){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}}}}}return{state:"success",data:t}}d.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et,type:"GET",isLocal:Dt.test(Nt[1]),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":d.parseJSON,"text xml":d.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Bt(Bt(e,d.ajaxSettings),t):Bt(d.ajaxSettings,e)},ajaxPrefilter:Ft(qt),ajaxTransport:Ft(_t),ajax:function(e,t){if(typeof e==="object"){t=e;e=undefined}t=t||{};var n,i,r,o,a,s,u,l,f=d.ajaxSetup({},t),c=f.context||f,p=f.context&&(c.nodeType||c.jquery)?d(c):d.event,h=d.Deferred(),m=d.Callbacks("once memory"),g=f.statusCode||{},y={},v={},b=0,x="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(b===2){if(!l){l={};while(t=At.exec(o)){l[t[1].toLowerCase()]=t[2]}}t=l[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return b===2?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();if(!b){e=v[n]=v[n]||e;y[e]=t}return this},overrideMimeType:function(e){if(!b){f.mimeType=e}return this},statusCode:function(e){var t;if(e){if(b<2){for(t in e){g[t]=[g[t],e[t]]}}else{w.always(e[w.status])}}return this},abort:function(e){var t=e||x;if(u){u.abort(t)}T(0,t);return this}};h.promise(w).complete=m.add;w.success=w.done;w.error=w.fail;f.url=((e||f.url||Et)+"").replace(kt,"").replace(Lt,Nt[1]+"//");f.type=t.method||t.type||f.method||f.type;f.dataTypes=d.trim(f.dataType||"*").toLowerCase().match(j)||[""];if(f.crossDomain==null){n=Ht.exec(f.url.toLowerCase());f.crossDomain=!!(n&&(n[1]!==Nt[1]||n[2]!==Nt[2]||(n[3]||(n[1]==="http:"?"80":"443"))!==(Nt[3]||(Nt[1]==="http:"?"80":"443"))))}if(f.data&&f.processData&&typeof f.data!=="string"){f.data=d.param(f.data,f.traditional)}Ot(qt,f,t,w);if(b===2){return w}s=d.event&&f.global;if(s&&d.active++===0){d.event.trigger("ajaxStart")}f.type=f.type.toUpperCase();f.hasContent=!jt.test(f.type);r=f.url;if(!f.hasContent){if(f.data){r=f.url+=(Tt.test(r)?"&":"?")+f.data;delete f.data}if(f.cache===false){f.url=St.test(r)?r.replace(St,"$1_="+wt++):r+(Tt.test(r)?"&":"?")+"_="+wt++}}if(f.ifModified){if(d.lastModified[r]){w.setRequestHeader("If-Modified-Since",d.lastModified[r])}if(d.etag[r]){w.setRequestHeader("If-None-Match",d.etag[r])}}if(f.data&&f.hasContent&&f.contentType!==false||t.contentType){w.setRequestHeader("Content-Type",f.contentType)}w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+(f.dataTypes[0]!=="*"?", "+Mt+"; q=0.01":""):f.accepts["*"]);for(i in f.headers){w.setRequestHeader(i,f.headers[i])}if(f.beforeSend&&(f.beforeSend.call(c,w,f)===false||b===2)){return w.abort()}x="abort";for(i in{success:1,error:1,complete:1}){w[i](f[i])}u=Ot(_t,f,t,w);if(!u){T(-1,"No Transport")}else{w.readyState=1;if(s){p.trigger("ajaxSend",[w,f])}if(f.async&&f.timeout>0){a=setTimeout(function(){w.abort("timeout")},f.timeout)}try{b=1;u.send(y,T)}catch(e){if(b<2){T(-1,e)}else{throw e}}}function T(e,t,n,i){var l,y,v,x,T,C=t;if(b===2){return}b=2;if(a){clearTimeout(a)}u=undefined;o=i||"";w.readyState=e>0?4:0;l=e>=200&&e<300||e===304;if(n){x=Pt(f,w,n)}x=Rt(f,x,w,l);if(l){if(f.ifModified){T=w.getResponseHeader("Last-Modified");if(T){d.lastModified[r]=T}T=w.getResponseHeader("etag");if(T){d.etag[r]=T}}if(e===204||f.type==="HEAD"){C="nocontent"}else if(e===304){C="notmodified"}else{C=x.state;y=x.data;v=x.error;l=!v}}else{v=C;if(e||!C){C="error";if(e<0){e=0}}}w.status=e;w.statusText=(t||C)+"";if(l){h.resolveWith(c,[y,C,w])}else{h.rejectWith(c,[w,C,v])}w.statusCode(g);g=undefined;if(s){p.trigger(l?"ajaxSuccess":"ajaxError",[w,f,l?y:v])}m.fireWith(c,[w,C]);if(s){p.trigger("ajaxComplete",[w,f]);if(!--d.active){d.event.trigger("ajaxStop")}}}return w},getJSON:function(e,t,n){return d.get(e,t,n,"json")},getScript:function(e,t){return d.get(e,undefined,t,"script")}});d.each(["get","post"],function(e,t){d[t]=function(e,n,i,r){if(d.isFunction(n)){r=r||i;i=n;n=undefined}return d.ajax({url:e,type:t,dataType:r,data:n,success:i})}});d._evalUrl=function(e){return d.ajax({url:e,type:"GET",dataType:"script",async:false,global:false,throws:true})};d.fn.extend({wrapAll:function(e){if(d.isFunction(e)){return this.each(function(t){d(this).wrapAll(e.call(this,t))})}if(this[0]){var t=d(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstChild&&e.firstChild.nodeType===1){e=e.firstChild}return e}).append(this)}return this},wrapInner:function(e){if(d.isFunction(e)){return this.each(function(t){d(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=d(this),n=t.contents();if(n.length){n.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=d.isFunction(e);return this.each(function(n){d(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){if(!d.nodeName(this,"body")){d(this).replaceWith(this.childNodes)}}).end()}});d.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!f.reliableHiddenOffsets()&&(e.style&&e.style.display||d.css(e,"display"))==="none"};d.expr.filters.visible=function(e){return!d.expr.filters.hidden(e)};var Wt=/%20/g,$t=/\[\]$/,zt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Xt=/^(?:input|select|textarea|keygen)/i;function Ut(e,t,n,i){var r;if(d.isArray(t)){d.each(t,function(t,r){if(n||$t.test(e)){i(e,r)}else{Ut(e+"["+(typeof r==="object"?t:"")+"]",r,n,i)}})}else if(!n&&d.type(t)==="object"){for(r in t){Ut(e+"["+r+"]",t[r],n,i)}}else{i(e,t)}}d.param=function(e,t){var n,i=[],r=function(e,t){t=d.isFunction(t)?t():t==null?"":t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(t===undefined){t=d.ajaxSettings&&d.ajaxSettings.traditional}if(d.isArray(e)||e.jquery&&!d.isPlainObject(e)){d.each(e,function(){r(this.name,this.value)})}else{for(n in e){Ut(n,e[n],t,r)}}return i.join("&").replace(Wt,"+")};d.fn.extend({serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=d.prop(this,"elements");return e?d.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!d(this).is(":disabled")&&Xt.test(this.nodeName)&&!It.test(e)&&(this.checked||!J.test(e))}).map(function(e,t){var n=d(this).val();return n==null?null:d.isArray(n)?d.map(n,function(e){return{name:t.name,value:e.replace(zt,"\r\n")}}):{name:t.name,value:n.replace(zt,"\r\n")}}).get()}});d.ajaxSettings.xhr=e.ActiveXObject!==undefined?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Gt()||Qt()}:Gt;var Vt=0,Jt={},Yt=d.ajaxSettings.xhr();if(e.attachEvent){e.attachEvent("onunload",function(){for(var e in Jt){Jt[e](undefined,true)}})}f.cors=!!Yt&&"withCredentials"in Yt;Yt=f.ajax=!!Yt;if(Yt){d.ajaxTransport(function(e){if(!e.crossDomain||f.cors){var t;return{send:function(n,i){var r,o=e.xhr(),a=++Vt;o.open(e.type,e.url,e.async,e.username,e.password);if(e.xhrFields){for(r in e.xhrFields){o[r]=e.xhrFields[r]}}if(e.mimeType&&o.overrideMimeType){o.overrideMimeType(e.mimeType)}if(!e.crossDomain&&!n["X-Requested-With"]){n["X-Requested-With"]="XMLHttpRequest"}for(r in n){if(n[r]!==undefined){o.setRequestHeader(r,n[r]+"")}}o.send(e.hasContent&&e.data||null);t=function(n,r){var s,u,l;if(t&&(r||o.readyState===4)){delete Jt[a];t=undefined;o.onreadystatechange=d.noop;if(r){if(o.readyState!==4){o.abort()}}else{l={};s=o.status;if(typeof o.responseText==="string"){l.text=o.responseText}try{u=o.statusText}catch(e){u=""}if(!s&&e.isLocal&&!e.crossDomain){s=l.text?200:404}else if(s===1223){s=204}}}if(l){i(s,u,l,o.getAllResponseHeaders())}};if(!e.async){t()}else if(o.readyState===4){setTimeout(t)}else{o.onreadystatechange=Jt[a]=t}},abort:function(){if(t){t(undefined,true)}}}}})}function Gt(){try{return new e.XMLHttpRequest}catch(e){}}function Qt(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){d.globalEval(e);return e}}});d.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET";e.global=false}});d.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=N.head||d("head")[0]||N.documentElement;return{send:function(i,r){t=N.createElement("script");t.async=true;if(e.scriptCharset){t.charset=e.scriptCharset}t.src=e.url;t.onload=t.onreadystatechange=function(e,n){if(n||!t.readyState||/loaded|complete/.test(t.readyState)){t.onload=t.onreadystatechange=null;if(t.parentNode){t.parentNode.removeChild(t)}t=null;if(!n){r(200,"success")}}};n.insertBefore(t,n.firstChild)},abort:function(){if(t){t.onload(undefined,true)}}}}});var Kt=[],Zt=/(=)\?(?=&|$)|\?\?/;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||d.expando+"_"+wt++;this[e]=true;return e}});d.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=t.jsonp!==false&&(Zt.test(t.url)?"url":typeof t.data==="string"&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(t.data)&&"data");if(s||t.dataTypes[0]==="jsonp"){r=t.jsonpCallback=d.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(s){t[s]=t[s].replace(Zt,"$1"+r)}else if(t.jsonp!==false){t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+r}t.converters["script json"]=function(){if(!a){d.error(r+" was not called")}return a[0]};t.dataTypes[0]="json"
;o=e[r];e[r]=function(){a=arguments};i.always(function(){e[r]=o;if(t[r]){t.jsonpCallback=n.jsonpCallback;Kt.push(r)}if(a&&d.isFunction(o)){o(a[0])}a=o=undefined});return"script"}});d.parseHTML=function(e,t,n){if(!e||typeof e!=="string"){return null}if(typeof t==="boolean"){n=t;t=false}t=t||N;var i=x.exec(e),r=!n&&[];if(i){return[t.createElement(i[1])]}i=d.buildFragment([e],t,r);if(r&&r.length){d(r).remove()}return d.merge([],i.childNodes)};var en=d.fn.load;d.fn.load=function(e,t,n){if(typeof e!=="string"&&en){return en.apply(this,arguments)}var i,r,o,a=this,s=e.indexOf(" ");if(s>=0){i=d.trim(e.slice(s,e.length));e=e.slice(0,s)}if(d.isFunction(t)){n=t;t=undefined}else if(t&&typeof t==="object"){o="POST"}if(a.length>0){d.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){r=arguments;a.html(i?d("<div>").append(d.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){a.each(n,r||[e.responseText,t,e])})}return this};d.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){d.fn[t]=function(e){return this.on(t,e)}});d.expr.filters.animated=function(e){return d.grep(d.timers,function(t){return e===t.elem}).length};var tn=e.document.documentElement;function nn(e){return d.isWindow(e)?e:e.nodeType===9?e.defaultView||e.parentWindow:false}d.offset={setOffset:function(e,t,n){var i,r,o,a,s,u,l,f=d.css(e,"position"),c=d(e),p={};if(f==="static"){e.style.position="relative"}s=c.offset();o=d.css(e,"top");u=d.css(e,"left");l=(f==="absolute"||f==="fixed")&&d.inArray("auto",[o,u])>-1;if(l){i=c.position();a=i.top;r=i.left}else{a=parseFloat(o)||0;r=parseFloat(u)||0}if(d.isFunction(t)){t=t.call(e,n,s)}if(t.top!=null){p.top=t.top-s.top+a}if(t.left!=null){p.left=t.left-s.left+r}if("using"in t){t.using.call(e,p)}else{c.css(p)}}};d.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){d.offset.setOffset(this,e,t)})}var t,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(!o){return}t=o.documentElement;if(!d.contains(t,r)){return i}if(typeof r.getBoundingClientRect!==F){i=r.getBoundingClientRect()}n=nn(o);return{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}},position:function(){if(!this[0]){return}var e,t,n={top:0,left:0},i=this[0];if(d.css(i,"position")==="fixed"){t=i.getBoundingClientRect()}else{e=this.offsetParent();t=this.offset();if(!d.nodeName(e[0],"html")){n=e.offset()}n.top+=d.css(e[0],"borderTopWidth",true);n.left+=d.css(e[0],"borderLeftWidth",true)}return{top:t.top-n.top-d.css(i,"marginTop",true),left:t.left-n.left-d.css(i,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||tn;while(e&&(!d.nodeName(e,"html")&&d.css(e,"position")==="static")){e=e.offsetParent}return e||tn})}});d.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);d.fn[e]=function(i){return V(this,function(e,i,r){var o=nn(e);if(r===undefined){return o?t in o?o[t]:o.document.documentElement[i]:e[i]}if(o){o.scrollTo(!n?r:d(o).scrollLeft(),n?r:d(o).scrollTop())}else{e[i]=r}},e,i,arguments.length,null)}});d.each(["top","left"],function(e,t){d.cssHooks[t]=Oe(f.pixelPosition,function(e,n){if(n){n=Me(e,t);return qe.test(n)?d(e).position()[t]+"px":n}})});d.each({Height:"height",Width:"width"},function(e,t){d.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){d.fn[i]=function(i,r){var o=arguments.length&&(n||typeof i!=="boolean"),a=n||(i===true||r===true?"margin":"border");return V(this,function(t,n,i){var r;if(d.isWindow(t)){return t.document.documentElement["client"+e]}if(t.nodeType===9){r=t.documentElement;return Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])}return i===undefined?d.css(t,n,a):d.style(t,n,i,a)},t,o?i:undefined,o,null)}})});d.fn.size=function(){return this.length};d.fn.andSelf=d.fn.addBack;if(typeof define==="function"&&define.amd){define("jquery",[],function(){return d})}var rn=e.jQuery,on=e.$;d.noConflict=function(t){if(e.$===d){e.$=on}if(t&&e.jQuery===d){e.jQuery=rn}return d};if(typeof t===F){e.jQuery=e.$=d}return d});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
